{
  "source_file_path_relative_to_docusaurus_root": "blog/2021-10-14-introducing-entcache.md",
  "source_file_content_hash": "38118b9e498a0dc6be407b2c9e619993340b3b3e69d1f10cd981bd6f3aeb3680",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Announcing entcache - a Cache Driver for Ent\nauthor: Ariel Mashraki\nauthorURL: \"https://github.com/a8m\"\nauthorImageURL: \"https://avatars0.githubusercontent.com/u/7413593\"\nauthorTwitter: arielmashraki\n---",
      "source_content_hash": "0d59cc482700d019f56fa2ac1491107c6c08117dfb23a0351decad614b3b7041",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "While working on [Ariga's](https://ariga.io) operational data graph query engine, we saw the opportunity to greatly\nimprove the performance of many use cases by building a robust caching library. As heavy users of Ent, it was only\nnatural for us to implement this layer as an extension to Ent. In this post, I will briefly explain what caches are,\nhow they fit into software architectures, and present `entcache` - a cache driver for Ent.",
      "source_content_hash": "6c4bce2135f2b13d9262490afeb26175631eef947275b853356c82c497d1fb8a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在开发[Ariga](https://ariga.io)的运营数据图谱查询引擎时，我们发现通过构建健壮的缓存库可以显著提升众多场景下的性能表现。作为Ent的重度使用者，我们很自然地将这一层实现为Ent的扩展。本文将简要介绍缓存的概念、其在软件架构中的作用，并展示`entcache`——一个专为Ent设计的缓存驱动。"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Caching is a popular strategy for improving application performance. It is based on the observation that the speed for\nretrieving data using different types of media can vary within many orders of magnitude.\n[Jeff Dean](https://twitter.com/jeffdean?lang=en) famously presented the following numbers in a\n[lecture](http://static.googleusercontent.com/media/research.google.com/en/us/people/jeff/stanford-295-talk.pdf) about\n\"Software Engineering Advice from Building Large-Scale Distributed Systems\":",
      "source_content_hash": "609fb2b80563f3cb2a044d9f754ffdffe795de64b49d32d6735b53c919ef9c5a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "缓存是提升应用性能的常用策略，其原理基于不同介质的数据读取速度可能存在数量级差异。[Jeff Dean](https://twitter.com/jeffdean?lang=en)在关于\"[构建大规模分布式系统的软件工程建议](http://static.googleusercontent.com/media/research.google.com/en/us/people/jeff/stanford-295-talk.pdf)\"的著名演讲中，曾给出以下经典数据："
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "![cache numbers](https://entgo.io/images/assets/entcache/cache-numbers.png)",
      "source_content_hash": "a302b89d6c10c02b9de36c8dc4590618dcec33beddf96e382970ca4bc3f5d321",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![缓存性能对比](https://entgo.io/images/assets/entcache/cache-numbers.png)"
      }
    },
    {
      "segment_id": "2df4f75f",
      "source_content": "These numbers show things that experienced software engineers know intuitively: reading from memory is faster than\nreading from disk, retrieving data from the same data center is faster than going out to the internet to fetch it.\nWe add to that, that some calculations are expensive and slow, and that fetching a precomputed result can be much faster\n(and less expensive) than recomputing it every time.",
      "source_content_hash": "716b9d388e9e4a5a78c3662a0e48dc0633fec5eff058a78928abeb67cb26ac67",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "这些数据印证了资深工程师的直觉认知：内存读取快于磁盘访问，同数据中心的数据获取快于互联网请求。我们还需补充的是，某些计算过程本身代价高昂，获取预计算结果往往比实时重复计算更为高效（且成本更低）。"
      }
    },
    {
      "segment_id": "a76548f8",
      "source_content": "The collective intelligence of [Wikipedia](https://en.wikipedia.org/wiki/Cache_(computing)) tells us that a Cache is\n\"a hardware or software component that stores data so that future requests for that data can be served faster\".\nIn other words, if we can store a query result in RAM, we can fulfill a request that depends on it much faster than\nif we need to go over the network to our database, have it read data from disk, run some computation on it, and only\nthen send it back to us (over a network).",
      "source_content_hash": "9d175a390df6c4d62ba6a6869833e2b2587dd52d30d3170ef0d5779ef27af355",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "[维基百科](https://en.wikipedia.org/wiki/Cache_(computing))将缓存定义为\"存储数据以便未来请求能更快响应的硬件或软件组件\"。换言之，若能将查询结果暂存于内存，其响应速度将远胜于：通过网络访问数据库→磁盘读取→执行计算→结果回传（仍需经过网络）的完整链路。"
      }
    },
    {
      "segment_id": "4daf5cdd",
      "source_content": "However, as software engineers, we should remember that caching is a notoriously complicated topic. As the phrase\ncoined by early-day Netscape engineer [Phil Karlton](https://martinfowler.com/bliki/TwoHardThings.html) says: _\"There\nare only two hard things in Computer Science: cache invalidation and naming things\"_. For instance, in systems that rely\non strong consistency, a cache entry may be stale, therefore causing the system to behave incorrectly. For this reason,\ntake great care and pay attention to detail when you are designing caches into your system architectures.",
      "source_content_hash": "edbd041dbdbc5b638455e9704c3b0280798ee21577aed83fb11e01be854b0c24",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "但作为工程师必须谨记：缓存设计是公认的复杂领域。正如早期网景工程师[Phil Karlton](https://martinfowler.com/bliki/TwoHardThings.html)的名言：\"计算机科学只有两件难事：缓存失效和命名\"。例如在强一致性系统中，陈旧的缓存条目可能导致系统行为异常。因此，在架构设计中引入缓存时，必须审慎考虑每个细节。"
      }
    },
    {
      "segment_id": "62a6890b",
      "source_content": "### Presenting `entcache`",
      "source_content_hash": "f500b0bf5d67a6a6e6a25ddac57b85721e2f9cba44bbaec05900b940cafc54c8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 介绍`entcache`"
      }
    },
    {
      "segment_id": "3cfe6286",
      "source_content": "The `entcache` package provides its users with a new Ent driver that can wrap one of the existing SQL drivers available\nfor Ent. On a high level, it decorates the Query method of the given driver, and for each call:",
      "source_content_hash": "182e8ebd757347ee5d33ff8b8cc2f8d734520dbe698b9684745291ce14af934f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`entcache`包提供了一个可包装现有Ent SQL驱动的新驱动。其高层逻辑是对基础驱动的Query方法进行装饰，每次调用时："
      }
    },
    {
      "segment_id": "aa83231c",
      "source_content": "1. Generates a cache key (i.e. hash) from its arguments (i.e. statement and parameters).\n\n2. Checks the cache to see if the results for this query are already available. If they are (this is called a\n   cache-hit), the database is skipped and results are returned to the caller from memory.\n\n3. If the cache does not contain an entry for the query, the query is passed to the database.\n\n4. After the query is executed, the driver records the raw values of the returned rows (`sql.Rows`), and stores them in\n   the cache with the generated cache key.",
      "source_content_hash": "357be5db540443b9f3e1484462a7afacf262932535f214fa4538222eb3891e1d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 根据参数（语句和参数）生成缓存键（哈希值）\n\n2. 检查缓存中是否已有该查询结果（缓存命中）。若存在则直接返回内存结果，跳过数据库查询\n\n3. 若缓存未命中，则将查询传递给底层数据库执行\n\n4. 查询执行后，驱动会记录返回行(`sql.Rows`)的原始值，并使用生成的缓存键将其存入缓存"
      }
    },
    {
      "segment_id": "b36c6338",
      "source_content": "The package provides a variety of options to configure the TTL of the cache entries, control the hash function, provide\ncustom and multi-level cache stores, evict and skip cache entries. See the full documentation in\n[https://pkg.go.dev/ariga.io/entcache](https://pkg.go.dev/ariga.io/entcache).",
      "source_content_hash": "6140dd98edd9baa91a7e733bc1fc54dec44cd1a8c2693866355fd10433353e88",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "该包提供多种配置选项：缓存条目TTL、哈希函数控制、自定义多级缓存存储、缓存淘汰与跳过机制等。完整文档参见[https://pkg.go.dev/ariga.io/entcache](https://pkg.go.dev/ariga.io/entcache)。"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "As we mentioned above, correctly configuring caching for an application is a delicate task, and so `entcache` provides\ndevelopers with different caching levels that can be used with it:",
      "source_content_hash": "bf1fb3d814a6b21a8e7f30ead7285b1ffc819d5a27f3d5d6c178213547d03859",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如前所述，正确配置应用缓存是精细工作，因此`entcache`为开发者提供了不同层级的缓存方案："
      }
    },
    {
      "segment_id": "3df4f066",
      "source_content": "1. A `context.Context`-based cache. Usually, attached to a request and does not work with other cache levels.\n   It is used to eliminate duplicate queries that are executed by the same request.\n\n2. A driver-level cache used by the `ent.Client`. An application usually creates a driver per database,\n   and therefore, we treat it as a process-level cache.\n\n3. A remote cache. For example, a Redis database that provides a persistence layer for storing and sharing cache\n   entries between multiple processes. A remote cache layer is resistant to application deployment changes or failures,\n   and allows reducing the number of identical queries executed on the database by different process.\n\n4. A cache hierarchy, or multi-level cache allows structuring the cache in hierarchical way. The hierarchy of cache\n   stores is mostly based on access speeds and cache sizes. For example, a 2-level cache that composed of an LRU-cache\n   in the application memory, and a remote-level cache backed by a Redis database.",
      "source_content_hash": "44fb5604ecb555e768c08a419cb22002aee004237dc565269154b9534b2e866f",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 基于 `context.Context` 的缓存。通常附加到单个请求中，不与其他缓存层级联动。用于消除同一请求内重复执行的查询。\n\n2. 由 `ent.Client` 使用的驱动级缓存。由于应用通常为每个数据库创建独立驱动，因此我们将其视为进程级缓存。\n\n3. 远程缓存。例如 Redis 数据库，为多个进程提供持久化缓存存储和共享能力。远程缓存层能抵御应用部署变更或故障，并减少不同进程对数据库执行的相同查询。\n\n4. 缓存层次结构（多级缓存）允许以层级方式组织缓存。缓存存储的层级主要基于访问速度和缓存容量。例如：由应用内存中的 LRU 缓存和 Redis 支撑的远程缓存组成的两级缓存。"
      }
    },
    {
      "segment_id": "f01228d3",
      "source_content": "Let's demonstrate this by explaining the `context.Context` based cache.",
      "source_content_hash": "1eeb0f634987f3145956895c6e58626fee1f229305f40f2f09155babccfd4d42",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "我们通过解释基于 `context.Context` 的缓存来演示这一机制。"
      }
    },
    {
      "segment_id": "93028a4e",
      "source_content": "### Context-Level Cache",
      "source_content_hash": "1f50c662cb7efca601b0b75bdb5c0ddd3fd2ed68ef03cda4c95f6fcdd1c7bb1f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 上下文级缓存"
      }
    },
    {
      "segment_id": "e8e162a9",
      "source_content": "The `ContextLevel` option configures the driver to work with a `context.Context` level cache. The context is usually\nattached to a request (e.g. `*http.Request`) and is not available in multi-level mode. When this option is used as\na cache store, the attached `context.Context` carries an LRU cache (can be configured differently), and the driver\nstores and searches entries in the LRU cache when queries are executed.",
      "source_content_hash": "e85fd76253a57f2e75875943255a5c9f918d868d1200057192a59294a641be73",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`ContextLevel` 选项将驱动配置为使用上下文级缓存。上下文通常附加到请求（如 `*http.Request`）中，且不参与多级缓存模式。当采用此选项作为缓存存储时，附带的 `context.Context` 会携带一个 LRU 缓存（可配置其他策略），驱动在执行查询时会在该 LRU 缓存中存储和检索条目。"
      }
    },
    {
      "segment_id": "a1fa5396",
      "source_content": "This option is ideal for applications that require strong consistency, but still want to avoid executing duplicate\ndatabase queries on the same request. For example, given the following GraphQL query:",
      "source_content_hash": "eab8802bfab8b54f93e4df887765e09496086d314273a6213ad3e56e3f333328",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "此选项非常适合需要强一致性、但仍希望避免同一请求内重复执行数据库查询的应用。例如以下 GraphQL 查询："
      }
    },
    {
      "segment_id": "b73a4a7a",
      "source_content": "```graphql\nquery($ids: [ID!]!) {\n    nodes(ids: $ids) {\n        ... on User {\n            id\n            name\n            todos {\n                id\n                owner {\n                    id\n                    name\n                }\n            }\n        }\n    }\n}\n```",
      "source_content_hash": "d1bc8b90091044a523e1b6abeaa3518b0d78385e65be03116b2c278c8eccdd94",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "2838eb68",
      "source_content": "A naive solution for resolving the above query will execute, 1 for getting N users, another N queries for getting\nthe todos of each user, and a query for each todo item for getting its owner (read more about the\n[_N+1 Problem_](https://entgo.io/docs/tutorial-todo-gql-field-collection/#problem)).",
      "source_content_hash": "5c8697620c9898649cc49f684d66b29150fff9d381e55f3b3eac0d8070b55233",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "原始方案解析该查询需要执行：1 次获取 N 个用户，N 次获取每个用户的待办事项，以及每个待办事项各 1 次获取其所有者（详细了解 [_N+1 问题_](https://entgo.io/docs/tutorial-todo-gql-field-collection/#problem)）。"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "However, Ent provides a unique approach for resolving such queries(read more in\n[Ent website](https://entgo.io/docs/tutorial-todo-gql-field-collection)) and therefore, only 3 queries will be executed\nin this case. 1 for getting N users, 1 for getting the todo items of **all** users, and 1 query for getting the owners\nof **all** todo items.",
      "source_content_hash": "1839380288e830631966804073a9a52b8ec21897af463868c01e3f1b73e86d13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "但 Ent 提供了独特的解析方案（详见 [Ent 官网](https://entgo.io/docs/tutorial-todo-gql-field-collection)），最终只需执行 3 次查询：1 次获取 N 个用户，1 次获取**所有**用户的待办事项，1 次获取**所有**待办事项的所有者。"
      }
    },
    {
      "segment_id": "3c19e221",
      "source_content": "With `entcache`, the number of queries may be reduced to 2, as the first and last queries are identical (see\n[code example](https://github.com/ariga/entcache/blob/master/internal/examples/ctxlevel/main_test.go)).",
      "source_content_hash": "424a39c3284b33371feb2a8165b284ff65546673a8cf2bc07c29c8b7eead658c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用 `entcache` 后，查询次数可降至 2 次，因为首尾两次查询完全一致（参见 [代码示例](https://github.com/ariga/entcache/blob/master/internal/examples/ctxlevel/main_test.go)）。"
      }
    },
    {
      "segment_id": "1b4de6df",
      "source_content": "![context-level-cache](https://entgo.io/images/assets/entcache/ctxlevel.png)",
      "source_content_hash": "98f367829b9d358d47c33027e7179ddfd5f38aeccf3491872f8821a496714784",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![上下文级缓存示意图](https://entgo.io/images/assets/entcache/ctxlevel.png)"
      }
    },
    {
      "segment_id": "1958bc43",
      "source_content": "The different levels are explained in depth in the repository\n[README](https://github.com/ariga/entcache/blob/master/README.md).",
      "source_content_hash": "c38f4ea2b1da405b2efee4455c653f53b9c943a55c340ddd9c8e8287560b1de1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "各缓存层级的详细说明请参阅仓库 [README](https://github.com/ariga/entcache/blob/master/README.md)。"
      }
    },
    {
      "segment_id": "cbd60296",
      "source_content": "### Getting Started",
      "source_content_hash": "4467215509db0bd0e0f61cf6ee2efa3316c8285b2a46d4449ff85f9ef85923d9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 快速开始"
      }
    },
    {
      "segment_id": "c5754696",
      "source_content": "> If you are not familiar with how to set up a new Ent project, complete Ent\n> [Setting Up tutorial](https://entgo.io/docs/tutorial-setup) first.",
      "source_content_hash": "3ffe64812ae3e1677094a365c479efac6bf7dd544b1212457cb2ebae02b85191",
      "node_type": "blockquote",
      "translatable": true,
      "translations": {
        "zh-CN": "> 若您不熟悉如何新建 Ent 项目，请先完成 Ent [入门教程](https://entgo.io/docs/tutorial-setup)。"
      }
    },
    {
      "segment_id": "b9331170",
      "source_content": "First, `go get` the package using the following command.",
      "source_content_hash": "fe5b5b1dca6b4145661dd8979cd6d634c08a40c0d75aa50d3aa9a41a7ca4baac",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "首先通过以下命令获取该包："
      }
    },
    {
      "segment_id": "2f34b0ad",
      "source_content": "```shell\ngo get ariga.io/entcache\n```",
      "source_content_hash": "701a1d872d56a1b113816cf4cf03dc210aa18e85cc00991aa2b38202fe51c972",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "9c9e2b64",
      "source_content": "After installing `entcache`, you can easily add it to your project with the snippet below:",
      "source_content_hash": "8b20bd899196c1930be797424efd7c2dfd2967cf52751b8206c4b3f75177b1c3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "安装 `entcache` 后，您可以通过以下代码片段快速集成到项目中："
      }
    },
    {
      "segment_id": "43cca4d3",
      "source_content": "```go\n// Open the database connection.\ndb, err := sql.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\nif err != nil {\n\tlog.Fatal(\"opening database\", err)\n}\n// Decorates the sql.Driver with entcache.Driver.\ndrv := entcache.NewDriver(db)\n// Create an ent.Client.\nclient := ent.NewClient(ent.Driver(drv))\n\n// Tell the entcache.Driver to skip the caching layer\n// when running the schema migration.\nif client.Schema.Create(entcache.Skip(ctx)); err != nil {\n\tlog.Fatal(\"running schema migration\", err)\n}\n\n// Run queries.\nif u, err := client.User.Get(ctx, id); err != nil {\n\tlog.Fatal(\"querying user\", err)\n}\n// The query below is cached.\nif u, err := client.User.Get(ctx, id); err != nil {\n\tlog.Fatal(\"querying user\", err)\n}\n```",
      "source_content_hash": "670cd5b1ff9970110f605ac2122eb1bdb2f780a761254a592c9fb05a83c1b0be",
      "node_type": "code",
      "translatable": false,
      "translations": {}
    },
    {
      "segment_id": "d2a3d4c7",
      "source_content": "To see more advanced examples, head over to the repo's\n[examples directory](https://github.com/ariga/entcache/tree/master/internal/examples).",
      "source_content_hash": "392f14687fb301d8f18f9a1bce48adbfaa525dae201bf96ee92bbf0ac85d0553",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更多高级示例请访问仓库的 [examples 目录](https://github.com/ariga/entcache/tree/master/internal/examples)。"
      }
    },
    {
      "segment_id": "f6a06609",
      "source_content": "### Wrapping Up",
      "source_content_hash": "6df1295c536bdf3cf58241755891051d109001c784cced5b33a00f70983bc553",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 总结"
      }
    },
    {
      "segment_id": "6b40e7a2",
      "source_content": "In this post, I presented “entcache” a new cache driver for Ent that I developed while working on [Ariga's Operational\nData Graph](https://ariga.io) query engine. We started the discussion by briefly mentioning the motivation for including\ncaches in software systems. Following that, we described the features and capabilities of `entcache` and concluded with\na short example of how you can set it up in your application.",
      "source_content_hash": "47726cdcdbc1dd21de44ee9cc46ea0bd4acec8b2b708ab9b0acbd3e6afc38491",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本文介绍了我在开发 [Ariga 运营数据图谱](https://ariga.io) 查询引擎时创建的 Ent 缓存驱动 \"entcache\"。我们首先讨论了在软件系统中引入缓存的动机，接着阐述了 `entcache` 的特性和能力，最后通过简单示例演示了如何将其集成到您的应用中。"
      }
    },
    {
      "segment_id": "d636abf8",
      "source_content": "There are a few features we are working on, and wish to work on, but need help from the community to design them\nproperly (solving cache invalidation, anyone? ;)). If you are interested to contribute, reach out to me on the Ent\nSlack channel.",
      "source_content_hash": "e2be3a88a46eb372d4a4ef531411f909dcf0f8a34eca9747c3ca3b8806394659",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "我们正在开发一些功能，并希望继续推进，但需要社区帮助来完善设计（比如缓存失效问题，有人感兴趣吗？😉）。如果您有意参与贡献，请在Ent的Slack频道联系我。"
      }
    },
    {
      "segment_id": "1699f2b9",
      "source_content": ":::note[For more Ent news and updates:]\n\n- Subscribe to our [Newsletter](https://entgo.substack.com/)\n- Follow us on [Twitter](https://twitter.com/entgo_io)\n- Join us on #ent on the [Gophers Slack](https://entgo.io/docs/slack)\n- Join us on the [Ent Discord Server](https://discord.gg/qZmPgTE6RX)\n\n:::",
      "source_content_hash": "d4f11098ea703d24e53854ec8e2219390959641026efa07de5a588379be52b78",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note[获取更多Ent资讯：]\n\n- 订阅我们的[新闻通讯](https://entgo.substack.com/)\n- 在[Twitter](https://twitter.com/entgo_io)关注我们\n- 加入[Gophers Slack](https://entgo.io/docs/slack)的#ent频道\n- 参与[Ent Discord服务器](https://discord.gg/qZmPgTE6RX)\n\n:::"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2021-10-14-introducing-entcache.md",
  "last_updated_timestamp": "2025-06-05T15:16:18.657578+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "38118b9e498a0dc6be407b2c9e619993340b3b3e69d1f10cd981bd6f3aeb3680"
  }
}