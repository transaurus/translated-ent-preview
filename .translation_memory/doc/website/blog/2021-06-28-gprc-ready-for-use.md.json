{
  "source_file_path_relative_to_docusaurus_root": "blog/2021-06-28-gprc-ready-for-use.md",
  "source_file_content_hash": "0c57dcc6a9dda68a97796d7a3e8c5ed89c2e0c76750a164cbe34a3e11d1e1fbb",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Ent + gRPC is Ready for Usage\nauthor: Rotem Tamir\nauthorURL: \"https://github.com/rotemtam\"\nauthorImageURL: \"https://s.gravatar.com/avatar/36b3739951a27d2e37251867b7d44b1a?s=80\"\nauthorTwitter: _rtam\n---",
      "source_content_hash": "976ebebbd1804d0053a38d48e44aec72f1862d85a1c9bd222e0a0cefdecadd1e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "3fbbcc07",
      "source_content": "A few months ago, we announced the experimental support for \n[generating gRPC services from Ent Schema definitions](https://entgo.io/blog/2021/03/18/generating-a-grpc-server-with-ent). The \nimplementation was not complete yet but we wanted to get it out the door for the community to experiment with and provide\nus with feedback.",
      "source_content_hash": "23bb016b31f4d6af2e855348917827582fba6c60b4729fd898f7d3ff129043b5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "数月前，我们宣布了实验性支持[从Ent模式定义生成gRPC服务](https://entgo.io/blog/2021/03/18/generating-a-grpc-server-with-ent)。当时实现尚未完善，但我们希望尽快发布供社区试用并收集反馈。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "Today, after much feedback from the community, we are happy to announce that the [Ent](https://entgo.io) +\n[gRPC](https://grpc.io) integration is \"Ready for Usage\", this means all of the basic features are complete\nand we anticipate that most Ent applications can utilize this integration.",
      "source_content_hash": "fcce24e382e0ac21514cc66ddbf051a1d5b5a4801dd817a598942d656bac087c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如今，在广泛采纳社区意见后，我们很高兴宣布[Ent](https://entgo.io)与[gRPC](https://grpc.io)的集成已\"正式可用\"，这意味着所有基础功能均已完备，大多数Ent应用均可使用该集成方案。"
      }
    },
    {
      "segment_id": "42ad8e83",
      "source_content": "What have we added since our initial announcement?",
      "source_content_hash": "e3054b9b636e84107d11c62822d1bfcfd67ce2210c18b7ed8884c2678c9ba30f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "自首次发布以来我们新增了哪些功能？"
      }
    },
    {
      "segment_id": "11c829ab",
      "source_content": "- [Support for \"Optional Fields\"](https://entgo.io/docs/grpc-optional-fields) - A common issue with Protobufs \n  is that the way that nil values are represented: a zero-valued primitive field isn't encoded into the binary\n  representation. This means that applications cannot distinguish between zero and not-set for primitive fields.\n  To support this, the Protobuf project supports some \n  \"[Well-Known-Types](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)\" \n  called \"wrapper types\" that wrap the primitive value with a struct. This wasn't previously supported \n  but now when `entproto` generates a Protobuf message definition, it uses these wrapper types to represent\n  \"Optional\" ent fields:\n  ```protobuf {15}\n  // Code generated by entproto. DO NOT EDIT.\n  syntax = \"proto3\";\n  \n  package entpb;\n  \n  import \"google/protobuf/wrappers.proto\";\n  \n  message User {\n    int32 id = 1;\n  \n    string name = 2;\n  \n    string email_address = 3;\n  \n    google.protobuf.StringValue alias = 4;\n  }\n  ```\n\n- [Multi-edge support](https://entgo.io/docs/grpc-edges) - when we released the initial version of  \n  `protoc-gen-entgrpc`, we only supported generating gRPC service implementations for \"Unique\" edges\n  (i.e reference at most one entity). Since a [recent version](https://github.com/ent/contrib/commit/bf9430fbba45a808bc054144f9711833c76bf05c),\n  the plugin supports the generation of gRPC methods to read and write entities with O2M and M2M relationships.\n- [Partial responses](https://entgo.io/docs/grpc-edges#retrieving-edge-ids-for-entities) - By default, edge information\n  is not returned by the `Get` method of the service. This is done deliberately because the amount of entities related \n  to an entity is unbound.\n\n  To allow the caller of to specify whether or not to return the edge information or not, the generated service adheres\n  to [Google AIP-157](https://google.aip.dev/157) (Partial Responses). In short, the `Get<T>Request` message \n  includes an enum named View, this enum allows the caller to control whether or not this information should be retrieved from the database or not.\n  \n  ```protobuf {6-12}\n  message GetUserRequest {\n    int32 id = 1;\n  \n    View view = 2;\n  \n    enum View {\n      VIEW_UNSPECIFIED = 0;\n  \n      BASIC = 1;\n  \n      WITH_EDGE_IDS = 2;\n    }\n  }\n  ```",
      "source_content_hash": "57ddc5f780c85b07b52a39b4b011e256575462d3d8b0d545b930dfebc6d0925e",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- [可选字段支持](https://entgo.io/docs/grpc-optional-fields) - Protobuf的常见痛点在于零值表达机制：原始类型的零值不会被编码进二进制数据，导致应用无法区分零值与未设值。为此Protobuf项目提供了一套\"[知名类型](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)\"作为\"包装类型\"，用结构体封装原始值。现在当`entproto`生成Protobuf消息定义时，会自动使用这些包装类型来表示Ent中的\"可选\"字段：\n  ```protobuf {15}\n  // 由entproto生成的代码，请勿编辑\n  syntax = \"proto3\";\n  \n  package entpb;\n  \n  import \"google/protobuf/wrappers.proto\";\n  \n  message User {\n    int32 id = 1;\n  \n    string name = 2;\n  \n    string email_address = 3;\n  \n    google.protobuf.StringValue alias = 4;\n  }\n  ```\n\n- [多边关系支持](https://entgo.io/docs/grpc-edges) - 初始版本的`protoc-gen-entgrpc`仅支持生成\"唯一\"边(即最多引用单个实体)的gRPC服务实现。[最新版本](https://github.com/ent/contrib/commit/bf9430fbba45a808bc054144f9711833c76bf05c)已支持为O2M和M2M关系生成读写操作的gRPC方法。\n- [部分响应](https://entgo.io/docs/grpc-edges#retrieving-edge-ids-for-entities) - 默认情况下服务的`Get`方法不会返回边信息，这是因为实体关联的边数量可能无限。为允许调用方控制是否返回边信息，生成的服务遵循[Google AIP-157](https://google.aip.dev/157)(部分响应规范)。简而言之，`Get<T>Request`消息包含名为View的枚举，调用方可通过该枚举控制是否从数据库检索边信息。\n  \n  ```protobuf {6-12}\n  message GetUserRequest {\n    int32 id = 1;\n  \n    View view = 2;\n  \n    enum View {\n      VIEW_UNSPECIFIED = 0;\n  \n      BASIC = 1;\n  \n      WITH_EDGE_IDS = 2;\n    }\n  }\n  ```"
      }
    },
    {
      "segment_id": "d422fb13",
      "source_content": "### Getting Started",
      "source_content_hash": "4467215509db0bd0e0f61cf6ee2efa3316c8285b2a46d4449ff85f9ef85923d9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 快速开始"
      }
    },
    {
      "segment_id": "aa0bd54f",
      "source_content": "- To help everyone get started with the Ent + gRPC integration, we have published an official [Ent + gRPC Tutorial](https://entgo.io/docs/grpc-intro) (and a complimentary [GitHub repo](https://github.com/rotemtam/ent-grpc-example)).\n- Do you need help getting started with the integration or have some other question? [Join us on Slack](https://entgo.io/docs/slack) or our [Discord server](https://discord.gg/qZmPgTE6RX).",
      "source_content_hash": "e47645de0f9f130704ba9428d1fdcfc4bdf66e3a5979617dbe5c0d246f0670f0",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 我们发布了官方[Ent+gRPC教程](https://entgo.io/docs/grpc-intro)（及配套[GitHub仓库](https://github.com/rotemtam/ent-grpc-example)）帮助开发者入门\n- 需要集成帮助或有其他问题？[加入Slack频道](https://entgo.io/docs/slack)或[Discord服务器](https://discord.gg/qZmPgTE6RX)"
      }
    },
    {
      "segment_id": "0286b5a7",
      "source_content": ":::note[For more Ent news and updates:]\n\n- Subscribe to our [Newsletter](https://entgo.substack.com/)\n- Follow us on [Twitter](https://twitter.com/entgo_io)\n- Join us on #ent on the [Gophers Slack](https://entgo.io/docs/slack)\n- Join us on the [Ent Discord Server](https://discord.gg/qZmPgTE6RX)\n\n:::",
      "source_content_hash": "d4f11098ea703d24e53854ec8e2219390959641026efa07de5a588379be52b78",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note[获取更多Ent资讯：]\n\n- 订阅[新闻通讯](https://entgo.substack.com/)\n- 关注[Twitter](https://twitter.com/entgo_io)\n- 加入[Gophers Slack](https://entgo.io/docs/slack)的#ent频道\n- 加入[Ent Discord服务器](https://discord.gg/qZmPgTE6RX)\n\n:::"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2021-06-28-gprc-ready-for-use.md",
  "last_updated_timestamp": "2025-06-05T15:16:18.688217+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "0c57dcc6a9dda68a97796d7a3e8c5ed89c2e0c76750a164cbe34a3e11d1e1fbb"
  }
}