{
  "source_file_path_relative_to_docusaurus_root": "blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md",
  "source_file_content_hash": "468435f3d8c19bf2be6b1ce921847326764da239f24a4c35acb5b441c12568c9",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\ntitle: Auto generate REST CRUD with Ent and ogen \nauthor: MasseElch \nauthorURL: \"https://github.com/masseelch\"\nauthorImageURL: \"https://avatars.githubusercontent.com/u/12862103?v=4\"\nimage: \"https://entgo.io/images/assets/ogent/1.png\"\n---",
      "source_content_hash": "3e7f6c66c717c274c7dbc55dd66a9c4d30bcdaf8cd6bd1ce924f3d00866e325b",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "53eaf0e1",
      "source_content": "In the end of 2021 we announced that [Ent](https://entgo.io) got a new official extension to generate a fully\ncompliant [OpenAPI Specification](https://swagger.io/resources/open-api/)\ndocument: [`entoas`](https://github.com/ent/contrib/tree/master/entoas).",
      "source_content_hash": "aa4c017ec2d77d5349cee917cbd3fb2978f60c9ffa2669d677b1fd489b21c293",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "2021年底我们曾宣布[Ent](https://entgo.io)获得了一个新的官方扩展，用于生成完全符合[OpenAPI规范](https://swagger.io/resources/open-api/)的文档：[`entoas`](https://github.com/ent/contrib/tree/master/entoas)。"
      }
    },
    {
      "segment_id": "180bddb1",
      "source_content": "Today, we are very happy to announce that there is a new extension built to work\nwith `entoas`: [`ogent`](https://github.com/ariga/ogent). It utilizes the power\nof [`ogen`](https://github.com/ogen-go/ogen) ([website](https://ogen.dev/docs/intro/)) to provide a type-safe,\nreflection-free implementation of the OpenAPI Specification document generated by `entoas`. ",
      "source_content_hash": "59c211b82c030b345dea24b73e364769d95ca0fe4f9faf29d494e3084c599c41",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "今天我们非常高兴地宣布，专为与`entoas`协同工作的新扩展[`ogent`](https://github.com/ariga/ogent)正式发布。该扩展利用[`ogen`](https://github.com/ogen-go/ogen)（[官网](https://ogen.dev/docs/intro/)）的强大能力，为`entoas`生成的OpenAPI规范文档提供类型安全且无反射的实现方案。"
      }
    },
    {
      "segment_id": "39b3772c",
      "source_content": "`ogen` is an opinionated Go code generator for OpenAPI Specification v3 documents. `ogen` generates both server and\nclient implementations for a given OpenAPI Specification document. The only thing left to do for the user is to\nimplement an interface to access the data layer of any application. `ogen` has many cool features, one of which is\nintegration with [OpenTelemetry](https://opentelemetry.io/). Make sure to check it out and leave some love. ",
      "source_content_hash": "154e95a325412a0d14e14a6aea095c61e10db247e7c062a6fb3466cd673e0984",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`ogen`是一个基于OpenAPI规范v3文档的强约束Go代码生成器，能够同时生成服务端和客户端实现。开发者只需实现数据层访问接口即可。`ogen`具备诸多优秀特性，包括与[OpenTelemetry](https://opentelemetry.io/)的集成，强烈建议您体验并支持该项目。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "The extension presented in this post serves as a bridge between Ent and the code generated\nby [`ogen`](https://github.com/ogen-go/ogen). It uses the configuration of `entoas` to generate the missing parts of\nthe `ogen` code.",
      "source_content_hash": "97379805e73caf63285873c919a9410c0109cb316577b8549c72de051b96afeb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本文介绍的扩展作为Ent与[`ogen`](https://github.com/ogen-go/ogen)生成代码之间的桥梁，通过`entoas`的配置来补全`ogen`代码的缺失部分。"
      }
    },
    {
      "segment_id": "a76548f8",
      "source_content": "The following diagram shows how Ent interacts with both the extensions `entoas` and `ogent` and how `ogen` is involved. ",
      "source_content_hash": "daad58f67ed1ab3b063aa1b14d9908c8f1a11b894d8c610d8aa41804bf384619",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "下图展示了Ent如何与`entoas`和`ogent`扩展协同工作，以及`ogen`在其中的作用关系。"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "If you are new to Ent and want to learn more about it, how to connect to different types of databases, run migrations or\nwork with entities, then head over to the [Setup Tutorial](https://entgo.io/docs/tutorial-setup/)",
      "source_content_hash": "6e45362d7198edb7d8ee9c89440fa28ecff28acf093c7df066bc1d8b560513bc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若您是Ent的新用户，想了解更多关于数据库连接、迁移操作或实体处理的内容，请参阅[入门教程](https://entgo.io/docs/tutorial-setup/)。"
      }
    },
    {
      "segment_id": "97ae4a01",
      "source_content": "The code in this post is available in the modules [examples](https://github.com/ariga/ogent/tree/main/example/todo).",
      "source_content_hash": "03f8b43bfb141b6f6862e241d5420b7cb7e091648fb77efd8e72bea41820e3c1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本文涉及的完整代码可在[示例模块](https://github.com/ariga/ogent/tree/main/example/todo)中获取。"
      }
    },
    {
      "segment_id": "62a6890b",
      "source_content": "### Getting Started",
      "source_content_hash": "4467215509db0bd0e0f61cf6ee2efa3316c8285b2a46d4449ff85f9ef85923d9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 快速开始"
      }
    },
    {
      "segment_id": "688f7369",
      "source_content": ":::note[]\nWhile Ent does support Go versions 1.16+ `ogen` requires you to have at least version 1.17. \n:::",
      "source_content_hash": "ff77dc271af69763d1d5cf1cddcdb14893e54ea7e4f52511a2b2977fe242bc25",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note[]\n注意：Ent虽然支持Go 1.16+版本，但`ogen`要求至少使用Go 1.17版本。\n:::"
      }
    },
    {
      "segment_id": "aa1e7006",
      "source_content": "To use the `ogent` extension use the `entc` (ent codegen) package as\ndescribed [here](https://entgo.io/docs/code-gen#use-entc-as-a-package). First install both `entoas` and `ogent`\nextensions to your Go module:",
      "source_content_hash": "4e884b879f145a196aee4ca8fe99891be2e783b504c96c8b542fe87982ea3bfa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "要使用`ogent`扩展，请按照[文档说明](https://entgo.io/docs/code-gen#use-entc-as-a-package)通过`entc`包进行代码生成。首先在Go模块中安装`entoas`和`ogent`扩展："
      }
    },
    {
      "segment_id": "229d6705",
      "source_content": "```shell\ngo get ariga.io/ogent@main\n```",
      "source_content_hash": "0d543c6440d417c0e490144c0cc8e45710f9f15c737d81e49217db2132045c1c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_229d6705"
      }
    },
    {
      "segment_id": "98d26038",
      "source_content": "Now follow the next two steps to enable them and to configure Ent to work with the extensions:",
      "source_content_hash": "e4e5f11516ab90f53a18beffc340adecab913bf1a0ba6fee133b44048a9d2fb6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "接下来通过两个步骤启用扩展并配置Ent："
      }
    },
    {
      "segment_id": "d3649a1e",
      "source_content": "1\\. Create a new Go file named `ent/entc.go` and paste the following content:",
      "source_content_hash": "46b9ecd02339c83feb000869a47f3629dfdf14f4e2aba80245edac427bffbc2a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "1\\. 新建`ent/entc.go`文件并写入以下内容："
      }
    },
    {
      "segment_id": "c3955998",
      "source_content": "```go title=\"ent/entc.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"ariga.io/ogent\"\n\t\"entgo.io/contrib/entoas\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/ogen-go/ogen\"\n)\n\nfunc main() {\n\tspec := new(ogen.Spec)\n\toas, err := entoas.NewExtension(entoas.Spec(spec))\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entoas extension: %v\", err)\n\t}\n\togent, err := ogent.NewExtension(spec)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating ogent extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ogent, oas))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```",
      "source_content_hash": "1b55b86149d9fb9fb102cadabd51c576ba6ed75cc70c6b522021e6bbe5708f78",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c3955998"
      }
    },
    {
      "segment_id": "74dd7937",
      "source_content": "2\\. Edit the `ent/generate.go` file to execute the `ent/entc.go` file:",
      "source_content_hash": "a43a5f1353e561d1f7ec6cef372b2d96df99509481252a924d1bb20f80940f43",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "2\\. 修改`ent/generate.go`文件以执行`ent/entc.go`："
      }
    },
    {
      "segment_id": "5dd0e3a7",
      "source_content": "```go title=\"ent/generate.go\"\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```",
      "source_content_hash": "f87460630544c392e2b374efc01e30dffdcf71999be137dd8339a110a437849a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_5dd0e3a7"
      }
    },
    {
      "segment_id": "82e90254",
      "source_content": "With these steps complete, all is set up for generating an OAS document and implementing server code from your schema!",
      "source_content_hash": "6b75a34555d25274fdbf72b93a6d0be90ed8a5d33cc377872472a3da6938a152",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完成上述配置后，即可根据Schema生成OAS文档并实现服务端代码！"
      }
    },
    {
      "segment_id": "e06c002e",
      "source_content": "### Generate a CRUD HTTP API Server",
      "source_content_hash": "e96eb05e35238faca2da97d640232fba4b5a74aa56c589c5aa035a066a637ec9",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 生成CRUD HTTP API服务"
      }
    },
    {
      "segment_id": "25212439",
      "source_content": "The first step on our way to the HTTP API server is to create an Ent schema graph. For the sake of brevity, here is an\nexample schema to use:",
      "source_content_hash": "17e2c4a5b9b6f15b53830a2ecc3a755a9d481bc1726053015eb5ed5f3859db98",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "构建HTTP API服务的第一步是创建Ent Schema图。以下是一个简明的示例Schema："
      }
    },
    {
      "segment_id": "1cf51900",
      "source_content": "```go title=\"ent/schema/todo.go\"\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Todo holds the schema definition for the Todo entity.\ntype Todo struct {\n\tent.Schema\n}\n\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t\tfield.Bool(\"done\"),\n\t}\n}\n```",
      "source_content_hash": "ede1824733fe6ff062bba08b738412405d0f2ab5f3fd1299ffaf2d919f4d81a5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_1cf51900"
      }
    },
    {
      "segment_id": "5f82a1e9",
      "source_content": "The code above is the \"Ent way\" to describe a schema-graph. In this particular case we created a todo entity.",
      "source_content_hash": "7d4b952f0cb20d73ad56f6b4cfee1e30522913c7c174b3fd1054a2ed5b8a2f13",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "上述代码展示了Ent定义Schema图的典型方式，本例中我们创建了一个待办事项实体。"
      }
    },
    {
      "segment_id": "6fc234cf",
      "source_content": "Now run the code generator:",
      "source_content_hash": "7fe7ca07f0cdab3b453f45b1542a84c0ebabcf16b0c514a71a9cecfa8b143bfe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "现在运行代码生成器："
      }
    },
    {
      "segment_id": "a3a1b8eb",
      "source_content": "```shell\ngo generate ./...\n```",
      "source_content_hash": "780ca61cb12a088b45cb673df23fcb5e0e7165e08ab2fe378946fdf45830541e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_a3a1b8eb"
      }
    },
    {
      "segment_id": "692c6053",
      "source_content": "You should see a bunch of files generated by the Ent code generator. The file named `ent/openapi.json` has been\ngenerated by the `entoas` extension. Here is a sneak peek into it:",
      "source_content_hash": "1fe1ad576585971a9e500ef45585993cd5c9024d762645c813e40120c3ba16a0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "您将看到Ent生成的大量文件。其中`ent/openapi.json`由`entoas`扩展生成，以下是其内容片段："
      }
    },
    {
      "segment_id": "f2f9d525",
      "source_content": "```json title=\"ent/openapi.json\"\n{\n  \"info\": {\n    \"title\": \"Ent Schema API\",\n    \"description\": \"This is an auto generated API description made out of an Ent schema definition\",\n    \"termsOfService\": \"\",\n    \"contact\": {},\n    \"license\": {\n      \"name\": \"\"\n    },\n    \"version\": \"0.0.0\"\n  },\n  \"paths\": {\n    \"/todos\": {\n      \"get\": {\n    [...]\n```",
      "source_content_hash": "87dce45d20d3d8f4b1860b868181263232917920217acde58eb5967ce5718dd1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_f2f9d525"
      }
    },
    {
      "segment_id": "a8f09c71",
      "source_content": "However, this post focuses on the server implementation part therefore we are interested in the directory\nnamed `ent/ogent`. All the files ending in `_gen.go` are generated by `ogen`. The file named `oas_server_gen.go`\ncontains the interface `ogen`-users need to implement in order to run the server. ",
      "source_content_hash": "c867e0af43b5109bb0bca1b697ac0234004e261f11e9bb332743e349bcdccd19",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "不过本文重点在于服务端实现部分，因此我们主要关注名为`ent/ogent`的目录。所有以`_gen.go`结尾的文件均由`ogen`生成，其中`oas_server_gen.go`文件包含了运行服务器时需要实现的接口定义。"
      }
    },
    {
      "segment_id": "75daf40d",
      "source_content": "```go title=\"ent/ogent/oas_server_gen.go\"\n// Handler handles operations described by OpenAPI v3 specification.\ntype Handler interface {\n\t// CreateTodo implements createTodo operation.\n\t//\n\t// Creates a new Todo and persists it to storage.\n\t//\n\t// POST /todos\n\tCreateTodo(ctx context.Context, req CreateTodoReq) (CreateTodoRes, error)\n\t// DeleteTodo implements deleteTodo operation.\n\t//\n\t// Deletes the Todo with the requested ID.\n\t//\n\t// DELETE /todos/{id}\n\tDeleteTodo(ctx context.Context, params DeleteTodoParams) (DeleteTodoRes, error)\n\t// ListTodo implements listTodo operation.\n\t//\n\t// List Todos.\n\t//\n\t// GET /todos\n\tListTodo(ctx context.Context, params ListTodoParams) (ListTodoRes, error)\n\t// ReadTodo implements readTodo operation.\n\t//\n\t// Finds the Todo with the requested ID and returns it.\n\t//\n\t// GET /todos/{id}\n\tReadTodo(ctx context.Context, params ReadTodoParams) (ReadTodoRes, error)\n\t// UpdateTodo implements updateTodo operation.\n\t//\n\t// Updates a Todo and persists changes to storage.\n\t//\n\t// PATCH /todos/{id}\n\tUpdateTodo(ctx context.Context, req UpdateTodoReq, params UpdateTodoParams) (UpdateTodoRes, error)\n}\n```",
      "source_content_hash": "f87b8538fbfff23d87bdc7cc3669d098ff5fac7d5013282153bda638410eaf95",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_75daf40d"
      }
    },
    {
      "segment_id": "015c0c6e",
      "source_content": "`ogent` adds an implementation for\nthat handler in the file `ogent.go`. To see how you can define what routes to generate and what edges to eager load\nplease head over to the `entoas` [documentation](https://github.com/ent/contrib/entoas).",
      "source_content_hash": "d0927caf22b5da81892d0a01aa1d737377190490bcd40b8394b2fa44e7c093d3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`ogent`扩展会在`ogent.go`文件中为该处理器提供默认实现。关于如何定义生成路由规则及预加载边关系的配置方法，请参阅`entoas`的[官方文档](https://github.com/ent/contrib/entoas)。"
      }
    },
    {
      "segment_id": "48249e3c",
      "source_content": "The following shows an example for a generated READ route:",
      "source_content_hash": "3139bca5790c0c2bb93fa4248d8b88c2f828720654687cbaced8f2176007d722",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下是自动生成的READ路由示例："
      }
    },
    {
      "segment_id": "cf50de8a",
      "source_content": "```go\n// ReadTodo handles GET /todos/{id} requests.\nfunc (h *OgentHandler) ReadTodo(ctx context.Context, params ReadTodoParams) (ReadTodoRes, error) {\n\tq := h.client.Todo.Query().Where(todo.IDEQ(params.ID))\n\te, err := q.Only(ctx)\n\tif err != nil {\n\t\tswitch {\n\t\tcase ent.IsNotFound(err):\n\t\t\treturn &R404{\n\t\t\t\tCode:   http.StatusNotFound,\n\t\t\t\tStatus: http.StatusText(http.StatusNotFound),\n\t\t\t\tErrors: rawError(err),\n\t\t\t}, nil\n\t\tcase ent.IsNotSingular(err):\n\t\t\treturn &R409{\n\t\t\t\tCode:   http.StatusConflict,\n\t\t\t\tStatus: http.StatusText(http.StatusConflict),\n\t\t\t\tErrors: rawError(err),\n\t\t\t}, nil\n\t\tdefault:\n\t\t\t// Let the server handle the error.\n\t\t\treturn nil, err\n\t\t}\n\t}\n\treturn NewTodoRead(e), nil\n}\n```",
      "source_content_hash": "b096e7b4f02cda1f5624162f7fc948532da54d7477d85caf644a565dc4583db4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_cf50de8a"
      }
    },
    {
      "segment_id": "fbdb880f",
      "source_content": "### Run the server",
      "source_content_hash": "d9945119a59110f037dc173cc88f4a7ebdbab5313cb5db376b897b99eab94405",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 运行服务器"
      }
    },
    {
      "segment_id": "d3912b2e",
      "source_content": "The next step is to create a `main.go` file and wire up all the ends to create an application-server to serve the\nTodo-API. The following main function initializes a SQLite in-memory database, runs the migrations to create all the\ntables needed and serves the API as described in the `ent/openapi.json` file on `localhost:8080`: ",
      "source_content_hash": "5222ecaca42ed93e8230fa1fc2f3c8da21b7b26ce1061841e55ca597739b275c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "接下来创建`main.go`文件并完成应用服务器的组装，用于提供Todo-API服务。下面的main函数会初始化SQLite内存数据库，执行迁移创建所需数据表，并按照`ent/openapi.json`定义的API规范在`localhost:8080`启动服务："
      }
    },
    {
      "segment_id": "2f24891a",
      "source_content": "```go title=\"main.go\"\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t\"<your-project>/ent\"\n\t\"<your-project>/ent/ogent\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\nfunc main() {\n\t// Create ent client.\n\tclient, err := ent.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Run the migrations.\n\tif err := client.Schema.Create(context.Background(), schema.WithAtlas(true)); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Start listening.\n\tsrv, err := ogent.NewServer(ogent.NewOgentHandler(client))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tif err := http.ListenAndServe(\":8080\", srv); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```",
      "source_content_hash": "3e208d5a8b7aaaabdf3f39c53284f2cd549ade0b1ef60cd813e2a0b86eb00f81",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_2f24891a"
      }
    },
    {
      "segment_id": "590d1cd9",
      "source_content": "After you run the server with `go run -mod=mod main.go` you can work with the API. ",
      "source_content_hash": "37ae3b2ed7fc9843ac5487f934d1c489802858590c7c4bda40fa3cae02c92f73",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "通过`go run -mod=mod main.go`启动服务器后即可开始调用API。"
      }
    },
    {
      "segment_id": "b632973a",
      "source_content": "First, let's create a new Todo. For\ndemonstration purpose we do not send a request body:",
      "source_content_hash": "0c46f1bf0b96a79422148ad6b84d9cff25501970a3bd04a669541c36c0861b1e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "首先尝试创建新Todo（演示时不发送请求体）："
      }
    },
    {
      "segment_id": "79d8cec2",
      "source_content": "```shell\n↪ curl -X POST -H \"Content-Type: application/json\" localhost:8080/todos\n{\n  \"error_message\": \"body required\"\n}\n```",
      "source_content_hash": "15761c185da341ea135ec247bda8fc9d731f698eed903db59f6ec6e3a807bbf3",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_79d8cec2"
      }
    },
    {
      "segment_id": "66e62938",
      "source_content": "As you can see `ogen` handles that case for you since `entoas` marked the body as required when attempting to create a\nnew resource. Let's try again, but this time provide a request body:",
      "source_content_hash": "d47b977f4ceb4d0b994b283f18fd7c0ef61eee071344f20b1a0a342483a2e064",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可见`ogen`已自动处理该异常——因为`entoas`在生成时将创建资源的请求体标记为必填项。现在带上请求体重试："
      }
    },
    {
      "segment_id": "ca8f8565",
      "source_content": "```shell\n↪ curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Give ogen and ogent a Star on GitHub\"}'  localhost:8080/todos\n{\n  \"error_message\": \"decode CreateTodo:application/json request: invalid: done (field required)\"\n}\n```",
      "source_content_hash": "4c14301140c5f19ac65e4d2cb2ff903c15be4cca4a0e1817785462d941822352",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ca8f8565"
      }
    },
    {
      "segment_id": "2ab62b74",
      "source_content": "Ooops! What went wrong? `ogen` has your back: the field `done` is required. To fix this head over to your schema\ndefinition and mark the done field as optional:",
      "source_content_hash": "896c0175c89efb3914599c7e7e381ac31ed5d50f0f490d5231e0676123a0042c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "出错了？`ogen`会明确提示问题所在：`done`字段是必填项。修改schema定义将该字段改为可选即可修复："
      }
    },
    {
      "segment_id": "a85d7a64",
      "source_content": "```go {18} title=\"ent/schema/todo.go\"\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/field\"\n)\n\n// Todo holds the schema definition for the Todo entity.\ntype Todo struct {\n\tent.Schema\n}\n\n// Fields of the Todo.\nfunc (Todo) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"title\"),\n\t\tfield.Bool(\"done\").\n\t\t    Optional(),\n\t}\n}\n```",
      "source_content_hash": "68748c06b4caa045a133ae742142496ddc5d3126738cf61852dd2daa7838c841",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_a85d7a64"
      }
    },
    {
      "segment_id": "ebe673d6",
      "source_content": "Since we made a change to our configuration, we have to re-run code generation and restart the server:",
      "source_content_hash": "dc335c724890a7a8e30fa589d248e190468b346efcb33e20298b1457e0b2a884",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "配置变更后需要重新执行代码生成并重启服务："
      }
    },
    {
      "segment_id": "c578d2d4",
      "source_content": "```shell\ngo generate ./...\ngo run -mod=mod main.go\n```",
      "source_content_hash": "492b4cb9252c270ac3e839475d85cf3d3d3210269f5e9871cdf4f71b0cd5d7c8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c578d2d4"
      }
    },
    {
      "segment_id": "0302cdc1",
      "source_content": "Now, if we attempt to create the Todo again, see what happens:",
      "source_content_hash": "abaf14383b912a66bd04ec274c7b21d99c7341923eb611470078beb2acb9e5be",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "现在再次尝试创建Todo："
      }
    },
    {
      "segment_id": "219a3173",
      "source_content": "```shell\n↪ curl -X POST -H \"Content-Type: application/json\" -d '{\"title\":\"Give ogen and ogent a Star on GitHub\"}'  localhost:8080/todos\n{\n  \"id\": 1,\n  \"title\": \"Give ogen and ogent a Star on GitHub\",\n  \"done\": false\n}\n```",
      "source_content_hash": "f61b44a93734cd4bf5d535462054d1b8e325c17bf8faa10ab856caf902e3e80a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_219a3173"
      }
    },
    {
      "segment_id": "647ea627",
      "source_content": "Voila, there is a new Todo item in the database!",
      "source_content_hash": "0aad01e916a947a753798c86cb8a82ad81303ac1f463d19167b324633e1b479b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "成功！数据库里新增了一条Todo记录。"
      }
    },
    {
      "segment_id": "6c135b48",
      "source_content": "Assume you have completed your Todo and starred both [`ogen`](https://github.com/ogen-go/ogen)\nand [`ogent`](https://github.com/ariga/ogent) (**you really should!**), mark the todo as done by raising a PATCH\nrequest:",
      "source_content_hash": "7e49399761ff33c0b93070340afe5ac38d8c6b1fc857ccda18a7eb8f1f810115",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "假设您已完成Todo事项并为[`ogen`](https://github.com/ogen-go/ogen)和[`ogent`](https://github.com/ariga/ogent)点了赞（强烈推荐！），可通过PATCH请求标记完成状态："
      }
    },
    {
      "segment_id": "14ea483b",
      "source_content": "```shell\n↪ curl -X PATCH -H \"Content-Type: application/json\" -d '{\"done\":true}'  localhost:8080/todos/1\n{\n  \"id\": 1,\n  \"title\": \"Give ogen and ogent a Star on GitHub\",\n  \"done\": true\n}\n```",
      "source_content_hash": "a81dc22a25b25cec91f23ebcd9bf0cfdf5da686eea609e55f982283902a27238",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_14ea483b"
      }
    },
    {
      "segment_id": "74f95bc3",
      "source_content": "### Add custom endpoints",
      "source_content_hash": "01ae037e720dc304c9fbcf52ec579f8ac87da4f680bdbbc1004c41d2bca6ef5f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 添加自定义端点"
      }
    },
    {
      "segment_id": "0274aeec",
      "source_content": "As you can see the Todo is now marked as done. Though it would be cooler to have an extra route for marking a Todo as\ndone: `PATCH todos/:id/done`. To make this happen we have to do two things: document the new route in our OAS document\nand implement the route. We can tackle the first by using the `entoas` mutation builder. Edit your `ent/entc.go` file\nand add the route description:",
      "source_content_hash": "a5b38f04fa555e9101b587f8aeb093f461b8f0caf3597c6b9a041fd607bc9434",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "虽然当前已能标记完成状态，但若能添加专属路由`PATCH todos/:id/done`会更直观。这需要完成两个步骤：在OAS文档中声明新路由，并实现路由逻辑。首先通过`entoas`的mutation构建器编辑`ent/entc.go`文件添加路由描述："
      }
    },
    {
      "segment_id": "dfe86be9",
      "source_content": "```go {17-37} title=\"ent/entc.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/contrib/entoas\"\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"github.com/ariga/ogent\"\n\t\"github.com/ogen-go/ogen\"\n)\n\nfunc main() {\n\tspec := new(ogen.Spec)\n\toas, err := entoas.NewExtension(\n\t\tentoas.Spec(spec),\n\t\tentoas.Mutations(func(_ *gen.Graph, spec *ogen.Spec) error {\n\t\t\tspec.AddPathItem(\"/todos/{id}/done\", ogen.NewPathItem().\n\t\t\t\tSetDescription(\"Mark an item as done\").\n\t\t\t\tSetPatch(ogen.NewOperation().\n\t\t\t\t\tSetOperationID(\"markDone\").\n\t\t\t\t\tSetSummary(\"Marks a todo item as done.\").\n\t\t\t\t\tAddTags(\"Todo\").\n\t\t\t\t\tAddResponse(\"204\", ogen.NewResponse().SetDescription(\"Item marked as done\")),\n\t\t\t\t).\n\t\t\t\tAddParameters(ogen.NewParameter().\n\t\t\t\t\tInPath().\n\t\t\t\t\tSetName(\"id\").\n\t\t\t\t\tSetRequired(true).\n\t\t\t\t\tSetSchema(ogen.Int()),\n\t\t\t\t),\n\t\t\t)\n\t\t\treturn nil\n\t\t}),\n\t)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entoas extension: %v\", err)\n\t}\n\togent, err := ogent.NewExtension(spec)\n\tif err != nil {\n\t\tlog.Fatalf(\"creating ogent extension: %v\", err)\n\t}\n\terr = entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ogent, oas))\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```",
      "source_content_hash": "b0951774564c6d907c6d360733fb3623c7bd679ae456971ca1e5098309cb4d09",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_dfe86be9"
      }
    },
    {
      "segment_id": "51721da5",
      "source_content": "After running the code generator (`go generate ./...`) there should be a new entry in the `ent/openapi.json` file:",
      "source_content_hash": "9958d1834c82b29beb1e936bda4619f082780cdea89292de4c806fac5c585b68",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "执行代码生成命令(`go generate ./...`)后，`ent/openapi.json`文件中会出现新路由条目："
      }
    },
    {
      "segment_id": "2c7ee013",
      "source_content": "```json\n\"/todos/{id}/done\": {\n  \"description\": \"Mark an item as done\",\n  \"patch\": {\n    \"tags\": [\n      \"Todo\"    \n    ],\n    \"summary\": \"Marks a todo item as done.\",\n    \"operationId\": \"markDone\",\n    \"responses\": {\n      \"204\": {\n        \"description\": \"Item marked as done\"\n      }\n    }\n  },\n  \"parameters\": [\n    {\n      \"name\": \"id\",\n      \"in\": \"path\",\n      \"schema\": {\n        \"type\": \"integer\"\n      },\n      \"required\": true\n    }\n  ]\n}\n```",
      "source_content_hash": "9c5857ca7a5f97ff27d5db766067e905c0f04ef78e30b55e4ba1855d7eeb376b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_2c7ee013"
      }
    },
    {
      "segment_id": "fea3f437",
      "source_content": "The above mentioned `ent/ogent/oas_server_gen.go` file generated by `ogen` will reflect the changes as well: ",
      "source_content_hash": "35923052e506efa3703ab9c9fc0682d0fd0655af89932158c72c1fd1cc08f620",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "由`ogen`生成的`ent/ogent/oas_server_gen.go`文件也会同步更新："
      }
    },
    {
      "segment_id": "c9b3691d",
      "source_content": "```go {21-24} title=\"ent/ogent/oas_server_gen.go\"\n// Handler handles operations described by OpenAPI v3 specification.\ntype Handler interface {\n\t// CreateTodo implements createTodo operation.\n\t//\n\t// Creates a new Todo and persists it to storage.\n\t//\n\t// POST /todos\n\tCreateTodo(ctx context.Context, req CreateTodoReq) (CreateTodoRes, error)\n\t// DeleteTodo implements deleteTodo operation.\n\t//\n\t// Deletes the Todo with the requested ID.\n\t//\n\t// DELETE /todos/{id}\n\tDeleteTodo(ctx context.Context, params DeleteTodoParams) (DeleteTodoRes, error)\n\t// ListTodo implements listTodo operation.\n\t//\n\t// List Todos.\n\t//\n\t// GET /todos\n\tListTodo(ctx context.Context, params ListTodoParams) (ListTodoRes, error)\n\t// MarkDone implements markDone operation.\n\t//\n\t// PATCH /todos/{id}/done\n\tMarkDone(ctx context.Context, params MarkDoneParams) (MarkDoneNoContent, error)\n\t// ReadTodo implements readTodo operation.\n\t//\n\t// Finds the Todo with the requested ID and returns it.\n\t//\n\t// GET /todos/{id}\n\tReadTodo(ctx context.Context, params ReadTodoParams) (ReadTodoRes, error)\n\t// UpdateTodo implements updateTodo operation.\n\t//\n\t// Updates a Todo and persists changes to storage.\n\t//\n\t// PATCH /todos/{id}\n\tUpdateTodo(ctx context.Context, req UpdateTodoReq, params UpdateTodoParams) (UpdateTodoRes, error)\n}\n```",
      "source_content_hash": "48d53ecaa06c24fbba26878e30ca80d5ac8dd7cc2cd5474a83072e996abcb643",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c9b3691d"
      }
    },
    {
      "segment_id": "e548f48f",
      "source_content": "If you'd try to run the server now, the Go compiler will complain about it, because the `ogent` code generator does not\nknow how to implement the new route. You have to do this by hand. Replace the current `main.go` with the following file\nto implement the new method.",
      "source_content_hash": "1f4cf22e98a0f71c13c14e886f7ea2118d0485e9495ef2d1baccb00a99746a86",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若此时运行服务，Go编译器会报错——因为`ogent`代码生成器尚未实现新路由逻辑。需要手动修改`main.go`文件来实现新增方法："
      }
    },
    {
      "segment_id": "09e58fc0",
      "source_content": "```go {15-22,34-38,40} title=\"main.go\"\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"net/http\"\n\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t\"github.com/ariga/ogent/example/todo/ent\"\n\t\"github.com/ariga/ogent/example/todo/ent/ogent\"\n\t_ \"github.com/mattn/go-sqlite3\"\n)\n\ntype handler struct {\n\t*ogent.OgentHandler\n\tclient *ent.Client\n}\n\nfunc (h handler) MarkDone(ctx context.Context, params ogent.MarkDoneParams) (ogent.MarkDoneNoContent, error) {\n\treturn ogent.MarkDoneNoContent{}, h.client.Todo.UpdateOneID(params.ID).SetDone(true).Exec(ctx)\n}\n\nfunc main() {\n\t// Create ent client.\n\tclient, err := ent.Open(dialect.SQLite, \"file:ent?mode=memory&cache=shared&_fk=1\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Run the migrations.\n\tif err := client.Schema.Create(context.Background(), schema.WithAtlas(true)); err != nil {\n\t\tlog.Fatal(err)\n\t}\n\t// Create the handler.\n\th := handler{\n\t\tOgentHandler: ogent.NewOgentHandler(client),\n\t\tclient:       client,\n\t}\n\t// Start listening.\n\tsrv := ogent.NewServer(h)\n\tif err := http.ListenAndServe(\":8180\", srv); err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n\n```",
      "source_content_hash": "ba114e3c46cb9563e79af4f73851906950f471e5cbe30c401db949849a375225",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_09e58fc0"
      }
    },
    {
      "segment_id": "6ba1041f",
      "source_content": "If you restart your server you can then raise the following request to mark a todo item as done:",
      "source_content_hash": "a16983469da19a94126f466fab2e5fce651b762d59c7823906d9411455322f94",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "重启服务后即可通过以下请求标记Todo事项为完成状态："
      }
    },
    {
      "segment_id": "642efa41",
      "source_content": "```shell\n↪ curl -X PATCH localhost:8180/todos/1/done\n```",
      "source_content_hash": "ca1edb60854e769901fa55ffa5adeaa36706dd033b2b8a864a3c6a81fb781dc8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_642efa41"
      }
    },
    {
      "segment_id": "600c566a",
      "source_content": "### Yet to come",
      "source_content_hash": "6f9d9510420f15a3cd3e887ae36ef7943f87ba7ae9cfabed7bf35c3d8b2475b4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 未来计划"
      }
    },
    {
      "segment_id": "17b95bd5",
      "source_content": "There are some improvements planned for `ogent`, most notably a code generated, type-safe way to add filtering\ncapabilities to the LIST routes. We want to hear your feedback first.",
      "source_content_hash": "cc45c4f0f9203e751cbc018c6870efd5323a4e768316b427eb4f48200dc84169",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`ogent` 还有一些改进计划，最值得注意的是为 LIST 路由添加代码生成、类型安全的过滤功能。我们希望能先听取您的反馈。"
      }
    },
    {
      "segment_id": "85c87282",
      "source_content": "### Wrapping Up",
      "source_content_hash": "6df1295c536bdf3cf58241755891051d109001c784cced5b33a00f70983bc553",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 总结"
      }
    },
    {
      "segment_id": "0e5d7420",
      "source_content": "In this post we announced `ogent`, the official implementation generator for `entoas` generated OpenAPI Specification\ndocuments. This extension uses the power of [`ogen`](https://github.com/ogen-go/ogen), a very powerful and feature-rich\nGo code generator for OpenAPI v3 documents, to provide a ready-to-use, extensible server RESTful HTTP API servers.",
      "source_content_hash": "ff2f98cab1cfe4e6fdfb3fb92afd15f7de7f647b20ef6db9cbc7eabefcf6029e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本文我们发布了 `ogent`，这是为 `entoas` 生成的 OpenAPI 规范文档提供的官方实现生成器。该扩展利用 [`ogen`](https://github.com/ogen-go/ogen) 的强大功能（一个功能丰富、支持 OpenAPI v3 文档的 Go 代码生成器），提供了一个开箱即用、可扩展的 RESTful HTTP API 服务器实现。"
      }
    },
    {
      "segment_id": "90365458",
      "source_content": "Please note, that both `ogen` and `entoas`/`ogent` have not reached their first major release yet, and it is work in\nprogress. Nevertheless, the API can be considered stable.",
      "source_content_hash": "9e27b9705612b42c3da16758868f5fcb0656bd2a5a1b9c2f9caa2a668b52c7bb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "请注意，`ogen` 和 `entoas`/`ogent` 尚未发布首个主要版本，仍在开发中。不过，其 API 可视为稳定的。"
      }
    },
    {
      "segment_id": "5552fbbd",
      "source_content": "Have questions? Need help with getting started? Feel free to join our [Discord server](https://discord.gg/qZmPgTE6RX) or [Slack channel](https://entgo.io/docs/slack/).",
      "source_content_hash": "d0537932cd96ebc172f07d40432ff073381adb709b3fdc6d263a79438858fef3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "有问题吗？需要入门帮助？欢迎加入我们的 [Discord 服务器](https://discord.gg/qZmPgTE6RX) 或 [Slack 频道](https://entgo.io/docs/slack/)。"
      }
    },
    {
      "segment_id": "afb21fd1",
      "source_content": ":::note[For more Ent news and updates:]\n\n- Subscribe to our [Newsletter](https://entgo.substack.com/)\n- Follow us on [Twitter](https://twitter.com/entgo_io)\n- Join us on #ent on the [Gophers Slack](https://entgo.io/docs/slack)\n- Join us on the [Ent Discord Server](https://discord.gg/qZmPgTE6RX)\n\n:::",
      "source_content_hash": "d4f11098ea703d24e53854ec8e2219390959641026efa07de5a588379be52b78",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note[获取更多 Ent 资讯和更新：]\n\n- 订阅我们的 [新闻通讯](https://entgo.substack.com/)\n- 在 [Twitter](https://twitter.com/entgo_io) 上关注我们\n- 加入 [Gophers Slack](https://entgo.io/docs/slack) 的 #ent 频道\n- 加入 [Ent Discord 服务器](https://discord.gg/qZmPgTE6RX)\n\n:::"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-blog/2022-02-15-generate-rest-crud-with-ent-and-ogen.md",
  "last_updated_timestamp": "2025-06-05T15:16:18.667854+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "468435f3d8c19bf2be6b1ce921847326764da239f24a4c35acb5b441c12568c9"
  }
}