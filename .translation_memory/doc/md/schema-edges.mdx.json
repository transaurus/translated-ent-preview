{
  "source_file_path_relative_to_docusaurus_root": "../md/schema-edges.mdx",
  "source_file_content_hash": "c1df5249a53099a567cb5e21f3d672ae7906d3cd29ada9efbb6d05712282e79b",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: schema-edges\ntitle: Edges\n---",
      "source_content_hash": "665f6930853694b88c00d2852ed37ad10ee4af072a3391f7b4081ca39f919bd7",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';",
      "source_content_hash": "86702643a5c3bdf74257ff6062535897129ed9144c4f5b70edfe338fef3e5c73",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "d912d376",
      "source_content": "## Quick Summary",
      "source_content_hash": "7c75b978a05a4792221561daeb8e74a3e3187e24367e602c206809c33d127dbc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 快速概览"
      }
    },
    {
      "segment_id": "8ac585fb",
      "source_content": "Edges are the relations (or associations) of entities. For example, user's pets, or group's users:",
      "source_content_hash": "7aab4a74fb48305dfee1dc9907106e345e259cad22a781effae6f3995c2a189e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "边（Edges）表示实体间的关系（或关联）。例如用户的宠物或群组的成员："
      }
    },
    {
      "segment_id": "5da3670c",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-group-users](https://entgo.io/images/assets/er_user_pets_groups.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![erd-group-users](https://entgo.io/images/assets/erd/edges-quick-summary.png)](https://gh.atlasgo.cloud/explore/saved/60129542144)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542144\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "c987ee5cec31edbfb3eba11a3041d5fcef18e3be12972eaa44efbd0a6154cbc2",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_5da3670c"
      }
    },
    {
      "segment_id": "26524352",
      "source_content": "In the example above, you can see 2 relations declared using edges. Let's go over them.",
      "source_content_hash": "35f673e3c0ba99b3fae5cc66e7483a95fcbc44332c06af1f29b2dd968303eb2a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "上例中展示了通过边声明的两种关系，下面我们进行解析："
      }
    },
    {
      "segment_id": "73ab96a3",
      "source_content": "1\\. `pets` / `owner` edges; user's pets and pet's owner:",
      "source_content_hash": "890996f0aa5deb231998793c0372d4d8771f7c14b8945dd29b0ef46df2fdd13a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "1\\. `pets` / `owner` 边：表示用户的宠物与宠物的主人："
      }
    },
    {
      "segment_id": "d0d484a6",
      "source_content": "<Tabs>\n<TabItem value=\"user\" label=\"User\" default>\n\n```go title=\"ent/schema/user.go\" {23}\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// User schema.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the user.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n</TabItem>\n<TabItem value=\"pet\" label=\"Pet\">\n\n```go title=\"ent/schema/pet.go\" {23-25}\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// Pet holds the schema definition for the Pet entity.\ntype Pet struct {\n\tent.Schema\n}\n\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n</TabItem>\n</Tabs>",
      "source_content_hash": "895b8127868bb8e3b0ac3318ceddf7d655e7fb94bba1da70eba0f4983bdcbf47",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_d0d484a6"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "As you can see, a `User` entity can **have many** pets, but a `Pet` entity can **have only one** owner.  \nIn relationship definition, the `pets` edge is a *O2M* (one-to-many) relationship, and the `owner` edge\nis a *M2O* (many-to-one) relationship.",
      "source_content_hash": "cb654413ffb2fe1e07bf967e9b69a4cec1fa79a359563508fe72c8a6737accf7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可以看出，一个`User`实体可以**拥有多只**宠物，但一个`Pet`实体只能**有一个**主人。  \n在关系定义中，`pets`边属于*O2M*（一对多）关系，而`owner`边属于*M2O*（多对一）关系。"
      }
    },
    {
      "segment_id": "d79a4831",
      "source_content": "The `User` schema **owns** the `pets/owner` relationship because it uses `edge.To`, and the `Pet` schema\njust has a back-reference to it, declared using `edge.From` with the `Ref` method.",
      "source_content_hash": "1fe6fb8aa688be78901133c6d2f1461bae6750f226f31f1ca2c6ef7b0701bfe1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`User`模式通过`edge.To`**主导**了`pets/owner`关系，而`Pet`模式仅通过`edge.From`配合`Ref`方法声明了对该关系的反向引用。"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "The `Ref` method describes which edge of the `User` schema we're referencing because there can be multiple\nreferences from one schema to other. ",
      "source_content_hash": "010e2a930a58a0ddad5dab34cff4d94d3471ba8a00ea1042d55152524538f6d1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`Ref`方法用于说明引用的是`User`模式中的哪个边，因为同一个模式可能存在多个对外引用关系。"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "The cardinality of the edge/relationship can be controlled using the `Unique` method, and it's explained\nmore widely below. ",
      "source_content_hash": "385cb6a7db2ddf0e1396ba4499809171dd5e526685b3230c17c2ae83e2709cd7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可以通过`Unique`方法控制边/关系的基数性，下文将对此进行更详细的说明。"
      }
    },
    {
      "segment_id": "0801d969",
      "source_content": "2\\. `users` / `groups` edges; group's users and user's groups:",
      "source_content_hash": "cae2fec2b3b56be21abcc4848c417668958dfd0390704c2cc45340eac6a417fa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "2\\. `users` / `groups` 边：表示群组的成员与用户所属群组："
      }
    },
    {
      "segment_id": "0de3740b",
      "source_content": "<Tabs>\n<TabItem value=\"group\" label=\"Group\" default>\n\n```go title=\"ent/schema/group.go\" {23}\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// Group schema.\ntype Group struct {\n\tent.Schema\n}\n\n// Fields of the group.\nfunc (Group) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t}\n}\n```\n</TabItem>\n<TabItem value=\"user\" label=\"User\">\n\n```go title=\"ent/schema/user.go\" {23-24}\npackage schema\n\nimport (\n\t\"entgo.io/ent\"\n\t\"entgo.io/ent/schema/edge\"\n)\n\n// User schema.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the user.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\t// ...\n\t}\n}\n\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t\t// \"pets\" declared in the example above.\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n</TabItem>\n</Tabs>",
      "source_content_hash": "5e958362a135cfaf6718a7c2edf29bec1a3eab48f2b0e982021c49210770c605",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_0de3740b"
      }
    },
    {
      "segment_id": "674abb31",
      "source_content": "As you can see, a Group entity can **have many** users, and a User entity can have **have many** groups.  \nIn relationship definition, the `users` edge is a *M2M* (many-to-many) relationship, and the `groups`\nedge is also a *M2M* (many-to-many) relationship.",
      "source_content_hash": "3dcf069bd2e18e093aec83ca672c789ca7136abe145fe03615980cfc9b3180c8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可以看出，一个`Group`实体可以**包含多个**用户，一个`User`实体可以**属于多个**群组。  \n在关系定义中，`users`边属于*M2M*（多对多）关系，`groups`边同样属于*M2M*（多对多）关系。"
      }
    },
    {
      "segment_id": "1297ec42",
      "source_content": "## To and From",
      "source_content_hash": "23ca2cc5f762afe430c8499d0b239b13ae74a7bf1e90589cba64c22c76996572",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## To与From构建器"
      }
    },
    {
      "segment_id": "c8a6ab3e",
      "source_content": "`edge.To` and `edge.From` are the 2 builders for creating edges/relations.",
      "source_content_hash": "2c05cadf0defebd25467040c70b466a0796a27392b1036953b316e1d49862093",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`edge.To`和`edge.From`是用于创建边/关系的两种构建器。"
      }
    },
    {
      "segment_id": "5cf1bce4",
      "source_content": "A schema that defines an edge using the `edge.To` builder owns the relation,\nunlike using the `edge.From` builder that gives only a back-reference for the relation (with a different name).",
      "source_content_hash": "0f2ee229ba1258f212c06867c347ff54f822cf2e09b04c230d0a402fa6e55792",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用`edge.To`构建器定义边的模式将主导该关系，而`edge.From`构建器仅用于创建关系的反向引用（可使用不同名称）。"
      }
    },
    {
      "segment_id": "9ebd9d9b",
      "source_content": "Let's go over a few examples that show how to define different relation types using edges.",
      "source_content_hash": "66d11fce05f5e74b08cb5832dc30062eec83a77a60c3a3c80684d4b226b8515a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "下面通过几个示例演示如何用边定义不同类型的关系。"
      }
    },
    {
      "segment_id": "6d457467",
      "source_content": "## Relationship",
      "source_content_hash": "8a11583b9c6c8821d15256e9202e84387944ae36f6e61b9d828bafbda5f56c37",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 关系类型"
      }
    },
    {
      "segment_id": "bc3926aa",
      "source_content": "- [O2O Two Types](#o2o-two-types)\n- [O2O Same Type](#o2o-same-type)\n- [O2O Bidirectional](#o2o-bidirectional)\n- [O2M Two Types](#o2m-two-types)\n- [O2M Same Type](#o2m-same-type)\n- [M2M Two Types](#m2m-two-types)\n- [M2M Same Type](#m2m-same-type)\n- [M2M Bidirectional](#m2m-bidirectional)",
      "source_content_hash": "bb70f15ef8288f28b14826ab814e5a601db1d78c6bb726b59c570b88269be933",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- [跨类型O2O](#o2o-two-types)\n- [同类型O2O](#o2o-same-type)\n- [双向O2O](#o2o-bidirectional)\n- [跨类型O2M](#o2m-two-types)\n- [同类型O2M](#o2m-same-type)\n- [跨类型M2M](#m2m-two-types)\n- [同类型M2M](#m2m-same-type)\n- [双向M2M](#m2m-bidirectional)"
      }
    },
    {
      "segment_id": "e29294bd",
      "source_content": "## O2O Two Types",
      "source_content_hash": "83bf4042c6a4222a3f5c1608ae296d9255590021e18c9e584f8e365ed1885b03",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 跨类型O2O"
      }
    },
    {
      "segment_id": "48e2392c",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-user-card](https://entgo.io/images/assets/er_user_card.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-o2o-two-types](https://entgo.io/images/assets/erd/edges-o2o-two-types.png)](https://gh.atlasgo.cloud/explore/saved/60129542145)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542145\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "eeedac2892b78db215c78578cdc570bc316007c00c2bb801b55b412293c0c7a4",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_48e2392c"
      }
    },
    {
      "segment_id": "e4945edb",
      "source_content": "In this example, a user **has only one** credit-card, and a card **has only one** owner.",
      "source_content_hash": "2163aebdd5655e04d170ff078a0778712c5b30f626f8a96e228e0fd83c280fc9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "本例中，一个用户**只能拥有一张**信用卡，一张卡**只能属于一个**所有者。"
      }
    },
    {
      "segment_id": "9ede513a",
      "source_content": "The `User` schema defines an `edge.To` card named `card`, and the `Card` schema\ndefines a back-reference to this edge using `edge.From` named `owner`. ",
      "source_content_hash": "9bec6163cbc0e301270f5a77bd1798ca54a65acd00a172b2dc5e81dd968823f1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`User`模式通过`edge.To`定义了名为`card`的边，`Card`模式则通过`edge.From`定义了名为`owner`的反向引用。"
      }
    },
    {
      "segment_id": "83189c13",
      "source_content": "<Tabs>\n<TabItem value=\"user\" label=\"User\" default>\n\n```go title=\"ent/schema/user.go\"\n// Edges of the user.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"card\", Card.Type).\n\t\t\tUnique(),\n\t}\n}\n```\n</TabItem>\n<TabItem value=\"card\" label=\"Card\">\n\n```go title=\"ent/schema/card.go\"\n// Edges of the Card.\nfunc (Card) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"card\").\n\t\t\tUnique().\n\t\t\t// We add the \"Required\" method to the builder\n\t\t\t// to make this edge required on entity creation.\n\t\t\t// i.e. Card cannot be created without its owner.\n\t\t\tRequired(),\n\t}\n}\n```\n</TabItem>\n</Tabs>",
      "source_content_hash": "f79934eb00edda0acc2df7c2da1e7c0a0cd6af63aacf45f170bfd949052fe817",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_83189c13"
      }
    },
    {
      "segment_id": "f6e7e6a7",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "操作这些边的API如下："
      }
    },
    {
      "segment_id": "5ce70a8c",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"Mashraki\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tlog.Println(\"user:\", a8m)\n\tcard1, err := client.Card.\n\t\tCreate().\n\t\tSetOwner(a8m).\n\t\tSetNumber(\"1020\").\n\t\tSetExpired(time.Now().Add(time.Minute)).\n\t\tSave(ctx)\n\tif err != nil {\n    \treturn fmt.Errorf(\"creating card: %w\", err)\n    }\n\tlog.Println(\"card:\", card1)\n\t// Only returns the card of the user,\n\t// and expects that there's only one.\n\tcard2, err := a8m.QueryCard().Only(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying card: %w\", err)\n    }\n\tlog.Println(\"card:\", card2)\n\t// The Card entity is able to query its owner using\n\t// its back-reference.\n\towner, err := card2.QueryOwner().Only(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying owner: %w\", err)\n    }\n\tlog.Println(\"owner:\", owner)\n\treturn nil\n}\n```",
      "source_content_hash": "65c64e3c83c2135601dff31db7ac4b59b1ffd7f2f66ef0887338e5a4281b3f8e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_5ce70a8c"
      }
    },
    {
      "segment_id": "c9e08343",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/o2o2types).",
      "source_content_hash": "d43d769110e218fe5681222f1252e45b83cdd52abe0a31d8c259644c427e0ae5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例参见[GitHub](https://github.com/ent/ent/tree/master/examples/o2o2types)。"
      }
    },
    {
      "segment_id": "0b7ed806",
      "source_content": "## O2O Same Type",
      "source_content_hash": "addeb4e0a6921ef0d585e61603100c29e7c92d27492fdeeffc683d4c68ff17a1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 同类型O2O"
      }
    },
    {
      "segment_id": "0a09c64d",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-linked-list](https://entgo.io/images/assets/er_linked_list.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-linked-list](https://entgo.io/images/assets/erd/edges-o2o-same-type.png)](https://gh.atlasgo.cloud/explore/saved/60129542146)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542146\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "ab1931b5273b0054d66ee4bb065d9928682e22701b8764c46d13775b9209ba1b",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_0a09c64d"
      }
    },
    {
      "segment_id": "9929329e",
      "source_content": "In this linked-list example, we have a **recursive relation** named `next`/`prev`. Each node in the list can\n**have only one** `next` node. If a node A points (using `next`) to node B, B can get its pointer using `prev` (the back-reference edge).   ",
      "source_content_hash": "b11b6324a6ecba582ba20d1fae9d251ccee07c936902982dc1e69709677f2ccb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个链表示例中，我们有一个名为`next`/`prev`的递归关系。列表中的每个节点只能有一个`next`节点。如果节点A通过`next`指向节点B，B可以通过`prev`（反向引用边）获取其指针。"
      }
    },
    {
      "segment_id": "e0b4ec91",
      "source_content": "```go title=\"ent/schema/node.go\"\n// Edges of the Node.\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"next\", Node.Type).\n\t\t\tUnique().\n\t\t\tFrom(\"prev\").\n\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "2f828f855eb612b81b33ad4d45d3af95d192aae20d694d514f1dbcbcd955d05b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e0b4ec91"
      }
    },
    {
      "segment_id": "4443801b",
      "source_content": "As you can see, in cases of relations of the same type, you can declare the edge and its\nreference in the same builder.",
      "source_content_hash": "7429f0afb59647697594aef2d322636d8d8cafa549317ef56bd7f01f936a85d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如你所见，在相同类型的关系中，可以在同一个构建器中声明边及其引用。"
      }
    },
    {
      "segment_id": "ac3ddfe5",
      "source_content": "```diff\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n+\t\tedge.To(\"next\", Node.Type).\n+\t\t\tUnique().\n+\t\t\tFrom(\"prev\").\n+\t\t\tUnique(),\n\n-\t\tedge.To(\"next\", Node.Type).\n-\t\t\tUnique(),\n-\t\tedge.From(\"prev\", Node.Type).\n-\t\t\tRef(\"next\").\n-\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "a386a020c82664cc17f7735e53951e198b9f3f6662b64c5d8e542f1894c747c1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ac3ddfe5"
      }
    },
    {
      "segment_id": "5b98f6e2",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "与这些边交互的API如下："
      }
    },
    {
      "segment_id": "fa7da7df",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\thead, err := client.Node.\n\t\tCreate().\n\t\tSetValue(1).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating the head: %w\", err)\n\t}\n\tcurr := head\n\t// Generate the following linked-list: 1<->2<->3<->4<->5.\n\tfor i := 0; i < 4; i++ {\n\t\tcurr, err = client.Node.\n\t\t\tCreate().\n\t\t\tSetValue(curr.Value + 1).\n\t\t\tSetPrev(curr).\n\t\t\tSave(ctx)\n\t\tif err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\n\t// Loop over the list and print it. `FirstX` panics if an error occur.\n\tfor curr = head; curr != nil; curr = curr.QueryNext().FirstX(ctx) {\n\t\tfmt.Printf(\"%d \", curr.Value)\n\t}\n\t// Output: 1 2 3 4 5\n\n\t// Make the linked-list circular:\n\t// The tail of the list, has no \"next\".\n\ttail, err := client.Node.\n\t\tQuery().\n\t\tWhere(node.Not(node.HasNext())).\n\t\tOnly(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"getting the tail of the list: %v\", tail)\n\t}\n\ttail, err = tail.Update().SetNext(head).Save(ctx)\n\tif err != nil {\n\t\treturn err\n\t}\n\t// Check that the change actually applied:\n\tprev, err := head.QueryPrev().Only(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"getting head's prev: %w\", err)\n\t}\n\tfmt.Printf(\"\\n%v\", prev.Value == tail.Value)\n\t// Output: true\n\treturn nil\n}\n```",
      "source_content_hash": "4615f5213694dff96ac6268b8238e1d5dade5ebc92843fbfd11b45e83965e66d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_fa7da7df"
      }
    },
    {
      "segment_id": "80b10d5a",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/o2orecur).",
      "source_content_hash": "f177a7f62a6c522e3bb785ceb862aad3b77704a1ec5d9e95150113bfe63851c9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例可在[GitHub](https://github.com/ent/ent/tree/master/examples/o2orecur)找到。"
      }
    },
    {
      "segment_id": "086e47bd",
      "source_content": "## O2O Bidirectional",
      "source_content_hash": "cc41b8d948db53ff42fdaf2d997dc5fd4c48e6cfd3d89e40c3af2a85b0762809",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## O2O 双向关系"
      }
    },
    {
      "segment_id": "3449ba6a",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-user-spouse](https://entgo.io/images/assets/er_user_spouse.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-o2o-bidirectional](https://entgo.io/images/assets/erd/edges-o2o-bidirectional.png)](https://gh.atlasgo.cloud/explore/saved/60129542147)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542147\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "1425ca0680341ebcbf79a3b696e6bd811c8d64c9a0fee62178947e5f9f6d929a",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_3449ba6a"
      }
    },
    {
      "segment_id": "72dd1482",
      "source_content": "In this user-spouse example, we have a **symmetric O2O relation** named `spouse`. Each user can **have only one** spouse.\nIf user A sets its spouse (using `spouse`) to B, B can get its spouse using the `spouse` edge.",
      "source_content_hash": "a6b28e54c1c4055508fd1cb5624bbabcc9c846164c0912eb62d98c50d80494f8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个用户-配偶示例中，我们有一个名为`spouse`的对称O2O关系。每个用户只能有一个配偶。如果用户A将其配偶（通过`spouse`边）设置为B，B可以通过`spouse`边获取其配偶。"
      }
    },
    {
      "segment_id": "60d3a00d",
      "source_content": "Note that there are no owner/inverse terms in cases of bidirectional edges.",
      "source_content_hash": "ac72813841e1a476554e8df96f1b632a8f0b6658c45b9b5a92318a3566f4e855",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意，在双向边的情况下没有所有者/反向引用的概念。"
      }
    },
    {
      "segment_id": "7b99423a",
      "source_content": "```go title=\"ent/schema/user.go\"\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"spouse\", User.Type).\n\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "8de665b0a9b81e8b777764d7b149653377d4a36df70339308f7e7606168f79a5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_7b99423a"
      }
    },
    {
      "segment_id": "36b947e5",
      "source_content": "The API for interacting with this edge is as follows:",
      "source_content_hash": "b1683534d0ad9821271b8cc3c02ffc57ef1e3915caa41e94393267cb7b8aecf8",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "与该边交互的API如下："
      }
    },
    {
      "segment_id": "b72b07f9",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tnati, err := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tSetSpouse(a8m).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\n\t// Query the spouse edge.\n\t// Unlike `Only`, `OnlyX` panics if an error occurs.\n\tspouse := nati.QuerySpouse().OnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: a8m\n\n\tspouse = a8m.QuerySpouse().OnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: nati\n\n\t// Query how many users have a spouse.\n\t// Unlike `Count`, `CountX` panics if an error occurs.\n\tcount := client.User.\n\t\tQuery().\n\t\tWhere(user.HasSpouse()).\n\t\tCountX(ctx)\n\tfmt.Println(count)\n\t// Output: 2\n\n\t// Get the user, that has a spouse with name=\"a8m\".\n\tspouse = client.User.\n\t\tQuery().\n\t\tWhere(user.HasSpouseWith(user.Name(\"a8m\"))).\n\t\tOnlyX(ctx)\n\tfmt.Println(spouse.Name)\n\t// Output: nati\n\treturn nil\n}\n```",
      "source_content_hash": "f4bf89d1cdaaba906d9001b176764f42b7c1105e3babfe7dcf983fb0138db428",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_b72b07f9"
      }
    },
    {
      "segment_id": "0fe0e5d6",
      "source_content": "Note that, the foreign-key column can be configured and exposed as an entity field using the\n[Edge Field](#edge-field) option as follows:",
      "source_content_hash": "c8340d3199b16202dd48ebd71d02f8bf31abef814fe71a71a0378ca50221583d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意，外键列可以通过[边字段](#edge-field)选项进行配置并作为实体字段暴露，如下所示："
      }
    },
    {
      "segment_id": "c9c0a81c",
      "source_content": "```go {4,14}\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"spouse_id\").\n\t\t\tOptional(),\n    }\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"spouse\", User.Type).\n\t\t\tUnique().\n\t\t\tField(\"spouse_id\"),\n\t}\n}\n```",
      "source_content_hash": "5012615bb8495943d22bc156f867e2151e42e5f08930d04dcbab7b1d737b3514",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c9c0a81c"
      }
    },
    {
      "segment_id": "6dbe7a7e",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/o2obidi).",
      "source_content_hash": "96e2457882113ec0bcb63045fa2514c427bdd38dc568f416d97ac7db7919aba5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例可在[GitHub](https://github.com/ent/ent/tree/master/examples/o2obidi)找到。"
      }
    },
    {
      "segment_id": "1e8fadaf",
      "source_content": "## O2M Two Types",
      "source_content_hash": "909414a2548e9f6af738001987f4c61db13bf6f22d3ecd36b2deb80a163724ab",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## O2M 两种类型"
      }
    },
    {
      "segment_id": "b90e0181",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-user-pets](https://entgo.io/images/assets/er_user_pets.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-o2m-two-types](https://entgo.io/images/assets/erd/edges-o2m-two-types.png)](https://gh.atlasgo.cloud/explore/saved/60129542148)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542148\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "67d231482aa9656bfba60cd385c828615ddc4facf267cd6fcacf3dd71e69bcd2",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_b90e0181"
      }
    },
    {
      "segment_id": "d5510ee9",
      "source_content": "In this user-pets example, we have a O2M relation between user and its pets.\nEach user **has many** pets, and a pet **has one** owner.\nIf user A adds a pet B using the `pets` edge, B can get its owner using the `owner` edge (the back-reference edge).",
      "source_content_hash": "8448383bc1af9663559ba35bc1549c80b814a4319e5737799442265f4a72fb81",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个用户-宠物示例中，我们有一个用户与其宠物之间的O2M关系。每个用户拥有多个宠物，而一个宠物只有一个所有者。如果用户A通过`pets`边添加宠物B，B可以通过`owner`边（反向引用边）获取其所有者。"
      }
    },
    {
      "segment_id": "6ba1041f",
      "source_content": "Note that this relation is also a M2O (many-to-one) from the point of view of the `Pet` schema. ",
      "source_content_hash": "d6b812bc8f3deb1c4a7ed78cb757def1d221461b081e1e838ba2d3b2cb5e5bf7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意，从`Pet`模式的角度来看，这种关系也是M2O（多对一）。"
      }
    },
    {
      "segment_id": "ff941d11",
      "source_content": "<Tabs>\n<TabItem value=\"user\" label=\"User\" default>\n\n```go title=\"ent/schema/user.go\" {4}\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type),\n\t}\n}\n```\n</TabItem>\n<TabItem value=\"pet\" label=\"Pet\">\n\n```go title=\"ent/schema/pet.go\" {4-6}\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique(),\n\t}\n}\n```\n</TabItem>\n</Tabs>",
      "source_content_hash": "3f15e6db6b9b919e0c3186f60298fb1c022b60296de37a88e03c913cf6c84d8a",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ff941d11"
      }
    },
    {
      "segment_id": "bface61c",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "与这些边交互的API如下："
      }
    },
    {
      "segment_id": "e5918424",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Create the 2 pets.\n\tpedro, err := client.Pet.\n\t\tCreate().\n\t\tSetName(\"pedro\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating pet: %w\", err)\n\t}\n\tlola, err := client.Pet.\n\t\tCreate().\n\t\tSetName(\"lola\").\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating pet: %w\", err)\n\t}\n\t// Create the user, and add its pets on the creation.\n\ta8m, err := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddPets(pedro, lola).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating user: %w\", err)\n\t}\n\tfmt.Println(\"User created:\", a8m)\n\t// Output: User(id=1, age=30, name=a8m)\n\n\t// Query the owner. Unlike `Only`, `OnlyX` panics if an error occurs.\n\towner := pedro.QueryOwner().OnlyX(ctx)\n\tfmt.Println(owner.Name)\n\t// Output: a8m\n\n\t// Traverse the sub-graph. Unlike `Count`, `CountX` panics if an error occurs.\n\tcount := pedro.\n\t\tQueryOwner(). // a8m\n\t\tQueryPets().  // pedro, lola\n\t\tCountX(ctx)   // count\n\tfmt.Println(count)\n\t// Output: 2\n\treturn nil\n}\n```",
      "source_content_hash": "3dbb9b2c74c2d0c7f9066c3fb51ee1cdde8814b5a4ef195b49e96dd7761693d1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e5918424"
      }
    },
    {
      "segment_id": "13d96f40",
      "source_content": "Note that, the foreign-key column can be configured and exposed as an entity field using the \n[Edge Field](#edge-field) option as follows:",
      "source_content_hash": "72f338b7e1068a41ae89eceadd1a223b805effb1449e9860919b91a8fa4198f0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意，外键列可以通过[边字段](#edge-field)选项进行配置并作为实体字段暴露，如下所示："
      }
    },
    {
      "segment_id": "c2af46bc",
      "source_content": "```go title=\"ent/schema/pet.go\" {4,15}\n// Fields of the Pet.\nfunc (Pet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"owner_id\").\n\t\t\tOptional(),\n    }\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique().\n\t\t\tField(\"owner_id\"),\n\t}\n}\n```",
      "source_content_hash": "ebc7d1f4f700d04ff83ce5d160f69721bd43d39100741feebe435b4b5d663ed2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_c2af46bc"
      }
    },
    {
      "segment_id": "568179b3",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/o2m2types).",
      "source_content_hash": "4ee9d5c95b58ba01ede239e8466426d64a529cf081a8b1375c6c00a86d0300e1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例可在[GitHub](https://github.com/ent/ent/tree/master/examples/o2m2types)找到。"
      }
    },
    {
      "segment_id": "4ba1514d",
      "source_content": "## O2M Same Type",
      "source_content_hash": "f4def22ccfdb1bd9e08d9f01072ae6b569c208f36c1d05feb88f29cf42556590",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## O2M 相同类型"
      }
    },
    {
      "segment_id": "b88f8a98",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-tree](https://entgo.io/images/assets/er_tree.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-o2m-same-type](https://entgo.io/images/assets/erd/edges-o2m-same-type.png)](https://gh.atlasgo.cloud/explore/saved/60129542149)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542149\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "02e41dccf9316aed1e1079d34d6ff9a7affbfc2a61d730005e3db5eb6b65f1a4",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_b88f8a98"
      }
    },
    {
      "segment_id": "f4f6cbea",
      "source_content": "In this example, we have a recursive O2M relation between tree's nodes and their children (or their parent).  \nEach node in the tree **has many** children, and **has one** parent. If node A adds B to its children,\nB can get its owner using the `owner` edge.",
      "source_content_hash": "e9354d6a8fe9d47601083d0e53d178f8a5a871191b49c6c07c5034e903497244",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个示例中，我们有一个树节点与其子节点（或其父节点）之间的递归O2M关系。树中的每个节点拥有多个子节点，并且只有一个父节点。如果节点A将B添加到其子节点中，B可以通过`owner`边获取其所有者。"
      }
    },
    {
      "segment_id": "50216bc1",
      "source_content": "```go title=\"ent/schema/node.go\"\n// Edges of the Node.\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"children\", Node.Type).\n\t\t\tFrom(\"parent\").\n\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "2abb83c308b794e9ea4c2277b24a9463a9fe73842aea4094399e545ec645f277",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_50216bc1"
      }
    },
    {
      "segment_id": "2acec8f4",
      "source_content": "As you can see, in cases of relations of the same type, you can declare the edge and its\nreference in the same builder.",
      "source_content_hash": "7429f0afb59647697594aef2d322636d8d8cafa549317ef56bd7f01f936a85d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如你所见，在相同类型的关系中，可以在同一个构建器中声明边及其引用。"
      }
    },
    {
      "segment_id": "9f5bf6ec",
      "source_content": "```diff\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n+\t\tedge.To(\"children\", Node.Type).\n+\t\t\tFrom(\"parent\").\n+\t\t\tUnique(),\n\n-\t\tedge.To(\"children\", Node.Type),\n-\t\tedge.From(\"parent\", Node.Type).\n-\t\t\tRef(\"children\").\n-\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "66209473ec07926c50320cfd8433f2e0ef761e34e5b1655565470bac97aa260c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_9f5bf6ec"
      }
    },
    {
      "segment_id": "413a2594",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "与这些边交互的API如下："
      }
    },
    {
      "segment_id": "96dec5a6",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\troot, err := client.Node.\n\t\tCreate().\n\t\tSetValue(2).\n\t\tSave(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"creating the root: %w\", err)\n\t}\n\t// Add additional nodes to the tree:\n\t//\n\t//       2\n\t//     /   \\\n\t//    1     4\n\t//        /   \\\n\t//       3     5\n\t//\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\tn1 := client.Node.\n\t\tCreate().\n\t\tSetValue(1).\n\t\tSetParent(root).\n\t\tSaveX(ctx)\n\tn4 := client.Node.\n\t\tCreate().\n\t\tSetValue(4).\n\t\tSetParent(root).\n\t\tSaveX(ctx)\n\tn3 := client.Node.\n\t\tCreate().\n\t\tSetValue(3).\n\t\tSetParent(n4).\n\t\tSaveX(ctx)\n\tn5 := client.Node.\n\t\tCreate().\n\t\tSetValue(5).\n\t\tSetParent(n4).\n\t\tSaveX(ctx)\n\n\tfmt.Println(\"Tree leafs\", []int{n1.Value, n3.Value, n5.Value})\n\t// Output: Tree leafs [1 3 5]\n\n\t// Get all leafs (nodes without children).\n\t// Unlike `Int`, `IntX` panics if an error occurs.\n\tints := client.Node.\n\t\tQuery().                             // All nodes.\n\t\tWhere(node.Not(node.HasChildren())). // Only leafs.\n\t\tOrder(ent.Asc(node.FieldValue)).     // Order by their `value` field.\n\t\tGroupBy(node.FieldValue).            // Extract only the `value` field.\n\t\tIntsX(ctx)\n\tfmt.Println(ints)\n\t// Output: [1 3 5]\n\n\t// Get orphan nodes (nodes without parent).\n\t// Unlike `Only`, `OnlyX` panics if an error occurs.\n\torphan := client.Node.\n\t\tQuery().\n\t\tWhere(node.Not(node.HasParent())).\n\t\tOnlyX(ctx)\n\tfmt.Println(orphan)\n\t// Output: Node(id=1, value=2)\n\n\treturn nil\n}\n```",
      "source_content_hash": "e6fcc6817867c6d1d7ae882a78c40a83fa592829138b9f59fd47cab85c7db740",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_96dec5a6"
      }
    },
    {
      "segment_id": "4658ae99",
      "source_content": "Note that, the foreign-key column can be configured and exposed as an entity field using the\n[Edge Field](#edge-field) option as follows:",
      "source_content_hash": "c8340d3199b16202dd48ebd71d02f8bf31abef814fe71a71a0378ca50221583d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意，外键列可以通过[边字段](#edge-field)选项进行配置并作为实体字段暴露，如下所示："
      }
    },
    {
      "segment_id": "0dbda15c",
      "source_content": "```go {4,15}\n// Fields of the Node.\nfunc (Node) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"parent_id\").\n\t\t\tOptional(),\n    }\n}\n\n// Edges of the Node.\nfunc (Node) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"children\", Node.Type).\n\t\t\tFrom(\"parent\").\n\t\t\tUnique().\n\t\t\tField(\"parent_id\"),\n\t}\n}\n```",
      "source_content_hash": "6ac42b1673e4b2f8f1089700d869d5945158eac5fbe8a6e612dbbafb5e9226bf",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_0dbda15c"
      }
    },
    {
      "segment_id": "63defcb3",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/o2mrecur).",
      "source_content_hash": "2ff0f05810a9b31296ad963917a0b7313dea4128ff91f6c45b5e949a1bd2da42",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例可在[GitHub](https://github.com/ent/ent/tree/master/examples/o2mrecur)找到。"
      }
    },
    {
      "segment_id": "01d62133",
      "source_content": "## M2M Two Types",
      "source_content_hash": "97de15ceab5d1b43eb46e69b39ece62ef37eb1e6b4ff2d3a38019a5ec88ec6e4",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## M2M 两种类型"
      }
    },
    {
      "segment_id": "8bf75cb8",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-user-groups](https://entgo.io/images/assets/er_user_groups.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-m2m-two-types](https://entgo.io/images/assets/erd/edges-m2m-two-types.png)](https://gh.atlasgo.cloud/explore/saved/60129542150)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542150\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "19f8a038df697b3e701cca0a760a257581c8b0d684e7e2644667fe286f607dbb",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_8bf75cb8"
      }
    },
    {
      "segment_id": "b3cf5ea6",
      "source_content": "In this groups-users example, we have a M2M relation between groups and their users.\nEach group **has many** users, and each user can be joined to **many** groups.",
      "source_content_hash": "d6d20ae7c0f24473521441ad1409e1469bccb4be0cb65c365ab5330e675c5139",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个群组-用户示例中，我们展示了群组与用户之间的多对多关系（M2M）。\n每个群组可以包含多个用户，每个用户也可以加入多个群组。"
      }
    },
    {
      "segment_id": "aeab960a",
      "source_content": "```go title=\"ent/schema/group.go\"\n// Edges of the Group.\nfunc (Group) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"users\", User.Type),\n\t}\n}\n```",
      "source_content_hash": "87e4ba31215cad13648fb91ec2a262d92150141898a779b21dcd3b63e7357999",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_aeab960a"
      }
    },
    {
      "segment_id": "f44f2a14",
      "source_content": "```go title=\"ent/schema/user.go\"\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"groups\", Group.Type).\n\t\t\tRef(\"users\"),\n\t}\n}\n```",
      "source_content_hash": "4a5c3e0c2fec90b5a54d02499f56c7066447d5f7d5476cd019f4180186cc06ac",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_f44f2a14"
      }
    },
    {
      "segment_id": "7eb9758b",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "操作这些关系的API如下："
      }
    },
    {
      "segment_id": "0f715871",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\thub := client.Group.\n\t\tCreate().\n\t\tSetName(\"GitHub\").\n\t\tSaveX(ctx)\n\tlab := client.Group.\n\t\tCreate().\n\t\tSetName(\"GitLab\").\n\t\tSaveX(ctx)\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tAddGroups(hub, lab).\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddGroups(hub).\n\t\tSaveX(ctx)\n\n\t// Query the edges.\n\tgroups, err := a8m.\n\t\tQueryGroups().\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying a8m groups: %w\", err)\n\t}\n\tfmt.Println(groups)\n\t// Output: [Group(id=1, name=GitHub) Group(id=2, name=GitLab)]\n\n\tgroups, err = nati.\n\t\tQueryGroups().\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"querying nati groups: %w\", err)\n\t}\n\tfmt.Println(groups)\n\t// Output: [Group(id=1, name=GitHub)]\n\n\t// Traverse the graph.\n\tusers, err := a8m.\n\t\tQueryGroups().                                           // [hub, lab]\n\t\tWhere(group.Not(group.HasUsersWith(user.Name(\"nati\")))). // [lab]\n\t\tQueryUsers().                                            // [a8m]\n\t\tQueryGroups().                                           // [hub, lab]\n\t\tQueryUsers().                                            // [a8m, nati]\n\t\tAll(ctx)\n\tif err != nil {\n\t\treturn fmt.Errorf(\"traversing the graph: %w\", err)\n\t}\n\tfmt.Println(users)\n\t// Output: [User(id=1, age=30, name=a8m) User(id=2, age=28, name=nati)]\n\treturn nil\n}\n```",
      "source_content_hash": "8515a26ee5f89892138ad46e9343262309e1549172dc96430376a8b6224942f5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_0f715871"
      }
    },
    {
      "segment_id": "55b05dc3",
      "source_content": ":::note\nCalling `AddGroups` (a M2M edge) will result in a no-op in case the edge already exists and is\nnot an [EdgeSchema](#edge-schema):\n\n```go {6}\na8m := client.User.\n\tCreate().\n\tSetName(\"a8m\").\n\tAddGroups(\n\t\thub,\n\t\thub, // no-op.\n\t).\n\tSaveX(ctx)\n```\n:::",
      "source_content_hash": "49b6bb7485089d8b06c9bc262d67f029d04141f470e6035b1eb3d2bc15fc4337",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n调用`AddGroups`方法（M2M关系）时，若关系已存在且非[边模式](#edge-schema)，则不会执行任何操作：\n\n```go {6}\na8m := client.User.\n\tCreate().\n\tSetName(\"a8m\").\n\tAddGroups(\n\t\thub,\n\t\thub, // 无操作.\n\t).\n\tSaveX(ctx)\n```\n:::"
      }
    },
    {
      "segment_id": "cec570ea",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/m2m2types).",
      "source_content_hash": "56ffc5c4f454d11baced7991dc99315666a1683a260434b0300d33e554c57ec0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例见[GitHub](https://github.com/ent/ent/tree/master/examples/m2m2types)。"
      }
    },
    {
      "segment_id": "b064490d",
      "source_content": "## M2M Same Type",
      "source_content_hash": "1dc75d24d269511a2fd0b0ac2327cb356b1b2c5a40a0436670cf5c668ce6962d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 同类型多对多关系"
      }
    },
    {
      "segment_id": "1e9a5bb0",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-following-followers](https://entgo.io/images/assets/er_following_followers.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-m2m-same-type](https://entgo.io/images/assets/erd/edges-m2m-same-type.png)](https://gh.atlasgo.cloud/explore/saved/60129542151)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542151\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "994c09e81049fc8436ddf30496bb161773b9e020c2c705170cec914443395f4f",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_1e9a5bb0"
      }
    },
    {
      "segment_id": "e81571b9",
      "source_content": "In this following-followers example, we have a M2M relation between users to their followers. Each user \ncan follow **many** users, and can have **many** followers.",
      "source_content_hash": "8ae573b2478b4bee08d1a56eea1b6a913c31ebbcab266ebb83fc90a074362df3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个关注者示例中，我们展示了用户之间的互相关注关系。每个用户可以关注多个用户，也可以被多个用户关注。"
      }
    },
    {
      "segment_id": "219db9e0",
      "source_content": "```go title=\"ent/schema/user.go\"\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"following\", User.Type).\n\t\t\tFrom(\"followers\"),\n\t}\n}\n```",
      "source_content_hash": "225054136de0ec81d28abe4a8b57ce60ea5e3ba3ff38160aa1250f7bc87216c5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_219db9e0"
      }
    },
    {
      "segment_id": "4856afff",
      "source_content": "As you can see, in cases of relations of the same type, you can declare the edge and its\nreference in the same builder.",
      "source_content_hash": "7429f0afb59647697594aef2d322636d8d8cafa549317ef56bd7f01f936a85d6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如你所见，对于同类型的关系，可以在同一个构建器中声明边及其反向引用。"
      }
    },
    {
      "segment_id": "2b08262e",
      "source_content": "```diff\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n+\t\tedge.To(\"following\", User.Type).\n+\t\t\tFrom(\"followers\"),\n\n-\t\tedge.To(\"following\", User.Type),\n-\t\tedge.From(\"followers\", User.Type).\n-\t\t\tRef(\"following\"),\n\t}\n}\n```",
      "source_content_hash": "1a594e560f7ff3cbf19f909332cb80c7d6d384c8a67dd1dbab1d2bd6e5789123",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_2b08262e"
      }
    },
    {
      "segment_id": "7ee7c598",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "操作这些关系的API如下："
      }
    },
    {
      "segment_id": "3ef0b830",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddFollowers(a8m).\n\t\tSaveX(ctx)\n\n\t// Query following/followers:\n\n\tflw := a8m.QueryFollowing().AllX(ctx)\n\tfmt.Println(flw)\n\t// Output: [User(id=2, age=28, name=nati)]\n\n\tflr := a8m.QueryFollowers().AllX(ctx)\n\tfmt.Println(flr)\n\t// Output: []\n\n\tflw = nati.QueryFollowing().AllX(ctx)\n\tfmt.Println(flw)\n\t// Output: []\n\n\tflr = nati.QueryFollowers().AllX(ctx)\n\tfmt.Println(flr)\n\t// Output: [User(id=1, age=30, name=a8m)]\n\n\t// Traverse the graph:\n\n\tages := nati.\n\t\tQueryFollowers().       // [a8m]\n\t\tQueryFollowing().       // [nati]\n\t\tGroupBy(user.FieldAge). // [28]\n\t\tIntsX(ctx)\n\tfmt.Println(ages)\n\t// Output: [28]\n\n\tnames := client.User.\n\t\tQuery().\n\t\tWhere(user.Not(user.HasFollowers())).\n\t\tGroupBy(user.FieldName).\n\t\tStringsX(ctx)\n\tfmt.Println(names)\n\t// Output: [a8m]\n\treturn nil\n}\n```",
      "source_content_hash": "d669323ac8e8cb37e77e7e9ea3fab212b16c0bde34ef8df13901294f0256a289",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_3ef0b830"
      }
    },
    {
      "segment_id": "a077d8a7",
      "source_content": ":::note\nCalling `AddFollowers` (a M2M edge) will result in a no-op in case the edge already exists and is\nnot an [EdgeSchema](#edge-schema):\n\n```go {6}\na8m := client.User.\n\tCreate().\n\tSetName(\"a8m\").\n\tAddFollowers(\n\t\tnati,\n\t\tnati, // no-op.\n\t).\n\tSaveX(ctx)\n```\n:::",
      "source_content_hash": "b46fcc64b99c2cfedf22f5e3f126c364585c758754c3d0ea9173ae7fa3e566d3",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n调用`AddFollowers`方法（M2M关系）时，若关系已存在且非[边模式](#edge-schema)，则不会执行任何操作：\n\n```go {6}\na8m := client.User.\n\tCreate().\n\tSetName(\"a8m\").\n\tAddFollowers(\n\t\tnati,\n\t\tnati, // 无操作.\n\t).\n\tSaveX(ctx)\n```\n:::"
      }
    },
    {
      "segment_id": "4a1e492d",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/m2mrecur).",
      "source_content_hash": "1f81f51eceaaa6ca433ef1f35de0ba512eb5bf26d059bbf0c7c287160ce0ddbf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例见[GitHub](https://github.com/ent/ent/tree/master/examples/m2mrecur)。"
      }
    },
    {
      "segment_id": "77a296f3",
      "source_content": "## M2M Bidirectional",
      "source_content_hash": "39465a0eb386b51c46e4955ff2af295da208a904f1c12cc282395052dc382de8",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 双向多对多关系"
      }
    },
    {
      "segment_id": "facf12fc",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er-user-friends](https://entgo.io/images/assets/er_user_friends.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-m2m-bidirectional](https://entgo.io/images/assets/erd/edges-m2m-bidirectional.png)](https://gh.atlasgo.cloud/explore/saved/60129542152)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542152\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "a3170b501ff355396a8d2d44350ff799f45205157ee7b5c3a41f2f360c65f407",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_facf12fc"
      }
    },
    {
      "segment_id": "9b55dd7d",
      "source_content": "In this user-friends example, we have a **symmetric M2M relation** named `friends`.\nEach user can **have many** friends. If user A becomes a friend of B, B is also a friend of A.",
      "source_content_hash": "8fbce31907fa9674cfdfbe4979ae0b441ca9a0e3492a9bc390b2742fa4d3a827",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在这个用户好友示例中，我们展示了名为`friends`的对称多对多关系。\n每个用户可以拥有多个好友。若用户A与B成为好友，B自动成为A的好友。"
      }
    },
    {
      "segment_id": "73695405",
      "source_content": "Note that there are no owner/inverse terms in cases of bidirectional edges.",
      "source_content_hash": "ac72813841e1a476554e8df96f1b632a8f0b6658c45b9b5a92318a3566f4e855",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意：双向关系中不存在所有者/反向引用的概念。"
      }
    },
    {
      "segment_id": "6581e7b4",
      "source_content": "```go title=\"ent/schema/user.go\"\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", User.Type),\n\t}\n}\n```",
      "source_content_hash": "fc0fe58445da9e814452c855702325f5ae642dbd6ca47a013984a18691db00dd",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_6581e7b4"
      }
    },
    {
      "segment_id": "9a98e1ae",
      "source_content": "The API for interacting with these edges is as follows:",
      "source_content_hash": "c489f81acec96ffd00d75a8626e0e0ec0a814357a9f547d07d7fbfd55236a2f7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "操作这些关系的API如下："
      }
    },
    {
      "segment_id": "dd65c124",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n\t// Unlike `Save`, `SaveX` panics if an error occurs.\n\ta8m := client.User.\n\t\tCreate().\n\t\tSetAge(30).\n\t\tSetName(\"a8m\").\n\t\tSaveX(ctx)\n\tnati := client.User.\n\t\tCreate().\n\t\tSetAge(28).\n\t\tSetName(\"nati\").\n\t\tAddFriends(a8m).\n\t\tSaveX(ctx)\n\n\t// Query friends. Unlike `All`, `AllX` panics if an error occurs.\n\tfriends := nati.\n\t\tQueryFriends().\n\t\tAllX(ctx)\n\tfmt.Println(friends)\n\t// Output: [User(id=1, age=30, name=a8m)]\n\n\tfriends = a8m.\n\t\tQueryFriends().\n\t\tAllX(ctx)\n\tfmt.Println(friends)\n\t// Output: [User(id=2, age=28, name=nati)]\n\n\t// Query the graph:\n\tfriends = client.User.\n\t\tQuery().\n\t\tWhere(user.HasFriends()).\n\t\tAllX(ctx)\n\tfmt.Println(friends)\n\t// Output: [User(id=1, age=30, name=a8m) User(id=2, age=28, name=nati)]\n\treturn nil\n}\n```",
      "source_content_hash": "1ef3a892fa9a1bc07650cbbd8c5f042902152487f314dd758b7e6a4a2dc7f464",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_dd65c124"
      }
    },
    {
      "segment_id": "343a3f92",
      "source_content": ":::note\nCalling `AddFriends` (a M2M bidirectional edge) will result in a no-op in case the edge already exists and is\nnot an [EdgeSchema](#edge-schema):\n\n```go {6}\na8m := client.User.\n\tCreate().\n\tSetName(\"a8m\").\n\tAddFriends(\n\t\tnati,\n\t\tnati, // no-op.\n\t).\n\tSaveX(ctx)\n```\n:::",
      "source_content_hash": "3ba3bb94315bb095815c9d21b5cca4ed6822e3f7dea8b5bdd1657c59cccb6cc0",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n调用`AddFriends`方法（双向M2M关系）时，若关系已存在且非[边模式](#edge-schema)，则不会执行任何操作：\n\n```go {6}\na8m := client.User.\n\tCreate().\n\tSetName(\"a8m\").\n\tAddFriends(\n\t\tnati,\n\t\tnati, // 无操作.\n\t).\n\tSaveX(ctx)\n```\n:::"
      }
    },
    {
      "segment_id": "50638ee7",
      "source_content": "The full example exists in [GitHub](https://github.com/ent/ent/tree/master/examples/m2mbidi).",
      "source_content_hash": "9cfd8b168e3981650b8d952278c099cac783ddb09b21b137f74a79c6ace98369",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整示例见[GitHub](https://github.com/ent/ent/tree/master/examples/m2mbidi)。"
      }
    },
    {
      "segment_id": "d1766586",
      "source_content": "## Edge Field",
      "source_content_hash": "9be9ac0fe6ef3ae79036b2c8700ccf195c914f577f5ba893ebbce2ceba94a6c6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 边字段"
      }
    },
    {
      "segment_id": "48ed5f16",
      "source_content": "The `Field` option for edges allows users to expose foreign-keys as regular fields on the schema.\nNote that only relations that hold foreign-keys (edge-ids) are allowed to use this option.",
      "source_content_hash": "142ad62583cb05fec1782039c84764550bb8a43c0244413218bdf6042f27b186",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "边的`Field`选项允许将外键作为常规字段暴露在模式中。\n注意：只有持有外键（边ID）的关系才能使用此选项。"
      }
    },
    {
      "segment_id": "71f22ffa",
      "source_content": "```go title=\"ent/schema/post.go\"\n// Fields of the Post.\nfunc (Post) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Int(\"author_id\").\n\t\t\tOptional(),\n\t}\n}\n\n// Edges of the Post.\nfunc (Post) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"author\", User.Type).\n\t\t\t// Bind the \"author_id\" field to this edge.\n\t\t\tField(\"author_id\").\n\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "e3df5d42ad1b24196adefaff7be402e029a7cab8e54acdf7d1e2ce84a599ae1d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_71f22ffa"
      }
    },
    {
      "segment_id": "a8090ee1",
      "source_content": "The API for interacting with edge-fields is as follows:",
      "source_content_hash": "e376cd38fd39aff5d3073357e1dfa9fcfd6c89a4d02dc94765f383ad3305b264",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "操作边字段的API如下："
      }
    },
    {
      "segment_id": "cd8c637d",
      "source_content": "```go\nfunc Do(ctx context.Context, client *ent.Client) error {\n    p, err := c.Post.Query().\n    \tWhere(post.AuthorID(id)).\n    \tOnlyX(ctx)\n    if err != nil {\n        log.Fatal(err)\t\n    }\n    fmt.Println(p.AuthorID) // Access the \"author\" foreign-key.\n}\n```",
      "source_content_hash": "9fba7f17266882ca31f6ae54e739b9a33a35b398b98b9de51a7fea8bea09e6ed",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_cd8c637d"
      }
    },
    {
      "segment_id": "54d620b3",
      "source_content": "Multiple examples exists in [GitHub](https://github.com/ent/ent/tree/master/entc/integration/edgefield).",
      "source_content_hash": "2e0e4aee55d2e6d456423367af68ec5173c80323651f037729c569a8b66d2467",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更多示例见[GitHub](https://github.com/ent/ent/tree/master/entc/integration/edgefield)。"
      }
    },
    {
      "segment_id": "da46a286",
      "source_content": "#### Migration To Edge Fields",
      "source_content_hash": "8e286fee42a708272d3e3a00393f4ecc4050af4e901ecf1515cf2ba7d3711683",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 迁移至边字段"
      }
    },
    {
      "segment_id": "7910222e",
      "source_content": "As mentioned in the [StorageKey](#storagekey) section, Ent configures edge storage-keys (e.g. foreign-keys) by the\n`edge.To`. Therefore, if you want to add a field to an existing edge (already exists in the database as a column),\nyou need to set it up with the `StorageKey` option as follows:",
      "source_content_hash": "ac1fcb8749a2d5970af445abfa518e7761fe0098436379c1fc867f2a6bc4c2b7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如[StorageKey](#storagekey)部分所述，Ent通过`edge.To`配置边的存储键（如外键）。因此，若需向已存在于数据库列中的边添加字段，需按如下方式使用`StorageKey`选项进行设置："
      }
    },
    {
      "segment_id": "008440da",
      "source_content": "```diff\n// Fields of the Post.\nfunc (Post) Fields() []ent.Field {\n\treturn []ent.Field{\n+\t\tfield.Int(\"author_id\").\n+\t\t\tOptional(),\n\t}\n}\n\n// Edges of the Post.\nfunc (Post) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"author\", User.Type).\n+\t\t\tField(\"author_id\").\n+\t\t\tStorageKey(edge.Column(\"post_author\")).\n\t\t\tUnique(),\n\t}\n}\n```",
      "source_content_hash": "0f12ed44368e821e371fa2abb299f3c1e0fc8a3609f4b2c8be78481999a5f1bf",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_008440da"
      }
    },
    {
      "segment_id": "b854961d",
      "source_content": "Alternatively, this option can be configured on the edge-field instead:",
      "source_content_hash": "bb66aafb48794fa553f673c868da1b57ac899a6c310b21a251d285748015e52f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "或者，该选项也可在边字段上配置："
      }
    },
    {
      "segment_id": "32c5f16b",
      "source_content": "```diff\n// Fields of the Post.\nfunc (Post) Fields() []ent.Field {\n\treturn []ent.Field{\n+\t\tfield.Int(\"author_id\").\n+\t\t\tStorageKey(\"post_author\").\n+\t\t\tOptional(),\n\t}\n}\n```",
      "source_content_hash": "4b103847854cc4b074d0e01abe9851c8f5629ec599083ffc3fa76c2fa46e6981",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_32c5f16b"
      }
    },
    {
      "segment_id": "102dff71",
      "source_content": "If you're not sure how the foreign-key was named before using the edge-field option,\ncheck out the generated schema description in your project: `<project>/ent/migrate/schema.go`.",
      "source_content_hash": "0448a66f987386438071dd9e50e8a9eecc0860b5c7371ac9b044692b2be07684",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如果不确定在使用边字段选项前外键的命名方式，请查看项目中生成的模式描述文件：`<project>/ent/migrate/schema.go`。"
      }
    },
    {
      "segment_id": "a8a9d8f2",
      "source_content": "## Edge Schema",
      "source_content_hash": "3cdb1b7f347907c6b90fa1043bbdd58ba0d47428b235505cba3fb451edb21c54",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 边模式"
      }
    },
    {
      "segment_id": "be329b7c",
      "source_content": "Edge schemas are intermediate entity schemas for M2M edges. By using the `Through` option, users can define edge schemas\nfor relationships. This allows users to expose relationships in their public APIs, store additional fields, apply CRUD\noperations, and set hooks and privacy policies on edges.",
      "source_content_hash": "c656b829bb4cdd0867b9a5e8488cd24d6d82d7cad06ae33e645e64449fbd2a33",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "边模式是用于多对多(M2M)关系的中间实体模式。通过`Through`选项，用户可为关系定义边模式。这使得用户能够在其公共API中暴露关系、存储额外字段、对边执行CRUD操作，并设置钩子和隐私策略。"
      }
    },
    {
      "segment_id": "5af97a48",
      "source_content": "#### User Friendships Example",
      "source_content_hash": "6f39358d3e4b17b3028125ab527f2c49b390e670b8575d265f2b73e2bc28983d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 用户好友关系示例"
      }
    },
    {
      "segment_id": "7de2b0e5",
      "source_content": "In the following example, we demonstrate how to model the friendship between two users using an edge schema with the two\nrequired fields of the relationship (`user_id` and `friend_id`), and an additional field named `created_at` whose value\nis automatically set on creation.",
      "source_content_hash": "10dd155c664700fec481bb964bbb93bf701285fbea26c7bc8669200ee73b3e2b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下示例展示了如何使用边模式建模两个用户之间的好友关系，其中包含关系的两个必填字段（`user_id`和`friend_id`），以及一个在创建时自动设置值的额外字段`created_at`。"
      }
    },
    {
      "segment_id": "1ba8f936",
      "source_content": "<Tabs>\n<TabItem value=\"graph\" label=\"Graph\" default>\n\n![er_edgeschema_bidi](https://entgo.io/images/assets/er_edgeschema_bidi.png)\n\n</TabItem>\n<TabItem value=\"erd\" label=\"ERD and SQL\">\n\n[![edges-schema](https://entgo.io/images/assets/erd/edges-schema.png)](https://gh.atlasgo.cloud/explore/saved/60129542153)\n\n<div style={{textAlign: 'center'}}>\n  <a href={\"https://gh.atlasgo.cloud/explore/saved/60129542153\"} style={{fontSize: 12}}>ERD was generated by Atlas</a>\n</div>\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "89455d4d0d76ad7c5004d6dc48a5bbc406f82b0d165ab15b83a8507df7bfde1b",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_1ba8f936"
      }
    },
    {
      "segment_id": "13615bdd",
      "source_content": "<Tabs\ndefaultValue=\"user\"\nvalues={[\n{label: 'User', value: 'user'},\n{label: 'Friendship', value: 'friendship'},\n]}>\n<TabItem value=\"user\">\n\n```go title=\"ent/schema/user.go\" {18}\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"friends\", User.Type).\n\t\t\tThrough(\"friendships\", Friendship.Type),\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"friendship\">\n\n```go title=\"ent/schema/friendship.go\" {11-12}\n// Friendship holds the edge schema definition of the Friendship relationship.\ntype Friendship struct {\n\tent.Schema\n}\n\n// Fields of the Friendship.\nfunc (Friendship) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.Int(\"user_id\"),\n\t\tfield.Int(\"friend_id\"),\n\t}\n}\n\n// Edges of the Friendship.\nfunc (Friendship) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"user\", User.Type).\n\t\t\tRequired().\n\t\t\tUnique().\n\t\t\tField(\"user_id\"),\n\t\tedge.To(\"friend\", User.Type).\n\t\t\tRequired().\n\t\t\tUnique().\n\t\t\tField(\"friend_id\"),\n\t}\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "e8d688344b5ff900698a710a4ce167e809dbe88989150dbda3357df70b9cbc91",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_13615bdd"
      }
    },
    {
      "segment_id": "01307935",
      "source_content": ":::info\n- Similar to entity schemas, the `ID` field is automatically generated for edge schemas if not stated otherwise.\n- Edge schemas cannot be used by more than one relationship.\n- The `user_id` and `friend_id` edge-fields are **required** in the edge schema as they compose the relationship.\n:::",
      "source_content_hash": "e4704606ad1d818e9bc3da87da61802a1278cf803a6384aa4deaedd59f2832b5",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::info\n- 与实体模式类似，若未明确说明，边模式的`ID`字段会自动生成。\n- 边模式不能被多个关系共享使用。\n- 边模式中的`user_id`和`friend_id`字段作为关系的组成部分是**必填项**。\n:::"
      }
    },
    {
      "segment_id": "4df40afc",
      "source_content": "#### User Likes Example",
      "source_content_hash": "ad46e4ef5496805990dad351b526b42bf76aa3fc5b1e9497b7af2cfe48b1371c",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 用户点赞示例"
      }
    },
    {
      "segment_id": "6cf42019",
      "source_content": "In the following example, we demonstrate how to model a system where users can \"like\" tweets, and a timestamp of when\nthe tweet was \"liked\" is stored in the database. This is a way to store additional fields on the edge.",
      "source_content_hash": "d8e1f681d1b5760ffa3d1f179012f295fbff7992f73b45c5845d32fa3cd65849",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下示例展示了如何建模用户\"点赞\"推文的系统，其中点赞时间戳会存储在数据库中。这是在边上存储额外字段的一种方式。"
      }
    },
    {
      "segment_id": "62cf9447",
      "source_content": "<Tabs\ndefaultValue=\"user\"\nvalues={[\n{label: 'User', value: 'user'},\n{label: 'Tweet', value: 'tweet'},\n{label: 'Like', value: 'like'},\n]}>\n<TabItem value=\"user\">\n\n```go title=\"ent/schema/user.go\" {18}\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"liked_tweets\", Tweet.Type).\n\t\t\tThrough(\"likes\", Like.Type),\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"tweet\">\n\n```go title=\"ent/schema/tweet.go\" {18}\n// Tweet holds the schema definition for the Tweet entity.\ntype Tweet struct {\n\tent.Schema\n}\n\n// Fields of the Tweet.\nfunc (Tweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Text(\"text\"),\n\t}\n}\n\n// Edges of the Tweet.\nfunc (Tweet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"liked_users\", User.Type).\n\t\t\tRef(\"liked_tweets\").\n\t\t\tThrough(\"likes\", Like.Type),\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"like\">\n\n```go title=\"ent/schema/like.go\" {8,17-18}\n// Like holds the edge schema definition for the Like edge.\ntype Like struct {\n\tent.Schema\n}\n\nfunc (Like) Annotations() []schema.Annotation {\n\treturn []schema.Annotation{\n\t\tfield.ID(\"user_id\", \"tweet_id\"),\n\t}\n}\n\n// Fields of the Like.\nfunc (Like) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"liked_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.Int(\"user_id\"),\n\t\tfield.Int(\"tweet_id\"),\n\t}\n}\n\n// Edges of the Like.\nfunc (Like) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"user\", User.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"user_id\"),\n\t\tedge.To(\"tweet\", Tweet.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"tweet_id\"),\n\t}\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "d8d0eea1b373684ffafb41167c26010c63054eb447e80f85d15feb42420ac307",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_62cf9447"
      }
    },
    {
      "segment_id": "67564b8f",
      "source_content": ":::info\nIn the example above, the `field.ID` annotation is used to tell Ent that the edge schema identifier is a\ncomposite primary-key of the two edge-fields, `user_id` and `tweet_id`. Therefore, the `ID` field will\nnot be generated for the `Like` struct along with any of its builder methods. e.g. `Get`, `OnlyID`, etc.\n:::",
      "source_content_hash": "7a10dee4caa50753a81d13476f2ba675fb06cba2be66234dea96917940829c8b",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::info\n上例中，`field.ID`注解用于告知Ent边模式标识符是由两个边字段`user_id`和`tweet_id`组成的复合主键。因此，`Like`结构体不会生成`ID`字段及其构建方法（如`Get`、`OnlyID`等）。\n:::"
      }
    },
    {
      "segment_id": "5756bd9d",
      "source_content": "#### Usage Of Edge Schema In Other Edge Types",
      "source_content_hash": "b018aaada927475d68a0810146b3388bbbfb457032aed10745e58691e7d2728a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 边模式在其他边类型中的使用"
      }
    },
    {
      "segment_id": "b02a0d85",
      "source_content": "In some cases, users want to store O2M/M2O or O2O relationships in a separate table (i.e. join table) in order to\nsimplify future migrations in case the edge type was changed. For example, wanting to change a O2M/M2O edge to M2M by\ndropping a unique constraint instead of migrating foreign-key values to a new table.",
      "source_content_hash": "79d4f78877a7d5a191c6d929360db78af785787d355beef955e90e2b4a38255c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "某些情况下，用户希望将O2M/M2O或O2O关系存储在单独的表中（即连接表），以简化未来可能变更边类型的迁移。例如，通过删除唯一约束而非将外键值迁移到新表，将O2M/M2O边改为M2M。"
      }
    },
    {
      "segment_id": "c3d7053c",
      "source_content": "In the following example, we present a model where users can \"author\" tweets with the constraint that a tweet can be\nwritten by only one user. Unlike regular O2M/M2O edges, by using an edge schema, we enforce this constraint on the join\ntable using a unique index on the `tweet_id` column. This constraint may be dropped in the future to allow multiple\nusers to participate in the \"authoring\" of a tweet. Hence, changing the edge type to M2M without migrating the data to\na new table.",
      "source_content_hash": "339834f18dd74c7c436718b35ceb770ef4e1482c20bc6823f3460acae77456bb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下示例展示了一个模型，其中用户可以\"创作\"推文，并约束一条推文只能由一个用户创作。与常规O2M/M2O边不同，通过使用边模式，我们在连接表上通过对`tweet_id`列设置唯一索引来强制执行此约束。未来可删除此约束以允许多个用户参与推文\"创作\"，从而在不迁移数据到新表的情况下将边类型改为M2M。"
      }
    },
    {
      "segment_id": "560777b4",
      "source_content": "<Tabs\ndefaultValue=\"user\"\nvalues={[\n{label: 'User', value: 'user'},\n{label: 'Tweet', value: 'tweet'},\n{label: 'UserTweet', value: 'usertweet'},\n]}>\n<TabItem value=\"user\">\n\n```go title=\"ent/schema/user.go\" {18}\n// User holds the schema definition for the User entity.\ntype User struct {\n\tent.Schema\n}\n\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tDefault(\"Unknown\"),\n\t}\n}\n\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"tweets\", Tweet.Type).\n\t\t\tThrough(\"user_tweets\", UserTweet.Type),\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"tweet\">\n\n```go title=\"ent/schema/tweet.go\" {18}\n// Tweet holds the schema definition for the Tweet entity.\ntype Tweet struct {\n\tent.Schema\n}\n\n// Fields of the Tweet.\nfunc (Tweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Text(\"text\"),\n\t}\n}\n\n// Edges of the Tweet.\nfunc (Tweet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"user\", User.Type).\n\t\t\tRef(\"tweets\").\n\t\t\tThrough(\"tweet_user\", UserTweet.Type).\n\t\t\tComment(\"The uniqueness of the author is enforced on the edge schema\"),\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"usertweet\">\n\n```go title=\"ent/schema/usertweet.go\" {33-34}\n// UserTweet holds the schema definition for the UserTweet entity.\ntype UserTweet struct {\n\tent.Schema\n}\n\n// Fields of the UserTweet.\nfunc (UserTweet) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.Time(\"created_at\").\n\t\t\tDefault(time.Now),\n\t\tfield.Int(\"user_id\"),\n\t\tfield.Int(\"tweet_id\"),\n\t}\n}\n\n// Edges of the UserTweet.\nfunc (UserTweet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"user\", User.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"user_id\"),\n\t\tedge.To(\"tweet\", Tweet.Type).\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tField(\"tweet_id\"),\n\t}\n}\n\n// Indexes of the UserTweet.\nfunc (UserTweet) Indexes() []ent.Index {\n\treturn []ent.Index{\n\t\tindex.Fields(\"tweet_id\").\n\t\t\tUnique(),\n\t}\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "40c05271d552a9b25f638148555f46440a74212b51e5073b16fbbf9b3a4983a7",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_560777b4"
      }
    },
    {
      "segment_id": "02e507b4",
      "source_content": "## Required",
      "source_content_hash": "46ea0c60d669774e239dd3e5b9747fd71b055814797f16f63dabf766efca4a34",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 必填边"
      }
    },
    {
      "segment_id": "89e2d436",
      "source_content": "Edges can be defined as required in the entity creation using the `Required` method on the builder.",
      "source_content_hash": "a2301427066d079e6acdf8c4bc7751c398b92db2215fcd6696a1fb0d1a04a932",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "通过在构建器上使用`Required`方法，可将边定义为实体创建时的必填项。"
      }
    },
    {
      "segment_id": "fb350d18",
      "source_content": "```go {7}\n// Edges of the Card.\nfunc (Card) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.From(\"owner\", User.Type).\n\t\t\tRef(\"card\").\n\t\t\tUnique().\n\t\t\tRequired(),\n\t}\n}\n```",
      "source_content_hash": "2afb03e87bed5a1d3358b73cd4fa8f55ea219075cdae9dac3455d18288ea461e",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_fb350d18"
      }
    },
    {
      "segment_id": "62d2676d",
      "source_content": "If the example above, a card entity cannot be created without its owner. ",
      "source_content_hash": "4331e19d7abcc84aafe1025a16b4503b05c3676e78067a6d5a5303152fe720b9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在上例中，银行卡实体必须关联所属用户才能被创建。"
      }
    },
    {
      "segment_id": "efaa3375",
      "source_content": ":::info\nNote that, starting with [v0.10](https://github.com/ent/ent/releases/tag/v0.10.0), foreign key columns are created\nas `NOT NULL` in the database for required edges that are not [self-reference](#o2m-same-type). In order to migrate\nexisting foreign key columns, use the [Atlas Migration](migrate.md#atlas-integration) option.\n:::",
      "source_content_hash": "411c080aff2a58286c2d4a2c43f2c8ccecaae7902cb642de632a2e99d0b57f04",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::info\n请注意，从 [v0.10](https://github.com/ent/ent/releases/tag/v0.10.0) 版本开始，对于非[自引用](#o2m-same-type)的必填边，外键列在数据库中会被创建为 `NOT NULL`。如需迁移现有外键列，请使用 [Atlas 迁移](migrate.md#atlas-integration) 选项。\n:::"
      }
    },
    {
      "segment_id": "16757f21",
      "source_content": "## Immutable",
      "source_content_hash": "87d06451d2b3a5764c8f90767a484b1f16405c8567870d1d90164805342f92c2",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 不可变边"
      }
    },
    {
      "segment_id": "0bb7b971",
      "source_content": "Immutable edges are edges that can be set or added only in the creation of the entity.\ni.e., no setters will be generated for the update builders of the entity.",
      "source_content_hash": "0737f9bce5b71723cf7da41deede756df4dff199af09fb4d7dcfbfd92930ebe5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "不可变边是指只能在实体创建时设置或添加的边，即实体更新构建器不会生成对应的 setter 方法。"
      }
    },
    {
      "segment_id": "8e46e25d",
      "source_content": "```go {8}\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"tenant\", Tenant.Type).\n\t\t\tField(\"tenant_id\").\n\t\t\tUnique().\n\t\t\tRequired().\n\t\t\tImmutable(),\n\t}\n}\n```",
      "source_content_hash": "a1bc3e6b5e4593139d7e6ff4566ab0b7bf43889973cac3202f938d6e3ec6985b",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_8e46e25d"
      }
    },
    {
      "segment_id": "9c177fd4",
      "source_content": "## StorageKey",
      "source_content_hash": "cf10673f17ead22234d14781b5f10be5eabbf56ffaa6d15d469c27f9c49da6ad",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 存储键"
      }
    },
    {
      "segment_id": "84e5eabf",
      "source_content": "By default, Ent configures edge storage-keys by the edge-owner (the schema that holds the `edge.To`), and not the by\nback-reference (`edge.From`). This is because back-references are optional and can be removed.",
      "source_content_hash": "350c67649dd4c2be8d256bf2cb59877b82d8e631cb18e3f8e50e3b70da1f3c32",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "默认情况下，Ent 通过边所有者（持有 `edge.To` 的 schema）而非反向引用（`edge.From`）来配置边存储键，因为反向引用是可选的且可能被移除。"
      }
    },
    {
      "segment_id": "818a1d0e",
      "source_content": "In order to use custom storage configuration for edges, use the `StorageKey` method as follows:",
      "source_content_hash": "d8f7fe9d6c120dab89576b4c026dd2612d246085ad0b0145314894aed08f0415",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如需自定义边的存储配置，请按如下方式使用 `StorageKey` 方法："
      }
    },
    {
      "segment_id": "cd101d04",
      "source_content": "```go\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type).\n\t\t\t// Set the column name in the \"pets\" table for O2M relationship.\n\t\t\tStorageKey(edge.Column(\"owner_id\")),\n\t\tedge.To(\"cars\", Car.Type).\n\t\t\t// Set the symbol of the foreign-key constraint for O2M relationship.\n\t\t\tStorageKey(edge.Symbol(\"cars_owner_id\")),\n\t\tedge.To(\"friends\", User.Type).\n\t\t\t// Set the join-table, and the column names for a M2M relationship.\n\t\t\tStorageKey(edge.Table(\"friends\"), edge.Columns(\"user_id\", \"friend_id\")),\n\t\tedge.To(\"groups\", Group.Type).\n\t\t\t// Set the join-table, its column names and the symbols\n\t\t\t// of the foreign-key constraints for M2M relationship.\n\t\t\tStorageKey(\n\t\t\t\tedge.Table(\"groups\"),\n\t\t\t\tedge.Columns(\"user_id\", \"group_id\"),\n\t\t\t\tedge.Symbols(\"groups_id1\", \"groups_id2\")\n\t\t\t),\n\t}\n}\n```",
      "source_content_hash": "c2dc1c5cd21c6ffc81cd9b0091eec63e20fa70dfb2f3db0749f7376aa87a8206",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_cd101d04"
      }
    },
    {
      "segment_id": "0c3b42c7",
      "source_content": "## Struct Tags",
      "source_content_hash": "70effbb80a6f160b3e8d1ad169ceeb4c012de2021f553e6c62062ba5310e3699",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 结构体标签"
      }
    },
    {
      "segment_id": "324793d0",
      "source_content": "Custom struct tags can be added to the generated entities using the `StructTag`\nmethod. Note that if this option was not provided, or provided and did not\ncontain the `json` tag, the default `json` tag will be added with the field name.",
      "source_content_hash": "3a2141e85f9371a1d6243906e9afd1425ef0e943c7760d772b6d5feeb35ce6c6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可通过 `StructTag` 方法向生成的实体添加自定义结构体标签。注意：若未提供此选项，或提供的标签不包含 `json` 标签，则会自动添加以字段名命名的默认 `json` 标签。"
      }
    },
    {
      "segment_id": "2653d46d",
      "source_content": "```go\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type).\n\t\t\t// Override the default json tag \"pets\" with \"owner\" for O2M relationship.\n\t\t\tStructTag(`json:\"owner\"`),\n\t}\n}\n```",
      "source_content_hash": "db866037bd320b7cd219f3d04c29390c3fed958878037800e5d206237a94dc45",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_2653d46d"
      }
    },
    {
      "segment_id": "a8149b2a",
      "source_content": "## Indexes",
      "source_content_hash": "10f48fa48049ca916a844181e3c7553ce5ee3355e0ed58b7af77e0ea607c7e94",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 索引"
      }
    },
    {
      "segment_id": "6360aa1c",
      "source_content": "Indexes can be defined on multi fields and some types of edges as well.\nHowever, you should note, that this is currently an SQL-only feature.",
      "source_content_hash": "39138201d958acff0c7eafaa101cb267479a0617caa30499c533feb28944b535",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可在多字段和某些边类型上定义索引，但需注意当前这是仅限 SQL 的功能。"
      }
    },
    {
      "segment_id": "612452d7",
      "source_content": "Read more about this in the [Indexes](schema-indexes.md) section.",
      "source_content_hash": "082b099df1915c042e5113813ceaaaa48d6d2f7634676ef8a807e2f544e85e0f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "详见 [索引](schema-indexes.md) 章节。"
      }
    },
    {
      "segment_id": "c54d50c9",
      "source_content": "## Comments",
      "source_content_hash": "ccd37303241bac95b3a5112bac2bf0c8d1198c2d5477acd33e16ec57ce85dfb6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 注释"
      }
    },
    {
      "segment_id": "3902e148",
      "source_content": "A comment can be added to the edge using the `.Comment()` method. This comment\nappears before the edge in the generated entity code. Newlines are supported \nusing the `\\n` escape sequence.",
      "source_content_hash": "a485ae014a248e115854612daa7ccdc38093b58e8264d3bfd9a2ab00bd24341b",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可通过 `.Comment()` 方法为边添加注释。该注释会出现在生成实体代码中对应边的上方，支持使用 `\\n` 转义序列换行。"
      }
    },
    {
      "segment_id": "a1d108d5",
      "source_content": "```go\n// Edges of the User.\nfunc (User) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"pets\", Pet.Type).\n\t\t\tComment(\"Pets that this user is responsible for taking care of.\\n\" + \n\t\t\t\t\"May be zero to many, depending on the user.\")\n\t}\n}\n```",
      "source_content_hash": "c4fc342c8c20b42b969675644072f63f973579f9be766b9893066351ddf32078",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_a1d108d5"
      }
    },
    {
      "segment_id": "ff0ec729",
      "source_content": "## Annotations",
      "source_content_hash": "82240f01a68b4c2d7f31c325f0b755f82e1304978e68685ff85b2c545f7708aa",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 注解"
      }
    },
    {
      "segment_id": "0bcd31ed",
      "source_content": "`Annotations` is used to attach arbitrary metadata to the edge object in code generation.\nTemplate extensions can retrieve this metadata and use it inside their templates.",
      "source_content_hash": "f734c8df75865532e8b6665e7dee47fcde2122269c1587fddd7d514fac5ead2e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`Annotations` 用于在代码生成时为边对象附加任意元数据。模板扩展可以获取这些元数据并在模板中使用。"
      }
    },
    {
      "segment_id": "3fa431b1",
      "source_content": "Note that the metadata object must be serializable to a JSON raw value (e.g. struct, map or slice).",
      "source_content_hash": "8e0874ca0c3b2a252746d25bfa1026d7859a9a4a661bae8456e1d297e9ef5fff",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意元数据对象必须可序列化为 JSON 原始值（如结构体、map 或切片）。"
      }
    },
    {
      "segment_id": "78d73727",
      "source_content": "```go\n// Pet schema.\ntype Pet struct {\n\tent.Schema\n}\n\n// Edges of the Pet.\nfunc (Pet) Edges() []ent.Edge {\n\treturn []ent.Edge{\n\t\tedge.To(\"owner\", User.Type).\n\t\t\tRef(\"pets\").\n\t\t\tUnique().\n\t\t\tAnnotations(entgql.RelayConnection()),\n\t}\n}\n```",
      "source_content_hash": "4a29c16a5b758baa7329fcc4477ad3f371ce880838c79d99edca3e4614e417be",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_78d73727"
      }
    },
    {
      "segment_id": "6fba7bd8",
      "source_content": "Read more about annotations and their usage in templates in the [template doc](templates.md#annotations).",
      "source_content_hash": "e75d3ba470b0f66082014e1e75c0132ac30988a006f885f787e975c4eb1c43cf",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "关于注解及其在模板中的用法，详见 [模板文档](templates.md#annotations)。"
      }
    },
    {
      "segment_id": "460891bc",
      "source_content": "## Naming Convention",
      "source_content_hash": "7728a7682eded222882b9dcee4830f27e5a69d2f7847cbd5c4ea662d1c5a1232",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 命名规范"
      }
    },
    {
      "segment_id": "8b7810f1",
      "source_content": "By convention edge names should use `snake_case`. The corresponding struct fields generated by `ent` will follow the Go convention\nof using `PascalCase`. In cases where `PascalCase` is desired, you can do so with the `StorageKey` or `StructTag` methods.",
      "source_content_hash": "7bc4ef8206dd21a10f4c73cb46568a206e2dd5b6b064f554968af7ba7a0106ec",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "按照惯例，边名称应使用 `snake_case` 格式。Ent 生成的对应结构体字段将遵循 Go 语言的 `PascalCase` 惯例。如需使用 `PascalCase` 格式，可通过 `StorageKey` 或 `StructTag` 方法实现。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/current/schema-edges.mdx",
  "last_updated_timestamp": "2025-06-05T15:16:18.682963+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "c1df5249a53099a567cb5e21f3d672ae7906d3cd29ada9efbb6d05712282e79b"
  }
}