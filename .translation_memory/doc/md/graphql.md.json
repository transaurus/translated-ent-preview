{
  "source_file_path_relative_to_docusaurus_root": "../md/graphql.md",
  "source_file_content_hash": "24edfbd80333caac1de211a57ea9f13618f48ed08243f510c2e237c5387d755c",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: graphql\ntitle: GraphQL Integration\n---",
      "source_content_hash": "4caeaccaa03e06d9b55d78372b0c9a4cda948b0f649e4fdb7b29e7ba532149f7",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "The Ent framework supports GraphQL using the [99designs/gqlgen](https://github.com/99designs/gqlgen) library and\nprovides various integrations, such as:",
      "source_content_hash": "546c64ab284ecb7b60ebf7cdef98ee16874468c7747b20385cf8fa8e854aa566",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Ent框架通过[99designs/gqlgen](https://github.com/99designs/gqlgen)库提供GraphQL支持，主要集成功能包括："
      }
    },
    {
      "segment_id": "df80d009",
      "source_content": "1. Generating a GraphQL schema for nodes and edges defined in an Ent schema.\n2. Auto-generated `Query` and `Mutation` resolvers and provide seamless integration with the [Relay framework](https://relay.dev/).\n3. Filtering, pagination (including nested) and compliant support with the [Relay Cursor Connections Spec](https://relay.dev/graphql/connections.htm).\n4. Efficient [field collection](tutorial-todo-gql-field-collection.md) to overcome the N+1 problem without requiring data\n   loaders.\n5. [Transactional mutations](tutorial-todo-gql-tx-mutation.md) to ensure consistency in case of failures. ",
      "source_content_hash": "7c40b0c66f6e45cac1dd97c4134d7a173920173c4cf1e8c2df372e9b42ae8208",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 为Ent模式中定义的节点和边自动生成GraphQL模式\n2. 自动生成`Query`和`Mutation`解析器，并与[Relay框架](https://relay.dev/)无缝集成\n3. 支持过滤、分页（包括嵌套分页）并兼容[Relay游标连接规范](https://relay.dev/graphql/connections.htm)\n4. 高效的[字段收集](tutorial-todo-gql-field-collection.md)机制，无需数据加载器即可解决N+1问题\n5. [事务性变更](tutorial-todo-gql-tx-mutation.md)确保失败时的数据一致性"
      }
    },
    {
      "segment_id": "cf898102",
      "source_content": "Check out the website's [GraphQL tutorial](tutorial-todo-gql.mdx#basic-setup) for more information.",
      "source_content_hash": "061cb3dbf3e2e29c5c82af0864ed635af635acdff9c2954ce950059f4b0d1ddb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更多信息请参阅官网的[GraphQL教程](tutorial-todo-gql.mdx#basic-setup)"
      }
    },
    {
      "segment_id": "d350c018",
      "source_content": "## Quick Introduction",
      "source_content_hash": "a5373bee533897c34d3febf677d17dd349546271bce58b6df7ba7e0b1b6fc074",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 快速入门"
      }
    },
    {
      "segment_id": "1acb9a05",
      "source_content": "In order to enable the [`entgql`](https://github.com/ent/contrib/tree/master/entgql) extension to your\nproject, you need to use the `entc` (ent codegen) package as described [here](code-gen.md#use-entc-as-a-package).\nFollow these 3 steps to enable it to your project:",
      "source_content_hash": "4493f8c51f01d614846edeb4022ca4b32e3fe2d9b8e62043e50abda9e8fe0541",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "启用[`entgql`](https://github.com/ent/contrib/tree/master/entgql)扩展需要按照[文档](code-gen.md#use-entc-as-a-package)使用`entc`代码生成包，具体分三步："
      }
    },
    {
      "segment_id": "98cfbd53",
      "source_content": "1\\. Create a new Go file named `ent/entc.go`, and paste the following content:",
      "source_content_hash": "b971332f476120193268716af1680d94a61e3ac10d378ce794479eb15c2137f9",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "1\\. 创建`ent/entc.go`文件并写入以下内容："
      }
    },
    {
      "segment_id": "a89b882e",
      "source_content": "```go title=\"ent/entc.go\"\n// +build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n\t\"entgo.io/contrib/entgql\"\n)\n\nfunc main() {\n\tex, err := entgql.NewExtension()\n\tif err != nil {\n\t\tlog.Fatalf(\"creating entgql extension: %v\", err)\n\t}\n\tif err := entc.Generate(\"./schema\", &gen.Config{}, entc.Extensions(ex)); err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```",
      "source_content_hash": "d0a028649e7ed9bbf1188da110fbc4e596ea04e8ae17a38af973769814997037",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_a89b882e"
      }
    },
    {
      "segment_id": "a44047a5",
      "source_content": "2\\. Edit the `ent/generate.go` file to execute the `ent/entc.go` file:",
      "source_content_hash": "a43a5f1353e561d1f7ec6cef372b2d96df99509481252a924d1bb20f80940f43",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "2\\. 修改`ent/generate.go`文件来执行`ent/entc.go`："
      }
    },
    {
      "segment_id": "64b6f348",
      "source_content": "```go title=\"ent/generate.go\"\npackage ent\n\n//go:generate go run -mod=mod entc.go\n```",
      "source_content_hash": "f87460630544c392e2b374efc01e30dffdcf71999be137dd8339a110a437849a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_64b6f348"
      }
    },
    {
      "segment_id": "e536ea0d",
      "source_content": "Note that `ent/entc.go` is ignored using a build tag, and it's executed by the `go generate` command\nthrough the `generate.go` file. The full example can be found in the [ent/contrib repository](https://github.com/ent/contrib/blob/master/entgql/internal/todo).",
      "source_content_hash": "17247cb717f4b3dc74f11de2688ba685e5ff72d7d9aee7bcadd19f077ea1bfd7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意`ent/entc.go`通过构建标签被忽略，实际由`generate.go`在`go generate`时调用。完整示例参见[ent/contrib仓库](https://github.com/ent/contrib/blob/master/entgql/internal/todo)"
      }
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "3\\. Run codegen for your ent project:",
      "source_content_hash": "2b0568746d66897546a274be20b49f9128b39b8eb2e52cb89a6ed0c885836a44",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "3\\. 运行Ent项目代码生成："
      }
    },
    {
      "segment_id": "5a41b4fb",
      "source_content": "```console\ngo generate ./...\n```",
      "source_content_hash": "3b1b797ac1e2e1e33c2e6be0404437245718435d754a214abccbe1f3a73b7d04",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_5a41b4fb"
      }
    },
    {
      "segment_id": "06e24cc0",
      "source_content": "After running codegen, the following add-ons will be added to your project.",
      "source_content_hash": "57a9c430450956148e67841f4c48122529298d5a477629be02b80c8fe31e5662",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "代码生成完成后，项目将获得以下新增功能"
      }
    },
    {
      "segment_id": "ee8401db",
      "source_content": "## Node API",
      "source_content_hash": "2f0062a941f48846e57d9e893efe4bfb3dbeee41063b21e26c29c7583e22cc59",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 节点API"
      }
    },
    {
      "segment_id": "147e8550",
      "source_content": "A new file named `ent/gql_node.go` was created that implements the [Relay Node interface](https://relay.dev/graphql/objectidentification.htm).",
      "source_content_hash": "c0589527318d02eee3c74d1bb9c46fe59bbe1cec879785fad37ee42e0d01937f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "新增的`ent/gql_node.go`文件实现了[Relay节点接口](https://relay.dev/graphql/objectidentification.htm)"
      }
    },
    {
      "segment_id": "883231d4",
      "source_content": "In order to use the new generated `ent.Noder` interface in the [GraphQL resolver](https://gqlgen.com/reference/resolvers/),\nadd the `Node` method to the query resolver, and look at the [configuration](#gql-configuration) section to understand\nhow to use it.",
      "source_content_hash": "79a0bf3a2c8fed366da8f652f888694bbfdfa22a989cd2c58831126c65f96b57",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "要在[GraphQL解析器](https://gqlgen.com/reference/resolvers/)中使用生成的`ent.Noder`接口，需在查询解析器中添加`Node`方法，具体配置方法参见[配置章节](#gql-configuration)"
      }
    },
    {
      "segment_id": "d0dd855b",
      "source_content": "If you are using the [Universal IDs](migrate.md#universal-ids) option in the schema migration, the NodeType is derived\nfrom the id value and can be used as follows:",
      "source_content_hash": "9c5b86ea4e1ba9033fceee606e0ae8b708f92006f2b134eb41003066055c05fa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若在模式迁移中使用[全局ID](migrate.md#universal-ids)选项，节点类型可从ID值派生："
      }
    },
    {
      "segment_id": "9f4336b3",
      "source_content": "```go\nfunc (r *queryResolver) Node(ctx context.Context, id int) (ent.Noder, error) {\n\treturn r.client.Noder(ctx, id)\n}\n```",
      "source_content_hash": "814f295ffa5bdcb053f6a5b1da600e847ecf3890fd5bbac61b37983ae4455130",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_9f4336b3"
      }
    },
    {
      "segment_id": "8126f763",
      "source_content": "However, if you use a custom format for the global unique identifiers, you can control the NodeType as follows:",
      "source_content_hash": "ce68ccd0363b9be8fd31541c9b3df8de620a6cca452176381829ac34d07a9458",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用自定义全局ID格式，可通过以下方式控制节点类型："
      }
    },
    {
      "segment_id": "f6563256",
      "source_content": "```go\nfunc (r *queryResolver) Node(ctx context.Context, guid string) (ent.Noder, error) {\n\ttyp, id := parseGUID(guid)\n\treturn r.client.Noder(ctx, id, ent.WithFixedNodeType(typ))\n}\n```",
      "source_content_hash": "f6d1edc60b7e77eeb9a40ca5fb8a0b289d60e0f98fff4157c9034d72d49dce2d",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_f6563256"
      }
    },
    {
      "segment_id": "b10963d7",
      "source_content": "## GQL Configuration",
      "source_content_hash": "e4479fc267e5a9a32f27fd12b4914f42818ae8999ed497089b7595f280ee5474",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## GraphQL配置"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "Here's a configuration example for a todo app as exists in [ent/contrib/entgql/todo](https://github.com/ent/contrib/tree/master/entgql/internal/todo).",
      "source_content_hash": "9d3623dcee72f67f3a18fa2ac79b113bed3cb301b8cf993ee57e0e8646b487a1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下是[ent/contrib/entgql/todo](https://github.com/ent/contrib/tree/master/entgql/internal/todo)中的待办应用配置示例："
      }
    },
    {
      "segment_id": "efbe5e3f",
      "source_content": "```yaml\nschema:\n  - todo.graphql\n\nresolver:\n  # Tell gqlgen to generate resolvers next to the schema file.\n  layout: follow-schema\n  dir: .\n\n# gqlgen will search for any type names in the schema in the generated\n# ent package. If they match it will use them, otherwise it will new ones.\nautobind:\n  - entgo.io/contrib/entgql/internal/todo/ent\n\nmodels:\n  ID:\n    model:\n      - github.com/99designs/gqlgen/graphql.IntID\n  Node:\n    model:\n      # ent.Noder is the new interface generated by the Node template.\n      - entgo.io/contrib/entgql/internal/todo/ent.Noder\n```",
      "source_content_hash": "4769a0f343c8aa949b934fc487a6503a17bfba0fe58085c3a5fe95f958632ce8",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_efbe5e3f"
      }
    },
    {
      "segment_id": "ed644f52",
      "source_content": "## Pagination",
      "source_content_hash": "bdf528f54d45fa2fdc68cdb5c4886843c7022178f3c222d75af8075d8c069104",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 分页"
      }
    },
    {
      "segment_id": "b9331170",
      "source_content": "The pagination template adds a pagination support according to the _Relay Cursor Connections Spec_. More info\nabout the Relay Spec can be found in its [website](https://relay.dev/graphql/connections.htm).",
      "source_content_hash": "b58395f518322db9fbb5479382b31620417e5c2b0aa49b49cc3274733a6822cc",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "分页模板根据《Relay游标连接规范》实现分页功能，规范详情参见[官网](https://relay.dev/graphql/connections.htm)"
      }
    },
    {
      "segment_id": "4dd6a631",
      "source_content": "## Connection Ordering",
      "source_content_hash": "e3de55bf36e70b4951dfb3a607fa5d544cd6a2f17029c80065788b6f428cdf9e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 连接排序"
      }
    },
    {
      "segment_id": "f45239ba",
      "source_content": "The ordering option allows us to apply an ordering on the edges returned from a connection.",
      "source_content_hash": "0b5278475aa4d31a9b83cbb7cc874ff4d68e356d5cc8c17abaf28fabcf2bbcfe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "排序功能允许对连接返回的边进行排序"
      }
    },
    {
      "segment_id": "8f1c1cd6",
      "source_content": "### Usage Notes",
      "source_content_hash": "134b5480f9ec2323c5c9ae3dcf4528d91bf5444400e7d32f17c93de51843dfe3",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用说明"
      }
    },
    {
      "segment_id": "c7ff42af",
      "source_content": "- The generated types will be `autobind`ed to GraphQL types if a naming convention is preserved (see example below).\n- Ordering fields should normally be [indexed](schema-indexes.md) to avoid full table DB scan.\n- Pagination queries can be sorted by a single field (no order by ... then by ... semantics).",
      "source_content_hash": "c931feeaa2264c0716f4528589311d56445f935a1487234c2ed4311f70611c6c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- 生成的类型将自动绑定（`autobind`）到 GraphQL 类型（需遵循命名约定，参见下方示例）。\n- 排序字段通常应建立[索引](schema-indexes.md)以避免全表扫描。\n- 分页查询仅支持按单个字段排序（不支持多字段组合排序语义）。"
      }
    },
    {
      "segment_id": "5dba1427",
      "source_content": "### Example",
      "source_content_hash": "b9b5449b4e5cc2bf7390d309862a49a3dbf04030ec7257d36932125bd4e08256",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 示例"
      }
    },
    {
      "segment_id": "534ac82e",
      "source_content": "Let's go over the steps needed in order to add ordering to an existing GraphQL type.\nThe code example is based on a todo-app that can be found in [ent/contrib/entql/todo](https://github.com/ent/contrib/tree/master/entgql/internal/todo).",
      "source_content_hash": "7881c95ffe8b9620aa76a78fbd3ae870d7dcac8f0b33efe07e71c817423beb2a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下是为现有 GraphQL 类型添加排序功能的具体步骤。代码示例基于 [ent/contrib/entql/todo](https://github.com/ent/contrib/tree/master/entgql/internal/todo) 中的待办应用。"
      }
    },
    {
      "segment_id": "af843cee",
      "source_content": "### Defining order fields in ent/schema",
      "source_content_hash": "a6d47ff914f1c79c3fd1a2e873d9516697e9ffa2d71922addb8f09ac4ede3e12",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 在 ent/schema 中定义排序字段"
      }
    },
    {
      "segment_id": "681ef526",
      "source_content": "Ordering can be defined on any comparable field of ent by annotating it with `entgql.Annotation`.\nNote that the given `OrderField` name must match its enum value in graphql schema.",
      "source_content_hash": "2e8774a45f158b7b2b1217075cbb57e369ed1db94a90060a2fd43ca233c7baa5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "通过添加 `entgql.Annotation` 注解，可在任意可比较的 ent 字段上定义排序。注意指定的 `OrderField` 名称必须与 GraphQL 模式中的枚举值匹配。"
      }
    },
    {
      "segment_id": "eb25bb8c",
      "source_content": "```go\nfunc (Todo) Fields() []ent.Field {\n    return []ent.Field{\n\t    field.Time(\"created_at\").\n\t\t\tDefault(time.Now).\n\t\t\tImmutable().\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"CREATED_AT\"),\n\t\t\t),\n\t\tfield.Enum(\"status\").\n\t\t\tNamedValues(\n\t\t\t\t\"InProgress\", \"IN_PROGRESS\",\n\t\t\t\t\"Completed\", \"COMPLETED\",\n\t\t\t).\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"STATUS\"),\n\t\t\t),\n\t\tfield.Int(\"priority\").\n\t\t\tDefault(0).\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"PRIORITY\"),\n\t\t\t),\n\t\tfield.Text(\"text\").\n\t\t\tNotEmpty().\n\t\t\tAnnotations(\n\t\t\t\tentgql.OrderField(\"TEXT\"),\n\t\t\t),\n    }\n}\n```",
      "source_content_hash": "d1a7c83a4b283a95c145b6d010d4a1d8e1693f1e6f6f606b90129e61e20e4c27",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_eb25bb8c"
      }
    },
    {
      "segment_id": "61a78cbe",
      "source_content": "That's all the schema changes required, make sure to run `go generate` to apply them.",
      "source_content_hash": "c69e27595b38fcc577500c71fd11bb10a70df7ec8bb3f543e190262727466c19",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完成以上模式变更后，请运行 `go generate` 命令使其生效。"
      }
    },
    {
      "segment_id": "2b5df263",
      "source_content": "### Define ordering types in GraphQL schema",
      "source_content_hash": "36b6e2a4f70225ca054863cea19187c84b0f6ffd5445d98e6375dbf302b6361a",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 在 GraphQL 模式中定义排序类型"
      }
    },
    {
      "segment_id": "e29bd639",
      "source_content": "Next we need to define the ordering types in graphql schema:",
      "source_content_hash": "7d91ec71a6cbf622f67020cd7d6688ccd197dd836db8147b936f453a8d757397",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "接下来需要在 GraphQL 模式中定义排序类型："
      }
    },
    {
      "segment_id": "8185786b",
      "source_content": "```graphql\nenum OrderDirection {\n  ASC\n  DESC\n}\n\nenum TodoOrderField {\n  CREATED_AT\n  PRIORITY\n  STATUS\n  TEXT\n}\n\ninput TodoOrder {\n  direction: OrderDirection!\n  field: TodoOrderField\n}\n```",
      "source_content_hash": "3fb69763be4d614614c8be8338d1716e50bad40b1c5e14acda1841d53b23fe26",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_8185786b"
      }
    },
    {
      "segment_id": "6e5d54a8",
      "source_content": "Note that the naming must take the form of `<T>OrderField` / `<T>Order` for `autobind`ing to the generated ent types.\nAlternatively [@goModel](https://gqlgen.com/config/#inline-config-with-directives) directive can be used for manual type binding.",
      "source_content_hash": "adddcf532b08181639bbe7d959eb13a59d6fedad0c16fba60c33b485797f5e23",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "注意命名必须遵循 `<T>OrderField` / `<T>Order` 格式以实现与生成 ent 类型的自动绑定。也可使用 [@goModel](https://gqlgen.com/config/#inline-config-with-directives) 指令手动绑定类型。"
      }
    },
    {
      "segment_id": "a9de5d69",
      "source_content": "### Adding orderBy argument to the pagination query",
      "source_content_hash": "b2fdfb00ec624433fb0dd07f5a51cc13a14b012655a9ae2974987ac1e949872e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 为分页查询添加 orderBy 参数"
      }
    },
    {
      "segment_id": "cf50de8a",
      "source_content": "```graphql\ntype Query {\n  todos(\n    after: Cursor\n    first: Int\n    before: Cursor\n    last: Int\n    orderBy: TodoOrder\n  ): TodoConnection!\n}\n```",
      "source_content_hash": "bf9231bc87f84ca5277d19765f81b828dd0f89f12fb4c80131812090e5126278",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_cf50de8a"
      }
    },
    {
      "segment_id": "d75361e3",
      "source_content": "That's all for the GraphQL schema changes, let's run `gqlgen` code generation.",
      "source_content_hash": "2f5e0722720284a50f9d4f9f6127c7953108110b3f51dd1f5bf5c38d01ceba81",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完成 GraphQL 模式变更后，运行 `gqlgen` 代码生成命令。"
      }
    },
    {
      "segment_id": "3e795db3",
      "source_content": "### Update the underlying resolver",
      "source_content_hash": "df553f2b45d71e2c0510df53d9a6d647318927ee1e9c26e4d4c233d039a497fc",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 更新底层解析器"
      }
    },
    {
      "segment_id": "5eedf0a1",
      "source_content": "Head over to the Todo resolver and update it to pass `orderBy` argument to `.Paginate()` call:",
      "source_content_hash": "d03101011fd5796dfff191ee228d68f2c3aeb8e33dee23b52f6423bef760c239",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在 Todo 解析器中更新代码，将 `orderBy` 参数传递给 `.Paginate()` 调用："
      }
    },
    {
      "segment_id": "93bf74a6",
      "source_content": "```go\nfunc (r *queryResolver) Todos(ctx context.Context, after *ent.Cursor, first *int, before *ent.Cursor, last *int, orderBy *ent.TodoOrder) (*ent.TodoConnection, error) {\n\treturn r.client.Todo.Query().\n\t\tPaginate(ctx, after, first, before, last,\n\t\t\tent.WithTodoOrder(orderBy),\n\t\t)\n}\n```",
      "source_content_hash": "f880bd98f025891d8438b849792fe5c862e20fa44be770b371815a2f65e918f1",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_93bf74a6"
      }
    },
    {
      "segment_id": "79f90fe4",
      "source_content": "### Use in GraphQL",
      "source_content_hash": "a537764c1e59a4188e16e49af913a0c2e2da1f946934c0dd8013b33483a14a57",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 在 GraphQL 中使用"
      }
    },
    {
      "segment_id": "d5244955",
      "source_content": "```graphql\nquery {\n    todos(first: 3, orderBy: {direction: DESC, field: TEXT}) {\n        edges {\n            node {\n                text\n            }\n        }\n    }\n}\n```",
      "source_content_hash": "48ee59a2c85457662c669fbb5cdf2ebac43db88fc22e5a130cf556e17655546a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_d5244955"
      }
    },
    {
      "segment_id": "a9950191",
      "source_content": "## Fields Collection",
      "source_content_hash": "b5e0ff129657431ae0175c24f1675e8b8040429ecf2b5d8f4b9ac4c3db522e26",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 字段收集"
      }
    },
    {
      "segment_id": "d3f13bf4",
      "source_content": "The collection template adds support for automatic [GraphQL fields collection](https://spec.graphql.org/June2018/#sec-Field-Collection)\nfor ent-edges using eager-loading. That means, if a query asks for nodes and their edges, entgql will add automatically [`With<E>`](eager-load.mdx#api)\nsteps to the root query, and as a result, the client will execute constant number of queries to the database - and it works recursively.",
      "source_content_hash": "00c6d5948be6c969d0ffa55594174192435f46cc175ef9021cb72b414532a382",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "该模板通过预加载机制为 ent 边关系提供自动化的 [GraphQL 字段收集](https://spec.graphql.org/June2018/#sec-Field-Collection)支持。当查询请求节点及其边关系时，entgql 会自动在根查询中添加 [`With<E>`](eager-load.mdx#api) 步骤，最终客户端将以恒定数量的数据库查询完成操作（支持递归处理）。"
      }
    },
    {
      "segment_id": "b0c30ab4",
      "source_content": "For example, given this GraphQL query:",
      "source_content_hash": "bb97171d1181cc45ad945b5d2e2fbee5004a69b37d74be75fc0abcb7c844ded1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "例如对于以下 GraphQL 查询："
      }
    },
    {
      "segment_id": "fc50cfb2",
      "source_content": "```graphql\nquery {\n  users(first: 100) {\n    edges {\n      node {\n        photos {\n          link\n        }\n        posts {\n          content\n          comments {\n            content\n          }\n        }\n      }\n    }\n  }\n}\n```",
      "source_content_hash": "23e737a6fbcf4e536cc0545742ef185a061218022c4b564f22f5f72a6d508788",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_fc50cfb2"
      }
    },
    {
      "segment_id": "216a8ee1",
      "source_content": "The client will execute 1 query for getting the users, 1 for getting the photos, and another 2 for getting the posts,\nand their comments (4 in total). This logic works both for root queries/resolvers and for the node(s) API.",
      "source_content_hash": "d1541155b25b7b3ae301c96a929ea9e5d14c1f63b110c2f9743b556b9a109d9d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "客户端将执行：1 次查询获取用户、1 次获取照片、2 次获取帖子及其评论（总计 4 次）。此逻辑同时适用于根查询/解析器和节点 API。"
      }
    },
    {
      "segment_id": "846134ef",
      "source_content": "### Schema configuration",
      "source_content_hash": "c9c33e9d517e0d97d5d8e22899d451da19d996cba7348bc1ffce7fa3a21b8f0b",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 模式配置"
      }
    },
    {
      "segment_id": "53e725dc",
      "source_content": "In order to configure this option to specific edges, use the `entgql.Annotation` as follows:",
      "source_content_hash": "f4cda6b45f8d13ec8720e9aa6169f04b00491fd144a23d87cd605eacbcda3392",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "通过 `entgql.Annotation` 注解可为特定边关系启用此功能："
      }
    },
    {
      "segment_id": "79d8cec2",
      "source_content": "```go\nfunc (Todo) Edges() []ent.Edge {\n    return []ent.Edge{\n        edge.To(\"children\", Todo.Type).\n            Annotations(entgql.Bind()).\n            From(\"parent\").\n            // Bind implies the edge name in graphql schema is\n            // equivalent to the name used in ent schema.\n            Annotations(entgql.Bind()).\n            Unique(),\n        edge.From(\"owner\", User.Type).\n            Ref(\"tasks\").\n            // Map edge names as defined in graphql schema.\n            Annotations(entgql.MapsTo(\"taskOwner\")),\n    }\n}\n```",
      "source_content_hash": "50ef99996440c46c1d587a26f1fc651018c1b268a8e912d45ab76de293d0d5eb",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_79d8cec2"
      }
    },
    {
      "segment_id": "295e85da",
      "source_content": "### Usage and Configuration",
      "source_content_hash": "f91581f382e3cea9875e68cd541b237e2bbf9c64d41eb040a7b3dd1137922c69",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用与配置"
      }
    },
    {
      "segment_id": "a5a28988",
      "source_content": "The GraphQL extension generates also edge-resolvers for the nodes under the `gql_edge.go` file as follows:",
      "source_content_hash": "b3fd788afc60e8cb1c4aa8f8d94ed87357f36d8713e1d719f6ac669ed84d003c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "GraphQL 扩展还会在 `gql_edge.go` 文件中生成节点边解析器："
      }
    },
    {
      "segment_id": "be1986a6",
      "source_content": "```go\nfunc (t *Todo) Children(ctx context.Context) ([]*Todo, error) {\n\tresult, err := t.Edges.ChildrenOrErr()\n\tif IsNotLoaded(err) {\n\t\tresult, err = t.QueryChildren().All(ctx)\n\t}\n\treturn result, err\n}\n```",
      "source_content_hash": "ff0ae77e8f217b309a68caac2bde4de6741d050a06e10a2338357a9c0c7a22de",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_be1986a6"
      }
    },
    {
      "segment_id": "1f92e934",
      "source_content": "However, if you need to explicitly write these resolvers by hand, you can add the\n[`forceResolver`](https://gqlgen.com/master/config#inline-config-with-directives) option to your GraphQL schema:",
      "source_content_hash": "56bb69ced01b30647a92a595ea08ddd3cb120b1293dc206dbe56cf32d738c218",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "如需手动编写解析器，可在 GraphQL 模式中添加 [`forceResolver`](https://gqlgen.com/master/config#inline-config-with-directives) 选项："
      }
    },
    {
      "segment_id": "36948d49",
      "source_content": "```graphql\ntype Todo implements Node {\n  id: ID!\n  children: [Todo]! @goField(forceResolver: true)\n}\n```",
      "source_content_hash": "f5aaeac4d1abb9625ce9e429c50a3cdbae521aca3f2c1a774b5b7115aefe775c",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_36948d49"
      }
    },
    {
      "segment_id": "b8954ec9",
      "source_content": "Then, you can implement it on your type resolver.",
      "source_content_hash": "8af8ca710547e42f3b58618a99e6ab917c90fbd8a50daec38e0012b9c74093b2",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "然后在类型解析器中实现对应逻辑。"
      }
    },
    {
      "segment_id": "e0b4ec91",
      "source_content": "```go\nfunc (r *todoResolver) Children(ctx context.Context, obj *ent.Todo) ([]*ent.Todo, error) {\n\t// Do something here.\n\treturn obj.Edges.ChildrenOrErr()\n}\n```",
      "source_content_hash": "e3d127c752a0fafef4df8bfa9e6c86f7a031f70df9b8ba157b59c6554b1ccf85",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e0b4ec91"
      }
    },
    {
      "segment_id": "4632603c",
      "source_content": "## Enum Implementation",
      "source_content_hash": "fe674f291c67d726f65575200797a2a582b7efa5b5703321ad838ca9a6b3ef9e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 枚举实现"
      }
    },
    {
      "segment_id": "9802de48",
      "source_content": "The enum template implements the MarshalGQL/UnmarshalGQL methods for enums generated by ent.",
      "source_content_hash": "1b7660ee544d043f2410d6abae967d1aff297006fa2bf244292e932617366455",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "该模板为 ent 生成的枚举实现了 MarshalGQL/UnmarshalGQL 方法。"
      }
    },
    {
      "segment_id": "f8631fbf",
      "source_content": "## Transactional Mutations",
      "source_content_hash": "ed407035a6886325ee138b443b9977e21bedb356bd44bf14d3c3843af2fbe2b1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 事务性变更"
      }
    },
    {
      "segment_id": "a6efb0d1",
      "source_content": "The `entgql.Transactioner` handler executes each GraphQL mutation in a transaction. The injected client for the resolver\nis a [transactional `ent.Client`](transactions.md#transactional-client).\nHence, code that uses `ent.Client` won't need to be changed. In order to use it, follow these steps:",
      "source_content_hash": "e571bca9ae90e3b5c180f61ddc682688f8e55a8436a721e2b042fefb83f5489c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`entgql.Transactioner` 处理器会将每个 GraphQL 变更操作封装在事务中执行。注入到解析器的客户端是一个[事务型 `ent.Client`](transactions.md#transactional-client)。因此，使用 `ent.Client` 的代码无需任何修改。具体使用步骤如下："
      }
    },
    {
      "segment_id": "647ea627",
      "source_content": "1\\. In the GraphQL server initialization, use the `entgql.Transactioner` handler as follows:",
      "source_content_hash": "bf6c0bb39d259c7cf76c6f298c3bf51f0bbace4051f12fe77015723431cf6a6f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "1\\. 在 GraphQL 服务器初始化时，按如下方式使用 `entgql.Transactioner` 处理器："
      }
    },
    {
      "segment_id": "73ce3ba5",
      "source_content": "```go\nsrv := handler.NewDefaultServer(todo.NewSchema(client))\nsrv.Use(entgql.Transactioner{TxOpener: client})\n```",
      "source_content_hash": "60d76547455398b2192583237390afd8c1cdf2f62f59fcffce298521c195e1c4",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_73ce3ba5"
      }
    },
    {
      "segment_id": "dbd18971",
      "source_content": "2\\. Then, in the GraphQL mutations, use the client from context as follows:",
      "source_content_hash": "05e22a4176429ca034e039b08466a3dc30ede6ccdf7c438e3eb837832d8c8a38",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "2\\. 然后在 GraphQL 变更操作中，通过上下文获取客户端使用："
      }
    },
    {
      "segment_id": "e85c5032",
      "source_content": "```go\nfunc (mutationResolver) CreateTodo(ctx context.Context, todo TodoInput) (*ent.Todo, error) {\n\tclient := ent.FromContext(ctx)\n\treturn client.Todo.\n\t\tCreate().\n\t\tSetStatus(todo.Status).\n\t\tSetNillablePriority(todo.Priority).\n\t\tSetText(todo.Text).\n\t\tSetNillableParentID(todo.Parent).\n\t\tSave(ctx)\n}\n```",
      "source_content_hash": "361546ebe0c3d01c1bbaa3b45f671dacc5b41803e5948e8237fb6af547006605",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e85c5032"
      }
    },
    {
      "segment_id": "6558c87d",
      "source_content": "## Examples",
      "source_content_hash": "0d19ab46319785768005536313f02bd3b9b779aaed82eeac5bf7a7f796ad3ef1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 示例"
      }
    },
    {
      "segment_id": "c08b6492",
      "source_content": "The [ent/contrib](https://github.com/ent/contrib) contains several examples at the moment:",
      "source_content_hash": "27a0a07490ddbe2740c045b9ce9c4481304ec432e30568575824c9d76f24f909",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "[ent/contrib](https://github.com/ent/contrib) 仓库目前提供以下示例："
      }
    },
    {
      "segment_id": "8048bacc",
      "source_content": "1. A complete GraphQL server with a simple [Todo App](https://github.com/ent/contrib/tree/master/entgql/internal/todo) with numeric ID field\n2. The same [Todo App](https://github.com/ent/contrib/tree/master/entgql/internal/todouuid) in 1, but with UUID type for the ID field\n3. The same [Todo App](https://github.com/ent/contrib/tree/master/entgql/internal/todopulid) in 1 and 2, but with a prefixed [ULID](https://github.com/ulid/spec) or `PULID` as the ID field. This example supports the Relay Node API by prefixing IDs with the entity type rather than employing the ID space partitioning in [Universal IDs](migrate.md#universal-ids).",
      "source_content_hash": "4d0ddf06976122366c7a1fc56ea9140d247319ca23561829854f402e7fe62e0d",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 完整的 GraphQL 服务示例 - 使用数字 ID 字段的简单 [Todo 应用](https://github.com/ent/contrib/tree/master/entgql/internal/todo)\n2. 与示例 1 相同的 [Todo 应用](https://github.com/ent/contrib/tree/master/entgql/internal/todouuid)，但改用 UUID 类型作为 ID 字段\n3. 在示例 1 和 2 基础上，使用带前缀的 [ULID](https://github.com/ulid/spec)（即 `PULID`）作为 ID 字段的 [Todo 应用](https://github.com/ent/contrib/tree/master/entgql/internal/todopulid)。该示例通过为 ID 添加实体类型前缀（而非采用[通用 ID](migrate.md#universal-ids) 中的 ID 空间分区方案）来支持 Relay Node API"
      }
    },
    {
      "segment_id": "f41cb686",
      "source_content": "---",
      "source_content_hash": "cb3f91d54eee30e53e35b2b99905f70f169ed549fd78909d3dac2defc9ed8d3b",
      "node_type": "thematicBreak",
      "translatable": true,
      "translations": {
        "zh-CN": "---"
      }
    },
    {
      "segment_id": "423bbb1a",
      "source_content": "Please note that this documentation is under development. All code parts reside in [ent/contrib/entgql](https://github.com/ent/contrib/tree/master/entgql),\nand an example of a todo-app can be found in [ent/contrib/entgql/todo](https://github.com/ent/contrib/tree/master/entgql/internal/todo).",
      "source_content_hash": "676e9bc8864450ad964b8be9044bbf8a9149746ebb398638dfbacd9e3692f52c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "请注意本文档正在开发中。所有代码部分位于 [ent/contrib/entgql](https://github.com/ent/contrib/tree/master/entgql)，完整的 Todo 应用示例可参考 [ent/contrib/entgql/todo](https://github.com/ent/contrib/tree/master/entgql/internal/todo)。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/current/graphql.md",
  "last_updated_timestamp": "2025-06-05T15:16:18.672224+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "24edfbd80333caac1de211a57ea9f13618f48ed08243f510c2e237c5387d755c"
  }
}