{
  "source_file_path_relative_to_docusaurus_root": "../md/tutorial-grpc-optional-fields.md",
  "source_file_content_hash": "6a36b322aeedbac310fe6656b69a4aba86dd479b53048a73534c4188a103e2c5",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: grpc-optional-fields\ntitle: Optional Fields\nsidebar_label: Optional Fields\n---",
      "source_content_hash": "47396613d5422feae4f896e986fed5ebfa58e70dade14669047e2ec1277cb04c",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "bb42506b",
      "source_content": "A common issue with Protobufs is that the way that nil values are represented: a zero-valued primitive field isn't\nencoded into the binary representation, this means that applications cannot distinguish between zero and not-set for\nprimitive fields. ",
      "source_content_hash": "238c4ff022359ffb4ef250e693da028143b4366ce32912e6d94a0da0ae370e2f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Protobuf 的一个常见问题是其空值表示方式：原始类型字段的零值不会被编码到二进制表示中，这意味着应用程序无法区分原始字段的零值与未设置状态。"
      }
    },
    {
      "segment_id": "7e5c5a39",
      "source_content": "To support this, the Protobuf project supports some [Well-Known types](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf) called \"wrapper types\".\nFor example, the wrapper type for a `bool`, is called `google.protobuf.BoolValue` and is [defined as](https://github.com/protocolbuffers/protobuf/blob/991bcada050d7e9919503adef5b52547ec249d35/src/google/protobuf/wrappers.proto#L103-L107):",
      "source_content_hash": "5f5986828aba5d406b549fae0b85859c4ff9c4d375b33c69dab57bc6d5913efa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "为了解决这个问题，Protobuf 项目支持称为\"包装类型\"的[已知类型](https://developers.google.com/protocol-buffers/docs/reference/google.protobuf)。例如，布尔值的包装类型名为`google.protobuf.BoolValue`，其[定义如下](https://github.com/protocolbuffers/protobuf/blob/991bcada050d7e9919503adef5b52547ec249d35/src/google/protobuf/wrappers.proto#L103-L107)："
      }
    },
    {
      "segment_id": "ee201347",
      "source_content": "```protobuf title=\"ent/proto/entpb/entpb.proto\"\n// Wrapper message for `bool`.\n//\n// The JSON representation for `BoolValue` is JSON `true` and `false`.\nmessage BoolValue {\n  // The bool value.\n  bool value = 1;\n}\n```",
      "source_content_hash": "81e77bc5eb05fd0fcac8b17e6b454e6509054f31a8f43f81205c23ebefb55f7a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_ee201347"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "When `entproto` generates a Protobuf message definition, it uses these wrapper types to represent \"Optional\" ent fields.",
      "source_content_hash": "9ce495ca1106c79b66773fa35e3ef30b77d11f2bac5cd30a2ad03bdc183e605d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "当`entproto`生成 Protobuf 消息定义时，会使用这些包装类型来表示 Ent 中的\"可选\"字段。"
      }
    },
    {
      "segment_id": "2fdadb08",
      "source_content": "Let's see this in action, modifying our ent schema to include an optional field:",
      "source_content_hash": "8a499f1d18b183f8474312c4542fe626eb3f345a265c1c5f7ab0051b257a4e08",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "让我们通过修改 Ent 模式添加可选字段来观察这一机制："
      }
    },
    {
      "segment_id": "3569d545",
      "source_content": "```go title=\"ent/schema/user.go\" {14-16}\n// Fields of the User.\nfunc (User) Fields() []ent.Field {\n\treturn []ent.Field{\n\t\tfield.String(\"name\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(2),\n\t\t\t),\n\t\tfield.String(\"email_address\").\n\t\t\tUnique().\n\t\t\tAnnotations(\n\t\t\t\tentproto.Field(3),\n\t\t\t),\n\t\tfield.String(\"alias\").\n\t\t\tOptional().\n\t\t\tAnnotations(entproto.Field(4)),\n\t}\n}\n```",
      "source_content_hash": "2d1a192ed089eea7c2d9b5948d5bc51bf4e93c60955f34ee627d06353ed95b47",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_3569d545"
      }
    },
    {
      "segment_id": "8af76f3d",
      "source_content": "Re-running `go generate ./...`, observe that our Protobuf definition for `User` now looks like:",
      "source_content_hash": "8d2f12177efe261d7721ba91a65edbc63024c1d3aae4d34d1ec328882530edd3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "重新运行`go generate ./...`后，可以看到生成的`User` Protobuf 定义变为："
      }
    },
    {
      "segment_id": "48ec8149",
      "source_content": "```protobuf title=\"ent/proto/entpb/entpb.proto\" {8}\nmessage User {\n  int32 id = 1;\n\n  string name = 2;\n\n  string email_address = 3;\n\n  google.protobuf.StringValue alias = 4; // <-- this is new \n\n  repeated Category administered = 5;\n}\n```",
      "source_content_hash": "7f62bbf851c2358bbf6bfcc29f28d4821c0c0e13a445d867e360aafd88e42e34",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_48ec8149"
      }
    },
    {
      "segment_id": "6ea4c715",
      "source_content": "The generated service implementation also utilize this field. Observe in `entpb_user_service.go`:",
      "source_content_hash": "3f918eae8fd9cd8661a256e5e29f7cfce936bf2515da585b7224b99ee5797981",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "生成的服务实现同样会利用这个字段。观察`entpb_user_service.go`文件："
      }
    },
    {
      "segment_id": "5a41b4fb",
      "source_content": "```go title=\"ent/proto/entpb/entpb_user_service.go\" {3-6}\nfunc (svc *UserService) createBuilder(user *User) (*ent.UserCreate, error) {\n\tm := svc.client.User.Create()\n\tif user.GetAlias() != nil {\n\t\tuserAlias := user.GetAlias().GetValue()\n\t\tm.SetAlias(userAlias)\n\t}\n\tuserEmailAddress := user.GetEmailAddress()\n\tm.SetEmailAddress(userEmailAddress)\n\tuserName := user.GetName()\n\tm.SetName(userName)\n\tfor _, item := range user.GetAdministered() {\n\t\tadministered := int(item.GetId())\n\t\tm.AddAdministeredIDs(administered)\n\t}\n\treturn m, nil\n}\n```",
      "source_content_hash": "2e434399febf1fb2b7680852f849bae607c28e55063ecc45df99aaaf5f4b22b5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_5a41b4fb"
      }
    },
    {
      "segment_id": "a5c5772a",
      "source_content": "To use the wrapper types in our client code, we can use helper methods supplied by the [wrapperspb](https://github.com/protocolbuffers/protobuf-go/blob/3f51f05e40d61e930a5416f1ed7092cef14cc058/types/known/wrapperspb/wrappers.pb.go#L458-L460)\npackage to easily build instances of these types. For example in `cmd/client/main.go`:",
      "source_content_hash": "a26ae7d0666985a8939c3f1b6a527fe7a51d77bc7bd0918049855b0419328c0e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在客户端代码中使用包装类型时，可以通过[wrapperspb](https://github.com/protocolbuffers/protobuf-go/blob/3f51f05e40d61e930a5416f1ed7092cef14cc058/types/known/wrapperspb/wrappers.pb.go#L458-L460)包提供的辅助方法轻松构建这些类型的实例。例如在`cmd/client/main.go`中："
      }
    },
    {
      "segment_id": "65400624",
      "source_content": "```go {5}\nfunc randomUser() *entpb.User {\n\treturn &entpb.User{\n\t\tName:         fmt.Sprintf(\"user_%d\", rand.Int()),\n\t\tEmailAddress: fmt.Sprintf(\"user_%d@example.com\", rand.Int()),\n\t\tAlias:        wrapperspb.String(\"John Doe\"),\n\t}\n}\n```",
      "source_content_hash": "161921f08086d6e7c920902bd657a95086307ed6b6ed02d1588737af603361b5",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_65400624"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/current/tutorial-grpc-optional-fields.md",
  "last_updated_timestamp": "2025-06-05T15:16:18.668872+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "6a36b322aeedbac310fe6656b69a4aba86dd479b53048a73534c4188a103e2c5"
  }
}