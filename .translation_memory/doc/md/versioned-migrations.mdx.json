{
  "source_file_path_relative_to_docusaurus_root": "../md/versioned-migrations.mdx",
  "source_file_content_hash": "bd509300e4ddb53f2b74152f0970dae3e15a499ad78e1bc047cefc8bb4bea9a4",
  "segments": [
    {
      "segment_id": "58cfcc64",
      "source_content": "---\nid: versioned-migrations\ntitle: Versioned Migrations\n---",
      "source_content_hash": "b71717da0b0a4a00127eb481c3d10e15f4fef332174c00e8d8e8d71fde75882e",
      "node_type": "yaml",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_58cfcc64"
      }
    },
    {
      "segment_id": "4d1292be",
      "source_content": "import Tabs from '@theme/Tabs';\nimport TabItem from '@theme/TabItem';\nimport InstallationInstructions from './components/_installation_instructions.mdx';\nimport AtlasMigrateDiff from './components/_atlas_migrate_diff.mdx';\nimport AtlasMigrateApply from './components/_atlas_migrate_apply.mdx';",
      "source_content_hash": "6b73453ab9820d7119f1a29b843b4d4ee459fabb6a64cbeadc14a59d3bf412b9",
      "node_type": "mdxjsEsm",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4d1292be"
      }
    },
    {
      "segment_id": "9fcbdce9",
      "source_content": "## Quick Guide",
      "source_content_hash": "28e8910403d261ab1ebb0b5734001239ea07438f5195cdb4de58c5f14c8abcca",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 快速指南"
      }
    },
    {
      "segment_id": "ad8fd492",
      "source_content": "Here are a few quick steps that explain how to auto-generate and execute migration files against a database. For\na more in-depth explanation, continue reading the [next section](#in-depth-guide).",
      "source_content_hash": "e8aad19e3b3c75b2c418109dbfc78ff692c1ae707ccaf890a78d6c49a121376e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "以下是自动生成并执行数据库迁移文件的简要步骤。如需深入了解，请继续阅读[下一章节](#in-depth-guide)。"
      }
    },
    {
      "segment_id": "3daf1b88",
      "source_content": "### Generating migrations",
      "source_content_hash": "f1493c4640e505af36dcce61b7b451f2d92e97c1bb15277b36c9f2882b841efb",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 生成迁移文件"
      }
    },
    {
      "segment_id": "09a8fe76",
      "source_content": "<InstallationInstructions />",
      "source_content_hash": "a4404b9dce43845ec41e6725e25a8cfce8953ea9daeac173794ed9b031a06194",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_09a8fe76"
      }
    },
    {
      "segment_id": "f5f6d2ce",
      "source_content": "Then, run the following command to automatically generate migration files for your Ent schema:",
      "source_content_hash": "9d0fbd305649e420a9f8d29f62d075092da90f3ea49c801ea13e74a5f4f1ba42",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "运行以下命令为Ent模式自动生成迁移文件："
      }
    },
    {
      "segment_id": "b7a64917",
      "source_content": "<AtlasMigrateDiff/>",
      "source_content_hash": "08a27d764bf978af393b00de0c8d024c7b6e62116bdcfa9087d08b2d34fb95f0",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_b7a64917"
      }
    },
    {
      "segment_id": "64f5e8db",
      "source_content": ":::info[The role of the [dev database](https://atlasgo.io/concepts/dev-database)]\nAtlas loads the **current state** by executing the SQL files stored in the migration directory onto the provided\n[dev database](https://atlasgo.io/concepts/dev-database). It then compares this state against the **desired state**\ndefined by the `ent/schema` package and writes a migration plan for moving from the current state to the desired state.\n:::",
      "source_content_hash": "3420cc8e9033dc2575c4eff85e8cccf7a6892e74c4d3ba4cd759a1d9cf828014",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::info[[开发数据库](https://atlasgo.io/concepts/dev-database)的作用]\nAtlas通过将迁移目录中的SQL文件执行到提供的[开发数据库](https://atlasgo.io/concepts/dev-database)来加载当前状态。随后将其与`ent/schema`包定义的期望状态进行对比，并编写从当前状态迁移至期望状态的迁移计划。\n:::"
      }
    },
    {
      "segment_id": "48847fd4",
      "source_content": "### Applying migrations",
      "source_content_hash": "357900be165b6e28c2e80254fcec780707385d6d577b83ed806447b12f025bd0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 应用迁移"
      }
    },
    {
      "segment_id": "7499a4e7",
      "source_content": "To apply the pending migration files onto the database, run the following command:",
      "source_content_hash": "e9daedf8f627e30fad89e62b54ea0a7f2ae36ee05ad25eeff0b598fc85262ada",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "执行以下命令将待处理的迁移文件应用到数据库："
      }
    },
    {
      "segment_id": "e7c54101",
      "source_content": "<AtlasMigrateApply/>",
      "source_content_hash": "298dd65bebb3e57ebdc80bf60180d36429a4c8f98b29fd718dd7b6f64f8ed394",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e7c54101"
      }
    },
    {
      "segment_id": "135468ee",
      "source_content": "For more information head over to the [Atlas documentation](https://atlasgo.io/versioned/apply).",
      "source_content_hash": "3aa141c46f384faaeb628ea32b3eeb59fa15049e8d11d54c07ea83d47d9e71b1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更多信息请参阅[Atlas文档](https://atlasgo.io/versioned/apply)。"
      }
    },
    {
      "segment_id": "782c902a",
      "source_content": "### Migration status",
      "source_content_hash": "79a4e7220d6be9e073dbc806c49a2e2bac2e0e15b344821b10319da10ebada13",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 迁移状态"
      }
    },
    {
      "segment_id": "50746522",
      "source_content": "Use the following command to get detailed information about the migration status of the connected database:",
      "source_content_hash": "fc5a483195cf48a5b4c8f0cba3303862a2e366c6419480cc224f9a3705707f3d",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用以下命令获取连接数据库的详细迁移状态信息："
      }
    },
    {
      "segment_id": "e2ae1ac7",
      "source_content": "<Tabs\ndefaultValue=\"mysql\"\nvalues={[\n{label: 'MySQL', value: 'mysql'},\n{label: 'MariaDB', value: 'maria'},\n{label: 'PostgreSQL', value: 'postgres'},\n{label: 'SQLite', value: 'sqlite'},\n]}>\n<TabItem value=\"mysql\">\n\n```shell\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"mysql://root:pass@localhost:3306/example\"\n```\n\n</TabItem>\n<TabItem value=\"maria\">\n\n```shell\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"maria://root:pass@localhost:3306/example\"\n```\n\n</TabItem>\n<TabItem value=\"postgres\">\n\n```shell\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"postgres://postgres:pass@localhost:5432/database?search_path=public&sslmode=disable\"\n```\n\n</TabItem>\n<TabItem value=\"sqlite\">\n\n```shell\natlas migrate status \\\n  --dir \"file://ent/migrate/migrations\" \\\n  --url \"sqlite://file.db?_fk=1\"\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "03f506d7c454a43c68b26c80c8e8c1d51ec4f53471e8731223e83237fd0f5eef",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e2ae1ac7"
      }
    },
    {
      "segment_id": "90d35b51",
      "source_content": "## In Depth Guide",
      "source_content_hash": "e5ad23a52a9a07d59c7b2b0288184cfe550c4a45c9e8d31dd2778b9d638b09e0",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 深度指南"
      }
    },
    {
      "segment_id": "86348f98",
      "source_content": "If you are using the [Atlas](https://github.com/ariga/atlas) migration engine, you are able to use the versioned\nmigration workflow. Instead of applying the computed changes directly to the database, Atlas generates a set\nof migration files containing the necessary SQL statements to migrate the database. These files can then be edited to\nyour needs and be applied by many existing migration tools, such as golang-migrate, Flyway, and Liquibase.",
      "source_content_hash": "33d001a97cbabd7a1f7b8f7d83707f1095c46a2d78beb3e6de15fa48b536cc6f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用[Atlas](https://github.com/ariga/atlas)迁移引擎，可采用版本化迁移工作流。Atlas不会直接将变更应用到数据库，而是生成包含必要SQL语句的迁移文件集。这些文件可被golang-migrate、Flyway和Liquibase等现有迁移工具编辑和应用。"
      }
    },
    {
      "segment_id": "b10963d7",
      "source_content": "### Generating Versioned Migration Files",
      "source_content_hash": "872ec7a2ec26640a4d547eb4e5a5d246e0c572f356e27632ebc64d77caec75da",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 生成版本化迁移文件"
      }
    },
    {
      "segment_id": "2822251a",
      "source_content": "Migration files are generated by computing the difference between two **states**. We call the state reflected by\nyour Ent schema the **desired** state, and the **current** state is the last state of your schema before your most\nrecent changes. There are two ways for Ent to determine the current state:",
      "source_content_hash": "bf9698895ffa23db5f8874585915f86b210555e185798adb84442f199d36d06c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "迁移文件通过计算两个状态间的差异生成。Ent模式反映的状态称为期望状态，而当前状态则是最近变更前的最终状态。Ent有两种确定当前状态的方式："
      }
    },
    {
      "segment_id": "584b7213",
      "source_content": "1. Replay the existing migration directory and inspect the schema (default)\n2. Connect to an existing database and inspect the schema",
      "source_content_hash": "72de45f64ab573b9f4e318c79f832286eecd8f590794602413dde1d95010f276",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 回放现有迁移目录并检查模式（默认方式）\n2. 连接现有数据库并检查模式"
      }
    },
    {
      "segment_id": "c1eaf30b",
      "source_content": "We emphasize to use the first option, as it has the advantage of not having to connect to a production database to\ncreate a diff. In addition, this approach also works if you have multiple deployments in different migration states.",
      "source_content_hash": "283a0df3e06a29bae74325593395bf64254abd2e8dc5149180bf597c0044db6f",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "我们推荐使用第一种方式，其优势在于无需连接生产数据库即可创建差异。此外，这种方式也适用于存在多个处于不同迁移状态的部署场景。"
      }
    },
    {
      "segment_id": "0e80209e",
      "source_content": "![atlas-versioned-migration-process](https://entgo.io/images/assets/migrate-atlas-replay.png)",
      "source_content_hash": "e51d8aacf5ce23dfe321e4f060880fb9e4f38c00e0cddde3284e6d796ecd54dd",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![atlas版本化迁移流程](https://entgo.io/images/assets/migrate-atlas-replay.png)"
      }
    },
    {
      "segment_id": "7bc8bb24",
      "source_content": "In order to automatically generate migration files, you can use one of the two approaches:",
      "source_content_hash": "0dec98a5331ed6d21e925975a472e5d471f06c6e581c2e7079f54fc5bd9316df",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "自动生成迁移文件可采用以下两种方式之一："
      }
    },
    {
      "segment_id": "5cb70a3d",
      "source_content": "1. Use [Atlas](https://atlasgo.io) `migrate diff` command against your `ent/schema` package.\n2. Enable the `sql/versioned-migration` feature flag and write a small migration generation script that uses Atlas as\n   a package to generate the migration files.",
      "source_content_hash": "1d11d909c53e8da972f87ec8721e5e43cb7aa6c9f035b8bff02a37b62fc0e88c",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 对`ent/schema`包使用[Atlas](https://atlasgo.io)的`migrate diff`命令\n2. 启用`sql/versioned-migration`特性标志，并编写使用Atlas包生成迁移文件的小型脚本"
      }
    },
    {
      "segment_id": "7974af84",
      "source_content": "#### Option 1: Use the `atlas migrate diff` command",
      "source_content_hash": "3c762f27dd7e45333de85b570610e82493143e9ec1028236ab80a82d371487a6",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 选项1：使用`atlas migrate diff`命令"
      }
    },
    {
      "segment_id": "275cb688",
      "source_content": "<AtlasMigrateDiff/>",
      "source_content_hash": "08a27d764bf978af393b00de0c8d024c7b6e62116bdcfa9087d08b2d34fb95f0",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_275cb688"
      }
    },
    {
      "segment_id": "95807da3",
      "source_content": ":::note\nTo enable the [`GlobalUniqueID`](migrate.md#universal-ids) option in versioned migration, append the query parameter\n`globalid=1` to the desired state. For example: `--to \"ent://ent/schema?globalid=1\"`.\n:::",
      "source_content_hash": "35e1b7755a0c643590f42b5d2c665daea7b29f008ae0d05c85778336e885662d",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n要在版本化迁移中启用[`GlobalUniqueID`](migrate.md#universal-ids)选项，需在目标状态后添加查询参数`globalid=1`。例如：`--to \"ent://ent/schema?globalid=1\"`。\n:::"
      }
    },
    {
      "segment_id": "b6152880",
      "source_content": "Run `ls ent/migrate/migrations` after the command above was passed successfully, and you will notice Atlas created 2\nfiles:",
      "source_content_hash": "20b63bb518db4e7324ed453c080a12b8b2826e9481fba3f2ed6d52b0f2645d18",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "成功执行上述命令后运行`ls ent/migrate/migrations`，您将看到Atlas创建的两个文件："
      }
    },
    {
      "segment_id": "8607cf29",
      "source_content": "<Tabs\ndefaultValue=\"migration_file\"\nvalues={[\n{label: '20220811114629_create_users.sql', value: 'migration_file'},\n{label: 'atlas.sum', value: 'sum_file'},\n]}>\n<TabItem value=\"migration_file\">\n\n```sql\n-- create \"users\" table\nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n\n```\n\n</TabItem>\n<TabItem value=\"sum_file\">\n\nIn addition to the migration directory, Atlas maintains a file name `atlas.sum` which is used\nto ensure the integrity of the migration directory and force developers to deal with situations\nwhere migration order or contents were modified after the fact.\n\n```text\nh1:vj6fBSDiLEwe+jGdHQvM2NU8G70lAfXwmI+zkyrxMnk=\n20220811114629_create_users.sql h1:wrm4K8GSucW6uMJX7XfmfoVPhyzz3vN5CnU1mam2Y4c=\n\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "41cd3278d8263a15f0cd579fff8d4ab6b0d4092147ad650b232a28b3399d1bce",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_8607cf29"
      }
    },
    {
      "segment_id": "44285072",
      "source_content": "Head over to the [Applying Migration Files](#apply-migration-files) section to learn how to execute the generated\nmigration files onto the database.",
      "source_content_hash": "507655e85e90f9fd7bac0927abcad573898874d130b633c9cce313c305c76b9a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "前往[应用迁移文件](#apply-migration-files)章节了解如何执行生成的迁移文件。"
      }
    },
    {
      "segment_id": "3c6dd548",
      "source_content": "#### Option 2: Create a migration generation script",
      "source_content_hash": "7286b49905989f45c94df1e74107a840218f39f85183f9a37412b206122833cf",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 选项2：创建迁移生成脚本"
      }
    },
    {
      "segment_id": "6f08f877",
      "source_content": "The first step is to enable the versioned migration feature by passing in the `sql/versioned-migration` feature flag.\nDepending on how you execute the Ent code generator, you have to use one of the two options:",
      "source_content_hash": "99fa1ce5724ea83f83d003a1c5bfca946e2d156e6bf43178b9f70893e8b24254",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "第一步是通过传入`sql/versioned-migration`特性标志启用版本化迁移功能。根据执行Ent代码生成器的方式，您需要选择以下两种方案之一："
      }
    },
    {
      "segment_id": "aa8003b6",
      "source_content": "<Tabs\ndefaultValue=\"ent\"\nvalues={[\n{label: 'Using Ent CLI', value: 'ent'},\n{label: 'Using the entc package', value: 'entc'},\n]}>\n<TabItem value=\"ent\">\n\nIf you are using the default go generate configuration, simply add the `--feature sql/versioned-migration` to\nthe `ent/generate.go` file as follows:\n\n```go\npackage ent\n\n//go:generate go run -mod=mod entgo.io/ent/cmd/ent generate --feature sql/versioned-migration ./schema\n```\n\n</TabItem>\n<TabItem value=\"entc\">\n\nIf you are using the code generation package (e.g. if you are using an Ent extension like `entgql`),\nadd the feature flag as follows:\n\n```go\n//go:build ignore\n\npackage main\n\nimport (\n\t\"log\"\n\n\t\"entgo.io/ent/entc\"\n\t\"entgo.io/ent/entc/gen\"\n)\n\nfunc main() {\n\terr := entc.Generate(\"./schema\", &gen.Config{\n\t\t//highlight-next-line\n\t\tFeatures: []gen.Feature{gen.FeatureVersionedMigration},\n\t})\n\tif err != nil {\n\t\tlog.Fatalf(\"running ent codegen: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "f640c32071a3be7158054c862a03ca00b3bf8d6c75bb6efb35cd22c4c8ed229d",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_aa8003b6"
      }
    },
    {
      "segment_id": "af834e0d",
      "source_content": "After running code generation using `go generate`, the new methods for creating migration files were added to your\n`ent/migrate` package. The next steps are:",
      "source_content_hash": "93457bacc50fe6489de0727898796c122f031ba4d8b9c3e65e560df4e1a696ce",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用`go generate`运行代码生成后，新的迁移文件创建方法已添加到您的`ent/migrate`包中。后续步骤如下："
      }
    },
    {
      "segment_id": "be0f7233",
      "source_content": "1\\. Provide a URL to an Atlas [dev database](https://atlasgo.io/concepts/dev-database) to replay the migration directory\nand compute the **current** state. Let's use `docker` for running a local database container:",
      "source_content_hash": "8c91ac2171b326251a1628ebfba0d5f79fafa32b1c7d779bd682de0b1b201a27",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "1\\. 提供Atlas[开发数据库](https://atlasgo.io/concepts/dev-database)的URL以重放迁移目录并计算**当前**状态。我们使用`docker`运行本地数据库容器："
      }
    },
    {
      "segment_id": "e8993097",
      "source_content": "<Tabs\ndefaultValue=\"mysql\"\nvalues={[\n{label: 'MySQL', value: 'mysql'},\n{label: 'MariaDB', value: 'mariadb'},\n{label: 'PostgreSQL', value: 'postgres'},\n]}>\n<TabItem value=\"mysql\">\n\n```bash\ndocker run --name migration --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=pass -e MYSQL_DATABASE=test -d mysql\n```\n\n</TabItem>\n<TabItem value=\"mariadb\">\n\n```bash\ndocker run --name migration --rm -p 3306:3306 -e MYSQL_ROOT_PASSWORD=pass -e MYSQL_DATABASE=test -d mariadb\n```\n\n</TabItem>\n<TabItem value=\"postgres\">\n\n```bash\ndocker run --name migration --rm -p 5432:5432 -e POSTGRES_PASSWORD=pass -e POSTGRES_DB=test -d postgres\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "f832efec5ebdca8c06e5dc531dd67e803aea34ffcd5c402e171609389ba3fd42",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_e8993097"
      }
    },
    {
      "segment_id": "ceb4fd26",
      "source_content": "2\\. Create a file named `main.go` and a directory named `migrations` under the `ent/migrate` package and customize the migration generation for your project.",
      "source_content_hash": "44017c46797951350532fc7a2226bbac7ec72f34f918f1feec3154fa9f4b7349",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "2\\. 在`ent/migrate`包下创建名为`main.go`的文件和`migrations`目录，并根据项目需求自定义迁移生成逻辑。"
      }
    },
    {
      "segment_id": "6620d0b9",
      "source_content": "<Tabs\ndefaultValue=\"atlas\"\nvalues={[\n{label: 'Atlas', value: 'atlas'},\n{label: 'golang-migrate/migrate', value: 'golang_migrate'},\n{label: 'pressly/goose', value: 'goose'},\n{label: 'amacneil/dbmate', value: 'dbmate'},\n{label: 'Flyway', value: 'flyway'},\n{label: 'Liquibase', value: 'liquibase'},\n]}>\n<TabItem value=\"atlas\">\n\n```go title=\"ent/migrate/main.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\tatlas \"ariga.io/atlas/sql/migrate\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t// Create a local migration directory able to understand Atlas migration file format for replay.\n\tdir, err := atlas.NewLocalDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\t// Migrate diff options.\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),                         // provide migration directory\n\t\tschema.WithMigrationMode(schema.ModeReplay), // provide migration mode\n\t\tschema.WithDialect(dialect.MySQL),           // Ent dialect to use\n\t\tschema.WithFormatter(atlas.DefaultFormatter),\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\t// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"golang_migrate\">\n\n```go title=\"ent/migrate/main.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\t\"ariga.io/atlas/sql/sqltool\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t// Create a local migration directory able to understand golang-migrate migration file format for replay.\n\tdir, err := sqltool.NewGolangMigrateDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\t// Migrate diff options.\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),                         // provide migration directory\n\t\tschema.WithMigrationMode(schema.ModeReplay), // provide migration mode\n\t\tschema.WithDialect(dialect.MySQL),           // Ent dialect to use\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\t// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"goose\">\n\n```go title=\"ent/migrate/main.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\t\"ariga.io/atlas/sql/sqltool\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t// Create a local migration directory able to understand goose migration file format for replay.\n\tdir, err := sqltool.NewGooseDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\t// Migrate diff options.\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),                         // provide migration directory\n\t\tschema.WithMigrationMode(schema.ModeReplay), // provide migration mode\n\t\tschema.WithDialect(dialect.MySQL),           // Ent dialect to use\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\t// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"dbmate\">\n\n```go title=\"ent/migrate/main.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\t\"ariga.io/atlas/sql/sqltool\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t// Create a local migration directory able to understand dbmate migration file format for replay.\n\tdir, err := sqltool.NewDBMateDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\t// Migrate diff options.\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),                         // provide migration directory\n\t\tschema.WithMigrationMode(schema.ModeReplay), // provide migration mode\n\t\tschema.WithDialect(dialect.MySQL),           // Ent dialect to use\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\t// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"flyway\">\n\n```go title=\"ent/migrate/main.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\t\"ariga.io/atlas/sql/sqltool\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t// Create a local migration directory able to understand Flyway migration file format for replay.\n\tdir, err := sqltool.NewFlywayDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\t// Migrate diff options.\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),                         // provide migration directory\n\t\tschema.WithMigrationMode(schema.ModeReplay), // provide migration mode\n\t\tschema.WithDialect(dialect.MySQL),           // Ent dialect to use\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\t// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n<TabItem value=\"liquibase\">\n\n```go title=\"ent/migrate/main.go\"\n//go:build ignore\n\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"os\"\n\n\t\"<project>/ent/migrate\"\n\n\t\"ariga.io/atlas/sql/sqltool\"\n\t\"entgo.io/ent/dialect\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tctx := context.Background()\n\t// Create a local migration directory able to understand Liquibase migration file format for replay.\n\tdir, err := sqltool.NewLiquibaseDir(\"ent/migrate/migrations\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating atlas migration directory: %v\", err)\n\t}\n\t// Migrate diff options.\n\topts := []schema.MigrateOption{\n\t\tschema.WithDir(dir),                         // provide migration directory\n\t\tschema.WithMigrationMode(schema.ModeReplay), // provide migration mode\n\t\tschema.WithDialect(dialect.MySQL),           // Ent dialect to use\n\t}\n\tif len(os.Args) != 2 {\n\t\tlog.Fatalln(\"migration name is required. Use: 'go run -mod=mod ent/migrate/main.go <name>'\")\n\t}\n\t// Generate migrations using Atlas support for MySQL (note the Ent dialect option passed above).\n\terr = migrate.NamedDiff(ctx, \"mysql://root:pass@localhost:3306/test\", os.Args[1], opts...)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed generating migration file: %v\", err)\n\t}\n}\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "86597eb44b3fb314e942baa56ac0c29e42934510a6d2ab88cb40e04b3143e910",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_6620d0b9"
      }
    },
    {
      "segment_id": "4fa5605e",
      "source_content": "3\\. Trigger migration generation by executing `go run -mod=mod ent/migrate/main.go <name>` from the root of the project.\nFor example:",
      "source_content_hash": "eaed8963fa7daad6e8ca4fa5a7b49add9bdcadb78fad5fd4a92826995f94c938",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "3\\. 通过从项目根目录执行`go run -mod=mod ent/migrate/main.go <name>`触发迁移生成。例如："
      }
    },
    {
      "segment_id": "62a62859",
      "source_content": "```bash\ngo run -mod=mod ent/migrate/main.go create_users\n```",
      "source_content_hash": "eea2582ddc3902d7f0b6bb8b8659490f3a4d4fb3f5c9c73a2a96dc5a61a5fc27",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_62a62859"
      }
    },
    {
      "segment_id": "4a2bee77",
      "source_content": "Run `ls ent/migrate/migrations` after the command above was passed successfully, and you will notice Atlas created 2\nfiles:",
      "source_content_hash": "20b63bb518db4e7324ed453c080a12b8b2826e9481fba3f2ed6d52b0f2645d18",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "上述命令成功执行后运行`ls ent/migrate/migrations`，您将看到Atlas创建的两个文件："
      }
    },
    {
      "segment_id": "4a8af240",
      "source_content": "<Tabs\ndefaultValue=\"migration_file\"\nvalues={[\n{label: '20220811114629_create_users.sql', value: 'migration_file'},\n{label: 'atlas.sum', value: 'sum_file'},\n]}>\n<TabItem value=\"migration_file\">\n\n```sql\n-- create \"users\" table\nCREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n\n```\n\n</TabItem>\n<TabItem value=\"sum_file\">\n\nIn addition to the migration directory, Atlas maintains a file name `atlas.sum` which is used\nto ensure the integrity of the migration directory and force developers to deal with situations\nwhere migration order or contents were modified after the fact.\n\n```text\nh1:vj6fBSDiLEwe+jGdHQvM2NU8G70lAfXwmI+zkyrxMnk=\n20220811114629_create_users.sql h1:wrm4K8GSucW6uMJX7XfmfoVPhyzz3vN5CnU1mam2Y4c=\n\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "41cd3278d8263a15f0cd579fff8d4ab6b0d4092147ad650b232a28b3399d1bce",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_4a8af240"
      }
    },
    {
      "segment_id": "d55ba54d",
      "source_content": "The full reference example exists in [GitHub repository](https://github.com/ent/ent/tree/master/examples/migration).",
      "source_content_hash": "c864fb785d134c44abe4f6a43cc97881fb566dac483f3593e601f33f91e4fe70",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "完整参考示例存在于[GitHub仓库](https://github.com/ent/ent/tree/master/examples/migration)。"
      }
    },
    {
      "segment_id": "169dc225",
      "source_content": "### Verifying and linting migrations",
      "source_content_hash": "cf1118180614f760cedef14028aa7ad6a3ee30d0f939f3901cd2e43575d0d96e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 验证与检查迁移"
      }
    },
    {
      "segment_id": "df08ff06",
      "source_content": "After generating our migration files with Atlas, we can run the [`atlas migrate lint`](https://atlasgo.io/versioned/lint)\ncommand that validates and analyzes the contents of the migration directory and generate insights and diagnostics on the\nselected changes:",
      "source_content_hash": "74b2508c59cfc0e02f933d963bdf528350d56eb1dcb16295067a75b0115e34e6",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用Atlas生成迁移文件后，我们可以运行[`atlas migrate lint`](https://atlasgo.io/versioned/lint)命令来验证和分析迁移目录内容，并对所选变更生成诊断报告："
      }
    },
    {
      "segment_id": "98e2c415",
      "source_content": "1. Ensure the migration history can be replayed from any point at time.\n2. Protect from unexpected history changes when concurrent migrations are written to the migration directory by multiple\nteam members. Read more about the consistency checks in the [section below](#atlas-migration-directory-integrity-file).\n3. Detect whether [destructive](https://atlasgo.io/lint/analyzers#destructive-changes) or irreversible changes have been\nmade or whether they are dependent on tables' contents and can cause a migration failure.",
      "source_content_hash": "3ff53dea0100c97d22ae381d7800c7096ed854e67b9935ff4aef0983a6f8dd54",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "1. 确保迁移历史可从任意时间点重放\n2. 防止多名团队成员并发修改迁移目录时出现意外历史变更（更多一致性检查详见[下文章节](#atlas-migration-directory-integrity-file)）\n3. 检测是否包含[破坏性](https://atlasgo.io/lint/analyzers#destructive-changes)或不可逆变更，或是否存在依赖表内容可能导致迁移失败的情况"
      }
    },
    {
      "segment_id": "c6dee347",
      "source_content": "Let's run `atlas migrate lint` with the necessary parameters to run migration linting:",
      "source_content_hash": "a110ee2012624fe31ce2c37a1df071f2cef15266e02f6c375d91d67fa32dac37",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "运行`atlas migrate lint`命令时需配置以下参数："
      }
    },
    {
      "segment_id": "9513c370",
      "source_content": "- `--dev-url` a URL to a [Dev Database](https://atlasgo.io/concepts/dev-database) that will be used to replay changes.\n- `--dir` the URL to the migration directory, by default it is `file://migrations`.\n- `--dir-format` custom directory format, by default it is `atlas`.\n- (optional) `--log` custom logging using a Go template.\n- (optional) `--latest` run analysis on the latest `N` migration files.\n- (optional) `--git-base` run analysis against the base Git branch.",
      "source_content_hash": "6b352a9ea816a515514e65c6fa0b532b9d9120a9968752a1c2987ac4413f99cd",
      "node_type": "list",
      "translatable": true,
      "translations": {
        "zh-CN": "- `--dev-url` 用于重放变更的[开发数据库](https://atlasgo.io/concepts/dev-database)URL\n- `--dir` 迁移目录URL，默认为`file://migrations`\n- `--dir-format` 自定义目录格式，默认为`atlas`\n- (可选) `--log` 使用Go模板自定义日志输出\n- (可选) `--latest` 对最新的`N`个迁移文件进行分析\n- (可选) `--git-base` 基于Git基准分支进行分析"
      }
    },
    {
      "segment_id": "9017da44",
      "source_content": "#### Install Atlas:",
      "source_content_hash": "235d42f481208d56fac93ee895deb7357cd93a597c350a300fdded3e20da1b13",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 安装Atlas："
      }
    },
    {
      "segment_id": "b28eeade",
      "source_content": "<InstallationInstructions />",
      "source_content_hash": "a4404b9dce43845ec41e6725e25a8cfce8953ea9daeac173794ed9b031a06194",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_b28eeade"
      }
    },
    {
      "segment_id": "9a24614d",
      "source_content": "#### Run the `atlas migrate lint` command:",
      "source_content_hash": "db7e45e09de9b5ce6e9d0ad1372488a986bd498fb39776256575d34ac8fbb4a1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 运行`atlas migrate lint`命令："
      }
    },
    {
      "segment_id": "0bc7f2f4",
      "source_content": "<Tabs\ndefaultValue=\"mysql\"\nvalues={[\n{label: 'MySQL', value: 'mysql'},\n{label: 'MariaDB', value: 'maria'},\n{label: 'PostgreSQL', value: 'postgres'},\n{label: 'SQLite', value: 'sqlite'},\n]}>\n<TabItem value=\"mysql\">\n\n```shell\natlas migrate lint \\\n  --dev-url=\"docker://mysql/8/test\" \\\n  --dir=\"file://ent/migrate/migrations\" \\\n  --latest=1\n```\n\n</TabItem>\n<TabItem value=\"maria\">\n\n```shell\natlas migrate lint \\\n  --dev-url=\"docker://mariadb/latest/test\" \\\n  --dir=\"file://ent/migrate/migrations\" \\\n  --latest=1\n```\n\n</TabItem>\n<TabItem value=\"postgres\">\n\n```shell\natlas migrate lint \\\n  --dev-url=\"docker://postgres/15/test?search_path=public\" \\\n  --dir=\"file://ent/migrate/migrations\" \\\n  --latest=1\n```\n\n</TabItem>\n<TabItem value=\"sqlite\">\n\n```shell\natlas migrate lint \\\n  --dev-url=\"sqlite://file?mode=memory\" \\\n  --dir=\"file://ent/migrate/migrations\" \\\n  --latest=1\n```\n\n</TabItem>\n</Tabs>",
      "source_content_hash": "a11aa8afc1be20e0a6e3c9708c40ffff290598729fc31b787338a7a7e0d92f18",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_0bc7f2f4"
      }
    },
    {
      "segment_id": "6ecf4565",
      "source_content": "An output of such a run might look as follows:",
      "source_content_hash": "2b205d7bee68f4ae37037b13990ed37e7985c628e400c66f8389d7677153edf5",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "运行结果示例如下："
      }
    },
    {
      "segment_id": "3e42a32a",
      "source_content": "```text {3,7}\n20221114090322_add_age.sql: data dependent changes detected:\n\n\tL2: Adding a non-nullable \"double\" column \"age\" on table \"users\" without a default value implicitly sets existing rows with 0\n\n20221114101516_add_name.sql: data dependent changes detected:\n\n\tL2: Adding a non-nullable \"varchar\" column \"name\" on table \"users\" without a default value implicitly sets existing rows with \"\"\n```",
      "source_content_hash": "cf9259af72dab08fea28472a5dc281c8021f1608f27e6aa2ca3021fabffbdfb6",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_3e42a32a"
      }
    },
    {
      "segment_id": "a547ab9e",
      "source_content": "#### A Word on Global Unique IDs",
      "source_content_hash": "7e483b0b319fac0f7ab8400c0a1154bcadd49cd3a44aee438393a081505bddf1",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "#### 关于全局唯一ID的特别说明"
      }
    },
    {
      "segment_id": "f3b4d9f4",
      "source_content": "**This section only applies to MySQL users using the [global unique id](migrate.md/#universal-ids) feature.**",
      "source_content_hash": "a7b923797ccd65b5f3db9864787ee4d0ed36b9fe08d053e6e12f56702fd35a20",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "**本节仅适用于使用[全局唯一ID](migrate.md/#universal-ids)特性的MySQL用户**"
      }
    },
    {
      "segment_id": "d27371fb",
      "source_content": "When using the global unique ids, Ent allocates a range of `1<<32` integer values for each table. This is done by giving\nthe first table an autoincrement starting value of `1`, the second one the starting value `4294967296`, the third one\n`8589934592`, and so on. The order in which the tables receive the starting value is saved in an extra table\ncalled `ent_types`. With MySQL 5.6 and 5.7, the autoincrement starting value is only saved in\nmemory ([docs](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html), **InnoDB AUTO_INCREMENT\nCounter Initialization** header) and re-calculated on startup by looking at the last inserted id for any table. Now, if\nyou happen to have a table with no rows yet, the autoincrement starting value is set to 0 for every table without any\nentries. With the online migration feature this wasn't an issue, because the migration engine looked at the `ent_types`\ntables and made sure to update the counter, if it wasn't set correctly. However, with versioned migration, this is no\nlonger the case. In order to ensure, that everything is set up correctly after a server restart, make sure to call\nthe `VerifyTableRange` method on the Atlas struct:",
      "source_content_hash": "0c6a9a1d80fd68062a4a1cf4b42030e6e3cc2b5374a80050770839d469fe7ab3",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "使用全局唯一ID时，Ent会为每个表分配`1<<32`范围的整数值。具体实现方式是：第一个表的自增起始值为`1`，第二个表为`4294967296`，第三个表为`8589934592`，以此类推。这些起始值的分配顺序会被记录在名为`ent_types`的额外表中。在MySQL 5.6和5.7版本中，自增起始值仅保存在内存中（参见[文档](https://dev.mysql.com/doc/refman/8.0/en/innodb-auto-increment-handling.html)中**InnoDB AUTO_INCREMENT计数器初始化**章节），并在服务重启时通过检查每个表的最后插入ID重新计算。如果某个表尚未插入任何行，其自增起始值会被设为0。在线迁移功能原本可以通过检查`ent_types`表来修正计数器值，但在版本化迁移中这一机制不再生效。为确保服务器重启后配置正确，必须调用Atlas结构体的`VerifyTableRange`方法："
      }
    },
    {
      "segment_id": "9f5bf6ec",
      "source_content": "```go\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\n\t\"<project>/ent\"\n\t\"<project>/ent/migrate\"\n\t\"entgo.io/ent/dialect/sql\"\n\t\"entgo.io/ent/dialect/sql/schema\"\n\n\t_ \"github.com/go-sql-driver/mysql\"\n)\n\nfunc main() {\n\tdrv, err := sql.Open(\"mysql\", \"user:pass@tcp(localhost:3306)/ent\")\n\tif err != nil {\n\t\tlog.Fatalf(\"failed opening connection to mysql: %v\", err)\n\t}\n\tdefer drv.Close()\n\t// Verify the type allocation range.\n\tm, err := schema.NewMigrate(drv, nil)\n\tif err != nil {\n\t\tlog.Fatalf(\"failed creating migrate: %v\", err)\n\t}\n\tif err := m.VerifyTableRange(context.Background(), migrate.Tables); err != nil {\n\t\tlog.Fatalf(\"failed verifyint range allocations: %v\", err)\n\t}\n\tclient := ent.NewClient(ent.Driver(drv))\n\t// ... do stuff with the client\n}\n```",
      "source_content_hash": "c574f393e5fbddd50c483f84821885ae878b8758fbb9767dbcd3a2c936fe4512",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_9f5bf6ec"
      }
    },
    {
      "segment_id": "5089729c",
      "source_content": ":::caution[Important]\nAfter an upgrade to MySQL 8 from a previous version, you still have to run the method once to update the starting \nvalues. Since MySQL 8 the counter is no longer only stored in memory, meaning subsequent calls to the method are no \nlonger needed after the first one.\n:::",
      "source_content_hash": "7d02871a4343b24cb6308b6ebcf9fe5d3f023f6cf6d72f9bc9219bfb0bd3eca9",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::caution[重要提示]\n从旧版本升级到MySQL 8后，仍需执行该方法一次以更新起始值。由于MySQL 8开始计数器不再仅存储于内存中，首次执行后后续无需重复调用。\n:::"
      }
    },
    {
      "segment_id": "03d90a4b",
      "source_content": "### Apply Migration Files",
      "source_content_hash": "105753781da7e76f5e9012543d3c066d8a86ffa3245902c05dd710b74a609c02",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 应用迁移文件"
      }
    },
    {
      "segment_id": "81cabb68",
      "source_content": "Ent recommends to use the Atlas CLI to apply the generated migration files onto the database. If you want to use any\nother migration management tool, Ent has support for generating migrations for several of them out of the box.",
      "source_content_hash": "8a4eebb08c84738ffce54b4564210bf8f8d43cb10fccd4cfcdcaee3c0306d6b7",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "Ent推荐使用Atlas CLI将生成的迁移文件应用到数据库。如需使用其他迁移管理工具，Ent也原生支持多种工具的迁移文件生成。"
      }
    },
    {
      "segment_id": "f6a32ac3",
      "source_content": "<AtlasMigrateApply/>",
      "source_content_hash": "298dd65bebb3e57ebdc80bf60180d36429a4c8f98b29fd718dd7b6f64f8ed394",
      "node_type": "mdxJsxFlowElement",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_f6a32ac3"
      }
    },
    {
      "segment_id": "9a246e40",
      "source_content": "For more information head over to the [Atlas documentation](https://atlasgo.io/versioned/apply).",
      "source_content_hash": "3aa141c46f384faaeb628ea32b3eeb59fa15049e8d11d54c07ea83d47d9e71b1",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "更多信息请参阅[Atlas文档](https://atlasgo.io/versioned/apply)。"
      }
    },
    {
      "segment_id": "dbe5ea5b",
      "source_content": ":::info\n\nIn previous versions of Ent [`golang-migrate/migrate`](https://github.com/golang-migrate/migrate) has been the default\nmigration execution engine. For an easy transition, Atlas can import the migrations format of golang-migrate for you.\nYou can learn more about it in the [Atlas documentation](https://atlasgo.io/versioned/import).\n\n:::",
      "source_content_hash": "0f822087a93c300c2522f59b0dc06ef5ecf4f36b0e72199ae6ef30002bcddcb0",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::info\n\n旧版Ent默认使用[`golang-migrate/migrate`](https://github.com/golang-migrate/migrate)作为迁移执行引擎。为便于过渡，Atlas可帮助导入golang-migrate格式的迁移文件，详见[Atlas文档](https://atlasgo.io/versioned/import)。\n\n:::"
      }
    },
    {
      "segment_id": "7cc74021",
      "source_content": "## Moving from Auto-Migration to Versioned Migrations",
      "source_content_hash": "aa1d4d6fb22644c87334c795ad823e20d3ff2f9d80c1e960a74b1a1082990928",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## 从自动迁移切换到版本化迁移"
      }
    },
    {
      "segment_id": "c9e8b912",
      "source_content": "In case you already have an Ent application in production and want to switch over from auto migration to the new\nversioned migration, you need to take some extra steps.",
      "source_content_hash": "9a35e406755fdc4d48e57023634194fa340de72540dbb757fd1c2d1419860258",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若需将已投入生产的Ent应用从自动迁移切换至新版版本化迁移，需执行额外步骤。"
      }
    },
    {
      "segment_id": "08495385",
      "source_content": "### Create an initial migration file reflecting the currently deployed state",
      "source_content_hash": "0051471c4bc52828c23310ceb31eba256e271e9700a88aaa84e90446a8937537",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 创建反映当前部署状态的初始迁移文件"
      }
    },
    {
      "segment_id": "dbf6b268",
      "source_content": "To do this make sure your schema definition is in sync with your deployed version(s). Then spin up an empty database and\nrun the diff command once as described above. This will create the statements needed to create the current state of\nyour schema graph. If you happened to have [universal IDs](migrate.md#universal-ids) enabled before, any deployment will \nhave a special database table named `ent_types`. The above command will create the necessary SQL statements to create \nthat table as well as its contents (similar to the following):",
      "source_content_hash": "37916e3f6b1e83d9984d13a46c35b1858955a628a21f75b14160b818e0284f30",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "首先确保Schema定义与已部署版本同步，然后启动空数据库并按前文所述执行diff命令。这将生成创建当前Schema图状态所需的SQL语句。若先前启用了[全局唯一ID](migrate.md#universal-ids)，所有部署实例都会包含名为`ent_types`的特殊数据库表。上述命令会生成创建该表及其内容的SQL语句（类似如下）："
      }
    },
    {
      "segment_id": "2a632893",
      "source_content": "```sql\nCREATE TABLE `users` (`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT);\nCREATE TABLE `groups` (`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT);\nINSERT INTO sqlite_sequence (name, seq) VALUES (\"groups\", 4294967296);\nCREATE TABLE `ent_types` (`id` integer NOT NULL PRIMARY KEY AUTOINCREMENT, `type` text NOT NULL);\nCREATE UNIQUE INDEX `ent_types_type_key` ON `ent_types` (`type`);\nINSERT INTO `ent_types` (`type`) VALUES ('users'), ('groups');\n```",
      "source_content_hash": "68aa690417c3188b876c17ea5c56cb582544d87f53f8117be6432bfe61965d41",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_2a632893"
      }
    },
    {
      "segment_id": "c31dcf3a",
      "source_content": "In order to ensure to not break existing code, make sure the contents of that file are equal to the contents in the\ntable present in the database you created the diff from. For example, if you consider the migration file from\nabove (`users,groups`) but your deployed table looks like the one below (`groups,users`):",
      "source_content_hash": "38f79345eb44e539e6669997f24ab7ac4a57bbfb0d9f7d27516320c429c8cbfe",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "为确保不破坏现有代码，必须使生成文件内容与源数据库中的表内容完全一致。例如，若生成的迁移文件显示顺序为(`users,groups`)，但实际部署表中的顺序为(`groups,users`)："
      }
    },
    {
      "segment_id": "510d71ae",
      "source_content": "| id  | type   |\n|-----|--------|\n| 1   | groups |\n| 2   | users  |",
      "source_content_hash": "03763b5f7babfa625d2ab030ffb245206369c6036eb9b912ec79307f8411de8e",
      "node_type": "table",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_510d71ae"
      }
    },
    {
      "segment_id": "d295cd55",
      "source_content": "You can see, that the order differs. In that case, you have to manually change both the entries in the generated\nmigration file.",
      "source_content_hash": "2c16f7d0865470b339a89839e22f17351a7656652bb7b6672d15fc4ca9bcd1ff",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "此时需手动调整生成迁移文件中的条目顺序。"
      }
    },
    {
      "segment_id": "03216819",
      "source_content": "### Use an Atlas Baseline Migration",
      "source_content_hash": "01e2e9726eb0b48e95d13a7841efceebdbdeb49eb7989fdc061d80ea4b90924f",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 使用Atlas基线迁移"
      }
    },
    {
      "segment_id": "0183083a",
      "source_content": "If you are using Atlas as migration execution engine, you can then simply use the `--baseline` flag. For other tools,\nplease take a look at their respective documentation.",
      "source_content_hash": "3230d4a6975c103c0c8e7221dfe68760a9b146e22d3c819b124958a8e58aca66",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若使用Atlas作为迁移执行引擎，可直接使用`--baseline`标志。其他工具请参考其官方文档。"
      }
    },
    {
      "segment_id": "7fa75ee8",
      "source_content": "```shell\natlas migrate apply \\\n  --dir \"file://migrations\"\n  --url mysql://root:pass@localhost:3306/ent\n  --baseline \"<version>\"\n```",
      "source_content_hash": "aecfe8231e252f740bf9f7381d6a43446f00234b103d08d782055dd4b86fdf61",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_7fa75ee8"
      }
    },
    {
      "segment_id": "fbe6d4c2",
      "source_content": "## Atlas migration directory integrity file",
      "source_content_hash": "64f049e22e27d306234f3bc98f414feb4d8494640bbb14267ae73a9ac756de5e",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "## Atlas迁移目录完整性文件"
      }
    },
    {
      "segment_id": "f1fa6c29",
      "source_content": "### The Problem",
      "source_content_hash": "0d607bdb14e634232a119a24c108cf018898429d423ba4c9424c912928b105ae",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 问题描述"
      }
    },
    {
      "segment_id": "04d3d31d",
      "source_content": "Suppose you have multiple teams develop a feature in parallel and both of them need a migration. If Team A and Team B do\nnot check in with each other, they might end up with a broken set of migration files (like adding the same table or\ncolumn twice) since new files do not raise a merge conflict in a version control system like git. The following example\ndemonstrates such behavior:",
      "source_content_hash": "52e9cc6c02b2ec8f3488f5145d3def3704d69dca4af951d14a04841c24b0896c",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "假设有多个团队并行开发功能且均需执行迁移。若团队A与团队B未及时协调，可能会因版本控制系统（如git）不会对新迁移文件引发合并冲突，最终生成损坏的迁移文件集（例如重复添加相同表或列）。以下示例展示了此类情况："
      }
    },
    {
      "segment_id": "927fbbdb",
      "source_content": "![atlas-versioned-migrations-no-conflict](https://entgo.io/images/assets/migrate/no-conflict.svg)",
      "source_content_hash": "30eacd9038f5708d2f8eb1bd139c544c4b86adf68385f349f9c3d826a910a984",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![atlas-versioned-migrations-no-conflict](https://entgo.io/images/assets/migrate/no-conflict.svg)"
      }
    },
    {
      "segment_id": "855bf260",
      "source_content": "Assume both Team A and Team B add a new schema called User and generate a versioned migration file on their respective\nbranch.",
      "source_content_hash": "1d70caea3e452778d1fb7e053ff5cb268d97ca1e3f0405c2a0c1a10b8e0f6b2a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "假设团队A和团队B各自在分支上新增User模式并生成版本化迁移文件。"
      }
    },
    {
      "segment_id": "dab8126c",
      "source_content": "```sql title=\"20220318104614_team_A.sql\"\n-- create \"users\" table\nCREATE TABLE `users` (\n    `id` bigint NOT NULL AUTO_INCREMENT,\n    // highlight-start\n    `team_a_col` INTEGER NOT NULL,\n    // highlight-end\n    PRIMARY KEY (`id`)\n) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```",
      "source_content_hash": "7a4139ad00387e0e23034ebacf5846a583f135a0554d901633a80129434f508a",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_dab8126c"
      }
    },
    {
      "segment_id": "14a37de9",
      "source_content": "```sql title=\"20220318104615_team_B.sql\"\n-- create \"users\" table\nCREATE TABLE `users` (\n    `id` bigint NOT NULL AUTO_INCREMENT,\n    // highlight-start\n     `team_b_col` INTEGER NOT NULL,\n    // highlight-end\n     PRIMARY KEY (`id`)\n) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n```",
      "source_content_hash": "3e8edef7add5f40b033a5b586fc1d9f859e7507abcfd9a22e19c4f69c17b5525",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_14a37de9"
      }
    },
    {
      "segment_id": "f4ae8e4a",
      "source_content": "If they both merge their branch into master, git will not raise a conflict and everything seems fine. But attempting to\napply the pending migrations will result in migration failure:",
      "source_content_hash": "bae663dfa2f8aea6e40ae81b863f35bb91b26932308143862615032fdbda6c70",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若两者同时将分支合并至主分支，git不会提示冲突且表面一切正常。但尝试应用待执行迁移时会导致迁移失败："
      }
    },
    {
      "segment_id": "7f1bd029",
      "source_content": "```shell\nmysql> CREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `team_a_col` INTEGER NOT NULL, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n[2022-04-14 10:00:38] completed in 31 ms\n\nmysql> CREATE TABLE `users` (`id` bigint NOT NULL AUTO_INCREMENT, `team_b_col` INTEGER NOT NULL, PRIMARY KEY (`id`)) CHARSET utf8mb4 COLLATE utf8mb4_bin;\n[2022-04-14 10:00:48] [42S01][1050] Table 'users' already exists\n```",
      "source_content_hash": "e09c4b669a08d4562c202a4f43573a8eb3bc8a4b6d7b46acd54f22c3b6d10bb2",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_7f1bd029"
      }
    },
    {
      "segment_id": "177bff0d",
      "source_content": "Depending on the SQL this can potentially leave your database in a crippled state.",
      "source_content_hash": "593e4defb53f98d246b125ac7a9172481615b94fdc08944b6d39100c29bb6dc0",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "根据SQL语句不同，可能使数据库处于不可用状态。"
      }
    },
    {
      "segment_id": "f5692fc5",
      "source_content": "### The Solution",
      "source_content_hash": "2251879aee58948b886890d9736d592e28109c118e59593a5b81208a487dcc4d",
      "node_type": "heading",
      "translatable": true,
      "translations": {
        "zh-CN": "### 解决方案"
      }
    },
    {
      "segment_id": "55ed1bcc",
      "source_content": "Luckily, the Atlas migration engine offers a way to prevent concurrent creation of new migration files and guard against\naccidental changes in the migration history we call **Migration Directory Integrity File**, which simply is another file\nin your migration directory called `atlas.sum`. For the migration directory of team A it would look similar to this:",
      "source_content_hash": "cd494cb88b4e731998ed68da0d8b3cede80a03d2cfb4d07b39daaa366ac0f514",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "所幸Atlas迁移引擎提供了防止并发创建新迁移文件及保护迁移历史免遭意外更改的机制——**迁移目录完整性文件**。该机制通过在迁移目录中添加名为`atlas.sum`的文件实现。团队A的迁移目录中该文件示例如下："
      }
    },
    {
      "segment_id": "6f1aa8e6",
      "source_content": "```text\nh1:KRFsSi68ZOarsQAJZ1mfSiMSkIOZlMq4RzyF//Pwf8A=\n20220318104614_team_A.sql h1:EGknG5Y6GQYrc4W8e/r3S61Aqx2p+NmQyVz/2m8ZNwA=\n\n```",
      "source_content_hash": "1f3dff399a9f1487e522a0898b8e2151dda916179c4c218aabd83b957a273eb0",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_6f1aa8e6"
      }
    },
    {
      "segment_id": "f5c5aea8",
      "source_content": "The `atlas.sum` file contains the checksum of each migration file (implemented by a reverse, one branch merkle hash\ntree), and a sum of all files. Adding new files results in a change to the sum file, which will raise merge conflicts in\nmost version controls systems. Let's see how we can use the **Migration Directory Integrity File** to detect the case\nfrom above automatically.",
      "source_content_hash": "d2778435b95e1229cf9044ffa93038ad02fe958f785319c64487dbbaa23fd525",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "`atlas.sum`文件包含每个迁移文件的校验值（通过反向单分支Merkle哈希树实现）及所有文件的汇总值。新增文件会导致汇总文件变更，从而在多数版本控制系统中引发合并冲突。以下演示如何通过**迁移目录完整性文件**自动检测前述问题。"
      }
    },
    {
      "segment_id": "91728770",
      "source_content": ":::note\nPlease note, that you need to have the Atlas CLI installed in your system for this to work, so make sure to follow\nthe [installation instructions](https://atlasgo.io/cli/getting-started/setting-up#install-the-cli) before proceeding.\n:::",
      "source_content_hash": "7bfa0589de813d51914414a4ab6781c2ee21969f464a0c8161b432627f8d3594",
      "node_type": "containerDirective",
      "translatable": true,
      "translations": {
        "zh-CN": ":::note\n请注意，此功能需在系统中安装Atlas CLI，请确保先遵循[安装指南](https://atlasgo.io/cli/getting-started/setting-up#install-the-cli)。\n:::"
      }
    },
    {
      "segment_id": "0625a031",
      "source_content": "In previous versions of Ent, the integrity file was opt-in. But we think this is a very important feature that provides\ngreat value and safety to migrations. Therefore, generation of the sum file is now the default behavior and in the \nfuture we might even remove the option to disable this feature. For now, if you really want to remove integrity file \ngeneration, use the `schema.DisableChecksum()` option.",
      "source_content_hash": "c5e613d2e8bf49227b8d97118dafd4ca5df0a3e8caf7e80f741457dbd492131a",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "在早期Ent版本中，完整性文件为可选功能。但我们认为该特性能为迁移提供重要安全保障，因此现在默认生成汇总文件，未来版本可能移除禁用选项。当前若需禁用完整性检查，可使用`schema.DisableChecksum()`选项。"
      }
    },
    {
      "segment_id": "e440c014",
      "source_content": "In addition to the usual `.sql` migration files the migration directory will contain the `atlas.sum` file. Every time\nyou let Ent generate a new migration file, this file is updated for you. However, every manual change made to the\nmigration directory will render the migration directory and the `atlas.sum` file out-of-sync. With the Atlas CLI you can\nboth check if the file and migration directory are in-sync, and fix it if not:",
      "source_content_hash": "afe3ec7325558cd0c22c56cdafc11ea20ad6ab013526b445d621db7fa1559ebb",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "迁移目录除常规`.sql`文件外将包含`atlas.sum`文件。每次生成新迁移文件时该文件会自动更新。但任何对迁移目录的手动修改都会导致目录与`atlas.sum`文件不同步。通过Atlas CLI可检查同步状态并进行修复："
      }
    },
    {
      "segment_id": "b5f76a62",
      "source_content": "```shell\n# If there is no output, the migration directory is in-sync.\natlas migrate validate --dir file://<path-to-your-migration-directory>\n```",
      "source_content_hash": "b879190344a8f832ed86624f32de565e8e169a91834da14734d9b34c1c280e03",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_b5f76a62"
      }
    },
    {
      "segment_id": "6e5eeedc",
      "source_content": "```shell\n# If the migration directory and sum file are out-of-sync the Atlas CLI will tell you.\natlas migrate validate --dir file://<path-to-your-migration-directory>\nError: checksum mismatch\n\nYou have a checksum error in your migration directory.\nThis happens if you manually create or edit a migration file.\nPlease check your migration files and run\n\n'atlas migrate hash'\n\nto re-hash the contents and resolve the error.\n\nexit status 1\n```",
      "source_content_hash": "6e8ce25822781e29962eb9aa178191ced95bdcf3fb2bfa8bf332c41fcba915aa",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_6e5eeedc"
      }
    },
    {
      "segment_id": "f2533630",
      "source_content": "If you are sure, that the contents in your migration files are correct, you can re-compute the hashes in the `atlas.sum`\nfile:",
      "source_content_hash": "4d7695f4c5296982cab3faec4ebfa5d17eabdd9c54041372d780195146a92666",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "若确认迁移文件内容正确，可重新计算`atlas.sum`中的哈希值："
      }
    },
    {
      "segment_id": "da43d576",
      "source_content": "```shell\n# Recompute the sum file.\natlas migrate hash --dir file://<path-to-your-migration-directory>\n```",
      "source_content_hash": "c8e53e84f5d7bb64ec133c553fefdb5109fbeaa6bdacc23390c690ee0b0d6e11",
      "node_type": "code",
      "translatable": false,
      "translations": {
        "zh-CN": "@@untranslatable_placeholder_da43d576"
      }
    },
    {
      "segment_id": "c8226f62",
      "source_content": "Back to the problem above, if team A would land their changes on master first and team B would now attempt to land\ntheirs, they'd get a merge conflict, as you can see in the example below:",
      "source_content_hash": "b0d141bb55872700add2a463c007151b7cff63fae0976144f7c33c83a072defa",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "回到前述问题，若团队A先将变更合并至主分支，团队B随后尝试合并时会出现如下合并冲突："
      }
    },
    {
      "segment_id": "d8903f53",
      "source_content": "![atlas-versioned-migrations-no-conflict](https://entgo.io/images/assets/migrate/conflict.svg)",
      "source_content_hash": "cb80a275306267f22ec89c3971735a26b188d1b2360e240bd7cc3614c144894e",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "![atlas-versioned-migrations-no-conflict](https://entgo.io/images/assets/migrate/conflict.svg)"
      }
    },
    {
      "segment_id": "81953b4d",
      "source_content": "You can add the `atlas migrate validate` call to your CI to have the migration directory checked continuously. Even if\nany team member would now forget to update the `atlas.sum` file after a manual edit, the CI would not go green,\nindicating a problem.",
      "source_content_hash": "6ace05384cc7cefb12af63091f760052337f05e7c1e3f5fccd70d3a8db6b2277",
      "node_type": "paragraph",
      "translatable": true,
      "translations": {
        "zh-CN": "可在CI流程中添加`atlas migrate validate`调用以持续检查迁移目录。即使团队成员手动修改后忘记更新`atlas.sum`文件，CI流程也会立即发现问题。"
      }
    }
  ],
  "target_i18n_subpath": "docusaurus-plugin-content-docs/current/versioned-migrations.mdx",
  "last_updated_timestamp": "2025-06-05T15:16:18.682494+00:00",
  "schema_version": "1.0",
  "translated_versions": {
    "zh-CN": "bd509300e4ddb53f2b74152f0970dae3e15a499ad78e1bc047cefc8bb4bea9a4"
  }
}